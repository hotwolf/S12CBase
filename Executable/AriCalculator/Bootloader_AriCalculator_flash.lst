                                      ;# Size of the bootloader code
??????        -> $1000                BOOTLOADER_SIZE         EQU     $1000           ;default is 4K
                                      ;###############################################################################
                                      ;# Module configuration                                                        #
                                      ;###############################################################################
                                      ;#CLOCK
??????        -> $0001                CLOCK_CPMU              EQU     1               ;CPMU
??????        -> $0001                CLOCK_IRC               EQU     1               ;use IRC
??????        -> $F4240               CLOCK_OSC_FREQ          EQU      1000000        ; 1 MHz IRC frequency
??????        -> $17D7840             CLOCK_BUS_FREQ          EQU     25000000        ;25 MHz bus frequency
??????        -> $F4240               CLOCK_REF_FREQ          EQU      1000000        ; 1 MHz reference clock frequency
??????        -> $0001                CLOCK_VCOFRQ            EQU     $1              ;10 MHz VCO frequency
??????        -> $0000                CLOCK_REFFRQ            EQU     $0              ; 1 MHz reference clock frequency
                                      ;#VECTAB
??????        -> $0001                VECTAB_DEBUG_OFF        EQU     1               ;debug IRQs
                                      ;#SSTACK:
??????        -> $1B00                SSTACK_TOP              EQU     STACKS_START
??????        -> $1B00                SSTACK_TOP_LIN          EQU     STACKS_START
??????        -> $3F80                SSTACK_BOTTOM           EQU     STACKS_END
                                      ;#SCI
??????        -> $0001                SCI_V5                  EQU     1               ;V5
??????        -> $0001                SCI_BAUD_9600           EQU     1               ;fixed baud rate
??????        -> $0001                SCI_BAUD_DETECT_OFF     EQU     1               ;no baud rate detection
??????        -> $0040                SCI_OC_TIM              EQU     TIM             ;ECT
??????        -> $0000                SCI_OC                  EQU     0               ;OC0
??????        -> $0001                SCI_RTSCTS              EQU     1               ;RTS/CTS flow control
??????        -> $0250                SCI_RTS_PORT            EQU     PTM             ;PTM
??????        -> $0001                SCI_RTS_PIN             EQU     PM0             ;PM0
??????        -> $0250                SCI_CTS_PORT            EQU     PTM             ;PTM
??????        -> $0252                SCI_CTS_DDR             EQU     DDRM            ;DDRM
??????        -> $0255                SCI_CTS_PPS             EQU     PPSM            ;PPSM
??????        -> $0002                SCI_CTS_PIN             EQU     PM1             ;PM1
??????        -> $0001                SCI_CTS_STRONG_DRIVE    EQU     1               ;strong drive
??????        -> $0001                SCI_RXTX_ACTHI          EQU     1               ;RXD/TXD are active hi
??????        -> $0040                SCI_RXBUF_SIZE          EQU     32*2            ;easier to debug
??????        -> $0008                SCI_TXBUF_SIZE          EQU     8               ;easier to debug
                                      ;#STRING
                                      ;STRING_ENABLE_ERASE_NB EQU     1               ;enable STRING_ERASE_NB
                                      ;STRING_ENABLE_ERASE_BL EQU     1               ;enable STRING_ERASE_BL
                                      ;STRING_ENABLE_FILL_NB  EQU     1               ;enable STRING_FILL_NB
                                      ;STRING_ENABLE_FILL_BL  EQU     1               ;enable STRING_FILL_BL
??????        -> $0001                STRING_ENABLE_PRINTABLE EQU     1               ;enable STRING_PRINTABLE
                                      ;#LED
                                      ; LED A: PE0 -> busy  (green)
                                      ; LED B: PE1 -> error (red)
                                      ; Timer usage
                                      ;LED_TIM                EQU     TIM             ;TIM
                                      ;LED_OC                 EQU     1               ;OC1
                                      ; LED A
??????        -> $0001                LED_A_BLINK_OFF         EQU     1               ;no blink patterns
??????        -> $0008                LED_A_PORT              EQU     PORTE           ;port E
??????        -> $0001                LED_A_PIN               EQU     PE0             ;PE0
                                      ; LED B
??????        -> $0001                LED_B_BLINK_OFF         EQU     1               ;no blink patterns
??????        -> $0008                LED_B_PORT              EQU     PORTE           ;port E
??????        -> $0002                LED_B_PIN               EQU     PE1             ;PE1
                                      ;#TIM
??????        -> $0001                TIM_TIOS_INIT           EQU     SCI_OC_TIOS_INIT|LED_TIOS_INIT
                                      ;#DISP
??????        -> $F94B                DISP_SEQ_INIT_START     EQU     IMG_SEQ_INIT_START;start of initialization stream
??????        -> $FC27                DISP_SEQ_INIT_END       EQU     DISP_SEQ_INIT_END ;end of initialization stream
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Error codes
??????        -> $0001                BOOTLOADER_ERR_UNKNOWN  EQU     $01             ;unknown error
                                      ;###############################################################################
                                      ;# Security and memory protection                                              #
                                      ;###############################################################################
00FF0C 03FF0C                                                 ORG     $FF0C, $3_FF0C
00FF0C 03FF0C CF                                              DB      $CF             ;FPROT:  protect $3_F000-$3_FFFF
00FF0D 03FF0D FF                                              DB      $FF             ;EEPROT: unprotect
00FF0E 03FF0E FF                                              DB      $FF             ;FOPT:   don't enable the COP
00FF0F 03FF0F FE                                              DB      $FE             ;FSEC:   unsecure
                                                              ;Vector table
00FF10 03FF10 -> $3F80                VECTAB_START            EQU     MMAP_RAM_END-VECTAB_SIZE                ;LRE destination
00FF10 03FF10 -> $3FF80               VECTAB_START_LIN        EQU     MMAP_FLASH_F_END_LIN-VECTAB_SIZE        ;LRE source
                                                              ;RAM tables
00FF10 03FF10 -> $1400                RAM_TABS_START          EQU     MMAP_RAM_START                          ;LRE destination
00FF10 03FF10 -> $3F000               RAM_TABS_START_LIN      EQU     MMAP_FLASH_F_END_LIN-BOOTLOADER_SIZE    ;LRE source
                                                              ;RAM code
00140F 03F00F                                                 ORG     RAM_TABS_END, RAM_TABS_END_LIN
00140F 03F00F -> $140F                RAM_CODE_START          EQU     *                                       ;LRE destination
00140F 03F00F -> $3F00F               RAM_CODE_START_LIN      EQU     @                                       ;LRE source
                                                              ;Variables
001994 001994                                                 ORG     RAM_CODE_END, RAM_CODE_END
001994 001994 -> $1994                VARS_START              EQU     *
001994 001994 -> $1994                VARS_START_LIN          EQU     @
                                                              ;Stacks
001B00 001B00                                                 ORG     VARS_END, VARS_END
001B00 001B00 -> $1B00                STACKS_START            EQU     *
001B00 001B00 -> $3F80                STACKS_END              EQU     VECTAB_START
001B00 001B00                                                 DS      STACKS_END-STACKS_START
                                                              ;Code
003F80 003F80 -> $F594                CODE_START              EQU     RAM_CODE_END_LIN&$FFFF
003F80 003F80 -> $3F594               CODE_START_LIN          EQU     RAM_CODE_END_LIN
                                                              ;Tables
00F890 03F890                                                 ORG     CODE_END, CODE_END_LIN
00F890 03F890 -> $F890                TABS_START              EQU     *
00F890 03F890 -> $3F890               TABS_START_LIN          EQU     @
                                      ;###############################################################################
                                      ;# Global variable space                                                       #
                                      ;###############################################################################
001994 001994                                                 ORG     VARS_START, VARS_START_LIN
001994 001994 -> $1994                MMAP_VARS_START         EQU     *
001994 001994 -> $1994                MMAP_VARS_START_LIN     EQU     @
001994 001994                                                 ORG     MMAP_VARS_END, MMAP_VARS_END_LIN
001994 001994 -> $1994                GPIO_VARS_START         EQU     *
001994 001994 -> $1994                GPIO_VARS_START_LIN     EQU     @
001994 001994                                                 ORG     GPIO_VARS_END, GPIO_VARS_END_LIN
001994 001994 -> $1994                RESET_VARS_START        EQU     *
001994 001994 -> $1994                RESET_VARS_START_LIN    EQU     @
001994 001994                                                 ORG     RESET_VARS_END, RESET_VARS_END_LIN
001994 001994 -> $1994                CLOCK_VARS_START        EQU     *
001994 001994 -> $1994                CLOCK_VARS_START_LIN    EQU     @
001994 001994                                                 ORG     CLOCK_VARS_END, CLOCK_VARS_END_LIN
001994 001994 -> $1994                LRE_VARS_START          EQU     *
001994 001994 -> $1994                LRE_VARS_START_LIN      EQU     @
001994 001994                                                 ORG     LRE_VARS_END, LRE_VARS_END_LIN
001994 001994 -> $1994                TIM_VARS_START          EQU     *
001994 001994 -> $1994                TIM_VARS_START_LIN      EQU     @
001994 001994                                                 ORG     TIM_VARS_END, TIM_VARS_END_LIN
001994 001994 -> $1994                VECTAB_VARS_START       EQU     *
001994 001994 -> $1994                VECTAB_VARS_START_LIN   EQU     @
001994 001994                                                 ORG     VECTAB_VARS_END, VECTAB_VARS_END_LIN
001994 001994 -> $1994                SSTACK_VARS_START       EQU     *
001994 001994 -> $1994                SSTACK_VARS_START_LIN   EQU     @
001994 001994                                                 ORG     SSTACK_VARS_END, SSTACK_VARS_END_LIN
001994 001994 -> $1994                ISTACK_VARS_START       EQU     *
001994 001994 -> $1994                ISTACK_VARS_START_LIN   EQU     @
001994 001994                                                 ORG     ISTACK_VARS_END, ISTACK_VARS_END_LIN
001994 001994 -> $1994                SCI_VARS_START          EQU     *
001994 001994 -> $1994                SCI_VARS_START_LIN      EQU     @
0019E2 0019E2                                                 ORG     SCI_VARS_END, SCI_VARS_END_LIN
0019E2 0019E2 -> $19E2                STRING_VARS_START       EQU     *
0019E2 0019E2 -> $19E2                STRING_VARS_START_LIN   EQU     @
0019E2 0019E2                                                 ORG     STRING_VARS_END, STRING_VARS_END_LIN
0019E2 0019E2 -> $19E2                DISP_VARS_START         EQU     *
0019E2 0019E2 -> $19E2                DISP_VARS_START_LIN     EQU     @
0019F5 0019F5                                                 ORG     DISP_VARS_END, DISP_VARS_END_LIN
0019F5 0019F5 -> $19F5                LED_VARS_START          EQU     *
0019F5 0019F5 -> $19F5                LED_VARS_START_LIN      EQU     @
0019F5 0019F5                                                 ORG     LED_VARS_END, LED_VARS_END_LIN
0019F5 0019F5 -> $19F5                NVM_VARS_START          EQU     *
0019F5 0019F5 -> $19F5                NVM_VARS_START_LIN      EQU     @
001AF3 001AF3                                                 ORG     NVM_VARS_END, NVM_VARS_END_LIN
001AF3 001AF3 -> $1AF3                SREC_VARS_START         EQU     *
001AF3 001AF3 -> $1AF3                SREC_VARS_START_LIN     EQU     @
001AFF 001AFF                                                 ORG     SREC_VARS_END, SREC_VARS_END_LIN
001AFF 001AFF -> $1AFF                IMG_VARS_START          EQU     *
001AFF 001AFF -> $1AFF                IMG_VARS_START_LIN      EQU     @
001AFF 001AFF                                                 ORG     IMG_VARS_END, IMG_VARS_END_LIN
001AFF 001AFF                         BOOTLOADER_COUNT        DS      1
001B00 001B00 -> $1B00                VARS_END                EQU     *
001B00 001B00 -> $1B00                VARS_END_LIN            EQU     @
                                      ;###############################################################################
                                      ;# Code space                                                                  #
                                      ;###############################################################################
00F594 03F594                                                 ORG     CODE_START, CODE_START_LIN
00F594 03F594 -> $F594                START_OF_CODE           EQU     *
                                                              ;Initialization
00F594 03F594 MACRO                                           INIT                                    ;initialize bootloader
                                      ;############################################################################### (INIT)
                                      ;# Initialization                                                              # (INIT)
                                      ;############################################################################### (INIT)
00F594 03F594 MACRO                                           RESET_INIT              ;start bootloder or application  (INIT)
                                      ;############################################################################### (INIT/RESET_INIT)
                                      ;# Macros                                                                      # (INIT/RESET_INIT)
                                      ;############################################################################### (INIT/RESET_INIT)
                                      ;#Initialization                                                                 (INIT/RESET_INIT)
                                                              ;Check for POR                                           (INIT/RESET_INIT)
00F594 03F594 4E 37 40 15                                     BRSET   CPMUFLG, #PORF, CHECK_KEYPAD            ;check for POR (INIT/RESET_INIT)
                                                              ;Start firmware                                          (INIT/RESET_INIT)
00F598 03F598 79 00 7D                START_FIRMWARE          CLR     ATDDIENL                                ;restore reset state (INIT/RESET_INIT)
00F59B 03F59B 79 02 79                                        CLR     PER1AD                                  ;restore reset state (INIT/RESET_INIT)
00F59E 03F59E 79 02 5A                                        CLR     DDRP                                    ;restore reset state (INIT/RESET_INIT)
00F5A1 03F5A1 79 02 58                                        CLR     PTP                                     ;restore reset state (INIT/RESET_INIT)
00F5A4 03F5A4 18 0B EF 01 20                                  MOVB    #(($FF00-BOOTLOADER_SIZE)>>8), IVBR     ;set vector base (INIT/RESET_INIT)
00F5A9 03F5A9 05 FB FA 51                                     JMP     [$FFFE-BOOTLOADER_SIZE]                 ;jump to firmware (INIT/RESET_INIT)
                                                              ;Setup keypad                                            (INIT/RESET_INIT)
00F5AD 03F5AD 18 0B FF 00 7D          CHECK_KEYPAD            MOVB    #$FF, ATDDIENL                          ;enable PAD's input buffers (INIT/RESET_INIT)
00F5B2 03F5B2 18 0B FF 02 79                                  MOVB    #$FF, PER1AD                            ;enable PAD's pull-ups (INIT/RESET_INIT)
00F5B7 03F5B7 18 0B 3F 02 5A                                  MOVB    #$3F,   DDRP                            ;drive keyboard columns low (INIT/RESET_INIT)
                                                              ;Check key pad                                           (INIT/RESET_INIT)
                                                              ;          P  P  P  P  P  P                              (INIT/RESET_INIT)
                                                              ;          P  P  P  P  P  P                              (INIT/RESET_INIT)
                                                              ;          0  1  2  3  4  5                              (INIT/RESET_INIT)
                                                              ;          |  |  |  |  |  |                              (INIT/RESET_INIT)
                                                              ; PAD6 ---29-28-27-26-25-24 |G                           (INIT/RESET_INIT)
                                                              ;          |  |  |  |  |  | |                            (INIT/RESET_INIT)
                                                              ; PAD5 ---23-22-21-20-1F-1E |F                           (INIT/RESET_INIT)
                                                              ;          |  |  |  |  |  | |                            (INIT/RESET_INIT)
                                                              ; PAD4 ---1D-1C-1B-1A-19-18 |E                           (INIT/RESET_INIT)
                                                              ;             |  |  |  |  | |                            (INIT/RESET_INIT)
                                                              ; PAD3 ------16-15-14-13-12 |D                           (INIT/RESET_INIT)
                                                              ;             |  |  |  |  | |                            (INIT/RESET_INIT)
                                                              ; PAD2 ------10--F--E--D--C |C                           (INIT/RESET_INIT)
                                                              ;             |  |  |  |  | |                            (INIT/RESET_INIT)
                                                              ; PAD1 -------A--9--8--7--6 |B                           (INIT/RESET_INIT)
                                                              ;             |  |  |  |  | |                            (INIT/RESET_INIT)
                                                              ; PAD0 -------4--3--2--1--0 |A                           (INIT/RESET_INIT)
                                                              ;          ________________                              (INIT/RESET_INIT)
                                                              ;          5  4  3  2  1  0                              (INIT/RESET_INIT)
00F5BC 03F5BC 18 0B FD 02 58                                  MOVB    #$FD, PTP                               ;check row 4 (INIT/RESET_INIT)
00F5C1 03F5C1 A7                                              NOP                                             ;wait    (INIT/RESET_INIT)
00F5C2 03F5C2 B6 02 71                                        LDAA    PT1AD                                   ;row pattern -> A (INIT/RESET_INIT)
00F5C5 03F5C5 18 0B EF 02 58                                  MOVB    #$EF, PTP                               ;check row 1 (INIT/RESET_INIT)
00F5CA 03F5CA 81 FB                                           CMPA    #$FB                                    ;check for ENTER key (INIT/RESET_INIT)
00F5CC 03F5CC 26 CA                                           BNE     START_FIRMWARE                          ;start regular firmware (INIT/RESET_INIT)
00F5CE 03F5CE B6 02 71                                        LDAA    PT1AD                                   ;row pattern -> A (INIT/RESET_INIT)
00F5D1 03F5D1 18 0B DF 02 58                                  MOVB    #$DF, PTP                               ;check row 0 (INIT/RESET_INIT)
00F5D6 03F5D6 81 FE                                           CMPA    #$FE                                    ;check for DEL key (INIT/RESET_INIT)
00F5D8 03F5D8 26 BE                                           BNE     START_FIRMWARE                          ;start regular firmware (INIT/RESET_INIT)
00F5DA 03F5DA B6 02 71                                        LDAA    PT1AD                                   ;row pattern -> A (INIT/RESET_INIT)
00F5DD 03F5DD 18 0B F7 02 58                                  MOVB    #$F7, PTP                               ;check row 2 (INIT/RESET_INIT)
00F5E2 03F5E2 41                                              COMA                                            ;check for no key (INIT/RESET_INIT)
00F5E3 03F5E3 26 B3                                           BNE     START_FIRMWARE                          ;start regular firmware (INIT/RESET_INIT)
00F5E5 03F5E5 B6 02 71                                        LDAA    PT1AD                                   ;row pattern -> A (INIT/RESET_INIT)
00F5E8 03F5E8 18 0B FB 02 58                                  MOVB    #$FB, PTP                               ;check row 3 (INIT/RESET_INIT)
00F5ED 03F5ED 41                                              COMA                                            ;check for no key (INIT/RESET_INIT)
00F5EE 03F5EE 26 A8                                           BNE     START_FIRMWARE                          ;start regular firmware (INIT/RESET_INIT)
00F5F0 03F5F0 B6 02 71                                        LDAA    PT1AD                                   ;row pattern -> A (INIT/RESET_INIT)
00F5F3 03F5F3 18 0B FE 02 58                                  MOVB    #$FE, PTP                               ;check row 5 (INIT/RESET_INIT)
00F5F8 03F5F8 41                                              COMA                                            ;check for no key (INIT/RESET_INIT)
00F5F9 03F5F9 26 9D                                           BNE     START_FIRMWARE                          ;start regular firmware (INIT/RESET_INIT)
00F5FB 03F5FB B6 02 71                                        LDAA    PT1AD                                   ;row pattern -> A (INIT/RESET_INIT)
00F5FE 03F5FE 18 0B FF 02 58                                  MOVB    #$FF, PTP                               ;unselect keypad columns (INIT/RESET_INIT)
00F603 03F603 41                                              COMA                                            ;check for no key (INIT/RESET_INIT)
00F604 03F604 26 92                                           BNE     START_FIRMWARE                          ;start regular firmware (INIT/RESET_INIT)
00F606 03F606 MACRO                                           MMAP_INIT               ;configure memory map            (INIT)
00F606 03F606 MACRO                                           GPIO_INIT               ;configure I/Os                  (INIT)
                                      ;############################################################################### (INIT/GPIO_INIT)
                                      ;# Macros                                                                      # (INIT/GPIO_INIT)
                                      ;############################################################################### (INIT/GPIO_INIT)
                                      ;#Initialization                                                                 (INIT/GPIO_INIT)
                                                      ;#Urgent initializations                                         (INIT/GPIO_INIT)
00F606 03F606 18 0B 03 02 4D                          MOVB    #03, PPSS                               ;switch to pull-downs on PS[1:0] (TX/RX) (INIT/GPIO_INIT)
                                                      ;#Port AD                                                        (INIT/GPIO_INIT)
00F60B 03F60B 18 03 FC FF 00 7C                       MOVW    #%1111_1100_1111_1111, ATDDIEN          ;switch unused pins to digital (INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PT0AD                                            (INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDR0AD                                           (INIT/GPIO_INIT)
00F611 03F611 18 03 FC FF 02 78                       MOVW    #%1111_1100_1111_1111, PER0AD                            (INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PPS0AD                                           (INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PIE0AD                                           (INIT/GPIO_INIT)
                                                      ;#Port A, B, C, D, and E                                         (INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTA                           ;port A/B        (INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRA                            ;port A/B        (INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, PORTC                           ;port C/D        (INIT/GPIO_INIT)
                                                      ;MOVW   #$0000, DDRC                            ;port C/D        (INIT/GPIO_INIT)
00F617 03F617 18 03 03 03 00 08                       MOVW    #$0303, PORTE                           ;port E (PORTE/DDRE) (INIT/GPIO_INIT)
00F61D 03F61D 18 0B 4F 00 0C                          MOVB    #$4F,   PUCR                            ;BKPUE|~PDPEE|PUPDE|PUPCE|PUPBE|PUPAE (INIT/GPIO_INIT)
                                                      ;MOVB   #$C0,   ECLKCTL                                          (INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   IRQCR                                            (INIT/GPIO_INIT)
                                                      ;#Port J                                                         (INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTJ                                              (INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   DDRJ                                             (INIT/GPIO_INIT)
                                                      ;MOVB   #$FF    PERJ                                             (INIT/GPIO_INIT)
00F622 03F622 18 0B 0F 02 6D                          MOVB    #$0F,   PPSJ                                             (INIT/GPIO_INIT)
                                                      ;MOVB   #$00FF, PIEJ                            ;PIEJ/PIFJ       (INIT/GPIO_INIT)
                                                      ;#Port M                                                         (INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTM                                              (INIT/GPIO_INIT)
00F627 03F627 18 0B 02 02 52                          MOVB    #$02,   DDRM                                             (INIT/GPIO_INIT)
00F62C 03F62C 18 03 0D 01 02 54                       MOVW    #$0D01  PERM                            ;PERM/PPSM       (INIT/GPIO_INIT)
                                                      ;MOVB   #$02,   WOMM                                             (INIT/GPIO_INIT)
                                                      ;#Port P                                                         (INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PTP                                              (INIT/GPIO_INIT)
00F632 03F632 18 0B 3F 02 5A                          MOVB    #$3F,   DDRP                            ;drive keyboard columns low (INIT/GPIO_INIT)
00F637 03F637 18 0B FF 02 5C                          MOVB    #$FF    PERP                                             (INIT/GPIO_INIT)
                                                      ;MOVB   #$00,   PPSP                                             (INIT/GPIO_INIT)
                                                      ;MOVB   #$00FF, PIEP                            ;PIEP/PIFP       (INIT/GPIO_INIT)
                                                      ;#Port S                                                         (INIT/GPIO_INIT)
00F63C 03F63C 18 0B 80 02 48                          MOVB    #$80,   PTS                                              (INIT/GPIO_INIT)
00F641 03F641 18 0B FA 02 4A                          MOVB    #$FA,   DDRS                                             (INIT/GPIO_INIT)
00F646 03F646 18 03 0A 01 02 4C                       MOVW    #$0A01, PERS                            ;PERS/PPSS       (INIT/GPIO_INIT)
                                                      ;MOVB   #$02,   WOMS                                             (INIT/GPIO_INIT)
                                                      ;#Port T                                                         (INIT/GPIO_INIT)
00F64C 03F64C 18 0B 20 02 40                          MOVB    #$20,   PTT                                              (INIT/GPIO_INIT)
00F651 03F651 18 0B 20 02 42                          MOVB    #$20,   DDRT                                             (INIT/GPIO_INIT)
00F656 03F656 18 0B DC 02 44                          MOVB    #$DC    PERT                                             (INIT/GPIO_INIT)
                                                      ;General setup                                                   (INIT/GPIO_INIT)
00F65B 03F65B 86 80                                   LDAA    #MODC                                   ;lock MODE register into NSC mode (INIT/GPIO_INIT)
00F65D 03F65D 5A 0B                                   STAA    MODE                                                     (INIT/GPIO_INIT)
00F65F 03F65F 5A 0B                                   STAA    MODE                                                     (INIT/GPIO_INIT)
00F661 03F661 18 0C 02 57 02 57                       MOVB    PKGCR, PKGCR                            ;lock PKGCR      (INIT/GPIO_INIT)
00F667 03F667 MACRO                                           CLOCK_INIT              ;configure clocks                (INIT)
                                      ;############################################################################### (INIT/CLOCK_INIT)
                                      ;# Macros                                                                      # (INIT/CLOCK_INIT)
                                      ;############################################################################### (INIT/CLOCK_INIT)
                                      ;#Initialization                                                                 (INIT/CLOCK_INIT)
                                      ;#--------------                                                                 (INIT/CLOCK_INIT)
00F667 03F667 18 0B FF 00 37                                  MOVB    #$FF, CPMUFLG                                   ;clear all flags (INIT/CLOCK_INIT)
00F66C 03F66C 18 03 58 00 00 34                               MOVW    #CLOCK_PLL_CONFIG, CPMUSYNR                     ;setup PLL (INIT/CLOCK_INIT)
00F672 03F672 79 00 36                                        CLR     CPMUPOSTDIV                                     ;disable POSTDIV divider (INIT/CLOCK_INIT)
                                                              ;CLR    CPMUINT                                         ;disable PLL lock interrupts (INIT/CLOCK_INIT)
                                                              ;MOVB   #LOCKIE, CPMUINT                                ;enable PLL lock interrupt (INIT/CLOCK_INIT)
                                                              ;MOVB   #PLLSEL, CPMUCLKS                               ;enable PLL (INIT/CLOCK_INIT)
                                                              ;CLR    CPMUPLL                                         ;no frequency modulation (INIT/CLOCK_INIT)
                                                              ;CLR    CPMURTI                                         ;no real time interrupt (INIT/CLOCK_INIT)
                                                              ;MOVB   #(RSBCK|CR1|CR2|CR3), CPMUCOP                   ;configure COP (INIT/CLOCK_INIT)
                                                              ;CLR    CPMULVCTL                                       ;no low-voltage interrupt (INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPICTL                                      ;no API (INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPIRH                                       ;no API (INIT/CLOCK_INIT)
                                                              ;CLR    CPMUAPIRL                                       ;no API (INIT/CLOCK_INIT)
00F675 03F675 18 0B 01 02 FB                                  MOVB    #PROT, CPMUPROT                                 ;lock CPMU configuration (INIT/CLOCK_INIT)
00F67A 03F67A MACRO                                           VECTAB_INIT             ;configure cector table          (INIT)
                                      ;############################################################################### (INIT/VECTAB_INIT)
                                      ;# Macros                                                                      # (INIT/VECTAB_INIT)
                                      ;############################################################################### (INIT/VECTAB_INIT)
                                      ;#Initialization                                                                 (INIT/VECTAB_INIT)
                                                              ;Set vector base address                                 (INIT/VECTAB_INIT)
00F67A 03F67A 18 0B 3F 01 20                                  MOVB    #(VECTAB_START>>8), IVBR                         (INIT/VECTAB_INIT)
00F67F 03F67F MACRO                                           SSTACK_INIT             ;configure subroutine stack      (INIT)
00F67F 03F67F MACRO                                           ISTACK_INIT             ;configure interrupt stack       (INIT)
                                      ;############################################################################### (INIT/ISTACK_INIT)
                                      ;# Macros                                                                      # (INIT/ISTACK_INIT)
                                      ;############################################################################### (INIT/ISTACK_INIT)
                                      ;#Initialization                                                                 (INIT/ISTACK_INIT)
                                      ;#--------------                                                                 (INIT/ISTACK_INIT)
                                                              ;Set stack pointer                                       (INIT/ISTACK_INIT)
00F67F 03F67F CF 3F 80                                        LDS     #ISTACK_BOTTOM                                   (INIT/ISTACK_INIT)
                                                              ;Enable interrupts                                       (INIT/ISTACK_INIT)
00F682 03F682 10 EF                                           CLI                                                      (INIT/ISTACK_INIT)
00F684 03F684 MACRO                                           TIM_INIT                ;configure timers                (INIT)
                                      ;############################################################################### (INIT/TIM_INIT)
                                      ;# Macros                                                                      # (INIT/TIM_INIT)
                                      ;############################################################################### (INIT/TIM_INIT)
                                      ;#Initialization                                                                 (INIT/TIM_INIT)
                                      ;#Default initialization macro                                                   (INIT/TIM_INIT)
                                                              ;TIOS                                                    (INIT/TIM_INIT)
00F684 03F684 18 0B 01 00 40                                  MOVB    #TIM_TIOS_INIT, TIOS                             (INIT/TIM_INIT)
00F689 03F689 MACRO                                           LED_INIT                ;configure LEDs                  (INIT)
00F689 03F689 MACRO                                           NVM_INIT                ;configure NVM                   (INIT)
                                      ;############################################################################### (INIT/NVM_INIT)
                                      ;# Macros                                                                      # (INIT/NVM_INIT)
                                      ;############################################################################### (INIT/NVM_INIT)
                                      ;#Initialization                                                                 (INIT/NVM_INIT)
                                                              ;Initialize the NVM wrapper                              (INIT/NVM_INIT)
00F689 03F689 18 0B 58 01 00                                  MOVB    #(FDIVLCK|NVM_FDIV_VAL), FCLKDIV;set clock divider (INIT/NVM_INIT)
00F68E 03F68E 18 0B 02 01 05                                  MOVB    #DFDIE,FERCNFG                  ;detect ECC double faults (INIT/NVM_INIT)
                                                              ;Initialize the sector status                            (INIT/NVM_INIT)
00F693 03F693 CE 1A B8                                        LDX     #NVM_TAGS                                        (INIT/NVM_INIT)
00F696 03F696 CD 00 0E                                        LDY     #(NVM_TAGS_END-NVM_TAGS)/4                       (INIT/NVM_INIT)
00F699 03F699 87                                              CLRA                                                     (INIT/NVM_INIT)
00F69A 03F69A C7                                              CLRB                                                     (INIT/NVM_INIT)
00F69B 03F69B 6C 31                   LOOP                    STD     2,X+                                             (INIT/NVM_INIT)
00F69D 03F69D 6C 31                                           STD     2,X+                                             (INIT/NVM_INIT)
00F69F 03F69F 04 36 F9                                        DBNE    Y, LOOP                                          (INIT/NVM_INIT)
                                                              ;Initialize the program buffer (0 in D)                  (INIT/NVM_INIT)
00F6A2 03F6A2 7C 1A B6                                        STD     NVM_BUF_IN                      ;reset IN:OUT    (INIT/NVM_INIT)
00F6A5 03F6A5 7C 1A 76                                        STD     NVM_ADDR_BUF                    ;set initial address (INIT/NVM_INIT)
00F6A8 03F6A8 7C 1A 78                                        STD     NVM_ADDR_BUF+2                  ;reset IN:OUT    (INIT/NVM_INIT)
00F6AB 03F6AB MACRO                                           SCI_INIT                ;configure SCI                   (INIT)
                                      ;############################################################################### (INIT/SCI_INIT)
                                      ;# Macros                                                                      # (INIT/SCI_INIT)
                                      ;############################################################################### (INIT/SCI_INIT)
                                      ;#Initialization                                                                 (INIT/SCI_INIT)
                                      ;#--------------                                                                 (INIT/SCI_INIT)
                                                              ;Setup SCI communication                                 (INIT/SCI_INIT)
00F6AB 03F6AB 18 0B 04 00 CA                                  MOVB    #SCI_FORMAT, SCICR1                     ;set frame format (INIT/SCI_INIT)
00F6B0 03F6B0 18 0B 18 00 CD                                  MOVB    #(TXPOL|RXPOL), SCISR2                  ;invert RXD/TXD polarity (INIT/SCI_INIT)
                                                              ;Initialize buffers                                      (INIT/SCI_INIT)
00F6B5 03F6B5 18 03 00 00 19 DE                               MOVW    #$0000,SCI_TXBUF_IN                     ;set TX buffer indexes (INIT/SCI_INIT)
00F6BB 03F6BB 18 03 00 00 19 D4                               MOVW    #$0000,SCI_RXBUF_IN                     ;set RX buffer indexes (INIT/SCI_INIT)
                                                              ;Initialize variables                                    (INIT/SCI_INIT)
00F6C1 03F6C1 79 19 E0                                        CLR     SCI_EXCPT                               ;clear all exception requests (INIT/SCI_INIT)
00F6C4 03F6C4 79 19 E1                                        CLR     SCI_STAT                                ;clear all flags (INIT/SCI_INIT)
                                                              ;Set baud rate divider                                   (INIT/SCI_INIT)
00F6C7 03F6C7 18 03 00 A3 00 C8                               MOVW    #SCI_BDIV, SCIBDH                                (INIT/SCI_INIT)
00F6CD 03F6CD MACRO                                           STRING_INIT             ;configure STRING                (INIT)
                                                              ;NUM_INIT               ;configure NUM                   (INIT)
00F6CD 03F6CD MACRO                                           SREC_INIT               ;initialize S-record parser      (INIT)
00F6CD 03F6CD MACRO                                           LRE_INIT                ;copy LRE code                   (INIT)
                                      ;############################################################################### (INIT/LRE_INIT)
                                      ;# Macros                                                                      # (INIT/LRE_INIT)
                                      ;############################################################################### (INIT/LRE_INIT)
                                      ;#Initialization                                                                 (INIT/LRE_INIT)
                                                              ;Copy tables and code                                    (INIT/LRE_INIT)
00F6CD 03F6CD MACRO                                           LRE_COPY        RAM_TABS_START_LIN, RAM_TABS_START, (RAM_CODE_END-RAM_TABS_START) (INIT/LRE_INIT)
                                      ;Copy loop                                                                       (INIT/LRE_INIT/LRE_COPY)
                                      ; args:   1: source address                                                      (INIT/LRE_INIT/LRE_COPY)
                                      ;         2: destination address                                                 (INIT/LRE_INIT/LRE_COPY)
                                      ;         3: min. number of bytes to copy                                        (INIT/LRE_INIT/LRE_COPY)
                                      ; result: none                                                                   (INIT/LRE_INIT/LRE_COPY)
                                      ; SSTACK: none                                                                   (INIT/LRE_INIT/LRE_COPY)
                                      ;         no registers are preserved                                             (INIT/LRE_INIT/LRE_COPY)
                                                              ;Setup                                                   (INIT/LRE_INIT/LRE_COPY)
00F6CD 03F6CD CE F0 00                                        LDX     #(RAM_TABS_START_LIN&$FFFF)     ;source address  (INIT/LRE_INIT/LRE_COPY)
00F6D0 03F6D0 CD 14 00                                        LDY     #(RAM_TABS_START&$FFFF)     ;destination address (INIT/LRE_INIT/LRE_COPY)
00F6D3 03F6D3 CC 00 B3                                        LDD     #((RAM_CODE_END-RAM_TABS_START>>3)+(((RAM_CODE_END-RAM_TABS_START>>2)&1)|((RAM_CODE_END-RAM_TABS_START>>1)&1)|(RAM_CODE_END-RAM_TABS_START&1))) (INIT/LRE_INIT/LRE_COPY)
                                                              ;Loop                                                    (INIT/LRE_INIT/LRE_COPY)
00F6D6 03F6D6 18 02 31 71             LOOP                    MOVW    2,X+, 2,Y+                                       (INIT/LRE_INIT/LRE_COPY)
00F6DA 03F6DA 18 02 31 71                                     MOVW    2,X+, 2,Y+                                       (INIT/LRE_INIT/LRE_COPY)
00F6DE 03F6DE 18 02 31 71                                     MOVW    2,X+, 2,Y+                                       (INIT/LRE_INIT/LRE_COPY)
00F6E2 03F6E2 18 02 31 71                                     MOVW    2,X+, 2,Y+                                       (INIT/LRE_INIT/LRE_COPY)
00F6E6 03F6E6 04 34 ED                                        DBNE    D, LOOP                                          (INIT/LRE_INIT/LRE_COPY)
                                                              ;Copy vector table                                       (INIT/LRE_INIT)
00F6E9 03F6E9 MACRO                                           LRE_COPY        VECTAB_START_LIN, VECTAB_START, VECTAB_SIZE (INIT/LRE_INIT)
                                      ;Copy loop                                                                       (INIT/LRE_INIT/LRE_COPY)
                                      ; args:   1: source address                                                      (INIT/LRE_INIT/LRE_COPY)
                                      ;         2: destination address                                                 (INIT/LRE_INIT/LRE_COPY)
                                      ;         3: min. number of bytes to copy                                        (INIT/LRE_INIT/LRE_COPY)
                                      ; result: none                                                                   (INIT/LRE_INIT/LRE_COPY)
                                      ; SSTACK: none                                                                   (INIT/LRE_INIT/LRE_COPY)
                                      ;         no registers are preserved                                             (INIT/LRE_INIT/LRE_COPY)
                                                              ;Setup                                                   (INIT/LRE_INIT/LRE_COPY)
00F6E9 03F6E9 CE FF 80                                        LDX     #(VECTAB_START_LIN&$FFFF)     ;source address    (INIT/LRE_INIT/LRE_COPY)
00F6EC 03F6EC CD 3F 80                                        LDY     #(VECTAB_START&$FFFF)     ;destination address   (INIT/LRE_INIT/LRE_COPY)
00F6EF 03F6EF CC 00 10                                        LDD     #((VECTAB_SIZE>>3)+(((VECTAB_SIZE>>2)&1)|((VECTAB_SIZE>>1)&1)|(VECTAB_SIZE&1))) (INIT/LRE_INIT/LRE_COPY)
                                                              ;Loop                                                    (INIT/LRE_INIT/LRE_COPY)
00F6F2 03F6F2 18 02 31 71             LOOP                    MOVW    2,X+, 2,Y+                                       (INIT/LRE_INIT/LRE_COPY)
00F6F6 03F6F6 18 02 31 71                                     MOVW    2,X+, 2,Y+                                       (INIT/LRE_INIT/LRE_COPY)
00F6FA 03F6FA 18 02 31 71                                     MOVW    2,X+, 2,Y+                                       (INIT/LRE_INIT/LRE_COPY)
00F6FE 03F6FE 18 02 31 71                                     MOVW    2,X+, 2,Y+                                       (INIT/LRE_INIT/LRE_COPY)
00F702 03F702 04 34 ED                                        DBNE    D, LOOP                                          (INIT/LRE_INIT/LRE_COPY)
                                                              ;Set vector base address                                 (INIT/LRE_INIT)
00F705 03F705 18 0B 3F 01 20                                  MOVB    #(VECTAB_START>>8), IVBR                         (INIT/LRE_INIT)
00F70A 03F70A MACRO                                           CLOCK_WAIT_FOR_PLL      ;wait for PLL to lock            (INIT)
                                      ;#Wait for PLL                                                                   (INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#------------                                                                   (INIT/CLOCK_WAIT_FOR_PLL)
00F70A 03F70A 14 10                   LOOP            SEI                                                              (INIT/CLOCK_WAIT_FOR_PLL)
00F70C 03F70C 4E 39 80 05                             BRSET   CPMUCLKS, #PLLSEL, DONE                         ;PLL is locked (INIT/CLOCK_WAIT_FOR_PLL)
00F710 03F710 MACRO                                   ISTACK_WAIT                                                      (INIT/CLOCK_WAIT_FOR_PLL)
                                      ;#Wait until any interrupt has been serviced                                     (INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; args:   none                                                                   (INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00F710 03F710 10 EF                                           CLI                                                      (INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00F712 03F712 3E                                              WAI                                                      (INIT/CLOCK_WAIT_FOR_PLL/ISTACK_WAIT)
00F713 03F713 20 F5                                   JOB     LOOP                                                     (INIT/CLOCK_WAIT_FOR_PLL)
00F715 03F715 10 EF                   DONE            CLI                                                              (INIT/CLOCK_WAIT_FOR_PLL)
00F717 03F717 MACRO                                           SCI_ACTIVATE            ;activate SCI                    (INIT)
                                      ;#Activate SCI hardware                                                          (INIT/SCI_ACTIVATE)
                                      ; args:   none                                                                   (INIT/SCI_ACTIVATE)
                                      ; result: none                                                                   (INIT/SCI_ACTIVATE)
                                      ; SSTACK: none                                                                   (INIT/SCI_ACTIVATE)
                                      ;         No registers are preserved                                             (INIT/SCI_ACTIVATE)
                                                              ;Activate SCI                                            (INIT/SCI_ACTIVATE)
00F717 03F717 18 0B 2C 00 CB                                  MOVB    #(RIE|TE|RE), SCICR2                    ;start SCI (INIT/SCI_ACTIVATE)
                                                              ;Done                                                    (INIT/SCI_ACTIVATE)
00F71C 03F71C -> $F71C                SCI_ACTIVATE_1          EQU     *                                       ;done    (INIT/SCI_ACTIVATE)
00F71C 03F71C MACRO                                           IMG_INIT                ;configure display content       (INIT)
00F71C 03F71C MACRO                                           DISP_INIT               ;configure display               (INIT)
                                      ;############################################################################### (INIT/DISP_INIT)
                                      ;# Macros                                                                      # (INIT/DISP_INIT)
                                      ;############################################################################### (INIT/DISP_INIT)
                                      ;#Initialization                                                                 (INIT/DISP_INIT)
                                                              ;Deassert display reset                                  (INIT/DISP_INIT)
                                                              ;BSET   DISP_RESET_PORT, #DISP_RESET_PIN                 (INIT/DISP_INIT)
                                                              ;BCLR   DISP_A0_PIN,     #DISP_A0_PORT                   (INIT/DISP_INIT)
00F71C 03F71C 18 0B 08 02 48                                  MOVB    #DISP_RESET_PIN, DISP_RESET_PORT ;shortcut       (INIT/DISP_INIT)
                                                              ;Initialize Variables                                    (INIT/DISP_INIT)
00F721 03F721 18 03 00 00 19 F2                               MOVW    #$0000, DISP_BUF_IN                              (INIT/DISP_INIT)
00F727 03F727 79 19 F4                                        CLR     DISP_RPTCNT                                      (INIT/DISP_INIT)
                                                              ;Initialize SPI                                          (INIT/DISP_INIT)
00F72A 03F72A 18 03 1E 19 00 D8                               MOVW    #((DISP_SPICR1_CONFIG<<8)|DISP_SPICR2_CONFIG), SPICR1 (INIT/DISP_INIT)
00F730 03F730 18 0B 00 00 DA                                  MOVB    #DISP_SPIBR_CONFIG, SPIBR                        (INIT/DISP_INIT)
00F735 03F735 F7 00 DB                                        TST     SPISR                                           ;read SPISR (INIT/DISP_INIT)
00F738 03F738 F7 00 DD                                        TST     SPIDRL                                          ;clear SPIF flag (INIT/DISP_INIT)
                                                              ;Setup display                                           (INIT/DISP_INIT)
00F73B 03F73B CE F9 4B                                        LDX     #DISP_SEQ_INIT_START                             (INIT/DISP_INIT)
00F73E 03F73E CC FC 27                                        LDD     #DISP_SEQ_INIT_END                               (INIT/DISP_INIT)
00F741 03F741 MACRO                                           DISP_STREAM_BL                                           (INIT/DISP_INIT)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (INIT/DISP_INIT/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;         D: pointer to the end of the sequence                                  (INIT/DISP_INIT/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (INIT/DISP_INIT/DISP_STREAM_BL)
                                      ; SSTACK: 11 bytes                                                               (INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;         Y and D are preserved                                                  (INIT/DISP_INIT/DISP_STREAM_BL)
00F741 03F741 MACRO                                           SSTACK_JOBSR    DISP_STREAM_BL, 11                       (INIT/DISP_INIT/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
00F741 03F741 16 F7 FE                                        JOBSR   DISP_STREAM_BL                                   (INIT/DISP_INIT/DISP_STREAM_BL/SSTACK_JOBSR)
                                                              ;Indicate readyness
00F744 03F744 -> $F744                BOOTLOADER_SHOW_READY   EQU     *
                                                              ;Set LEDs
                                                              ;LED_OFF A                              ;not busy anymore
                                                              ;LED_OFF B                              ;no error
                                                              ;Print ready message
00F744 03F744 CE F9 1F                                        LDX     #BOOTLOADER_MSG_READY           ;message pointer -> X
00F747 03F747 MACRO                                           STRING_PRINT_BL                         ;print message
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
00F747 03F747 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
00F747 03F747 16 15 EA                                        JOBSR   STRING_PRINT_BL                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                                              ;Wait for transmission
00F74A 03F74A MACRO                                           SCI_RX_READY_BL
                                      ;#Wait until there is data in the RX queue                                       (SCI_RX_READY_BL)
                                      ; args:   none                                                                   (SCI_RX_READY_BL)
                                      ; result: none                                                                   (SCI_RX_READY_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_RX_READY_BL)
                                      ;         X, Y and B are preserved                                               (SCI_RX_READY_BL)
00F74A 03F74A MACRO                                           SSTACK_JOBSR    SCI_RX_READY_BL, 7                       (SCI_RX_READY_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_READY_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_READY_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_READY_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_READY_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_READY_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_READY_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_READY_BL/SSTACK_JOBSR)
00F74A 03F74A 16 14 D4                                        JOBSR   SCI_RX_READY_BL                                  (SCI_RX_READY_BL/SSTACK_JOBSR)
                                                              ;Indicate ongoing firmware transmission
00F74D 03F74D -> $F74D                BOOTLOADER_SHOW_BUSY    EQU     *
                                                              ;Set LEDs
                                                              ;LED_OFF A                              ;not busy anymore
                                                              ;LED_OFF B                              ;no error
                                                              ;Update display
00F74D 03F74D MACRO                                           DISP_STREAM_FROM_TO_BL  IMG_SEQ_BUSY_START, IMG_SEQ_BUSY_END
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 11 bytes                                                               (DISP_STREAM_FROM_TO_BL)
                                      ;         Y is preserved                                                         (DISP_STREAM_FROM_TO_BL)
00F74D 03F74D CE FC 27                                        LDX     #IMG_SEQ_BUSY_START                              (DISP_STREAM_FROM_TO_BL)
00F750 03F750 CC FC 8D                                        LDD     #IMG_SEQ_BUSY_END                                (DISP_STREAM_FROM_TO_BL)
00F753 03F753 MACRO                                           DISP_STREAM_BL                                           (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D: pointer to the end of the sequence                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 11 bytes                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y and D are preserved                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
00F753 03F753 MACRO                                           SSTACK_JOBSR    DISP_STREAM_BL, 11                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00F753 03F753 16 F7 FE                                        JOBSR   DISP_STREAM_BL                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                                              ;Execute from RAM
00F756 03F756 06 14 0F                                        JMP     START_OF_RAM_CODE               ;run LRE code
                                                              ;Check for errors (error code in A)
00F759 03F759 CD F8 8E                BOOTLOADER_DONE         LDY     #(BOOTLOADER_ERR_TAB-2)         ;initialize table pointer
00F75C 03F75C 19 42                   BOOTLOADER_DONE_1       LEAY    2,Y                             ;advance table pointer
00F75E 03F75E 48                                              LSLA                                    ;check next errr bit
00F75F 03F75F 25 19                                           BCS     BOOTLOADER_DONE_3               ;cause found
00F761 03F761 26 F9                                           BNE     BOOTLOADER_DONE_1               ;check next bit
                                                              ;Indicate successful firmware update
                                                              ;Set LEDs
00F763 03F763 MACRO                                           LED_OFF A                               ;not busy anymore
                                      ;#Turn off non-blinking LED                                                      (LED_OFF)
                                      ; args:   1: LED index (A..D)                                                    (LED_OFF)
                                      ; result: none                                                                   (LED_OFF)
                                      ; SSTACK: none                                                                   (LED_OFF)
                                      ;         X, Y and D are preserved                                               (LED_OFF)
00F763 03F763 4C 08 01                                        BSET    LED_A_PORT, #LED_A_PIN        ;set port pin      (LED_OFF)
                                                              ;LED_OFF B                              ;no error
                                                              ;Print message
00F766 03F766 CE F9 3B                                        LDX     #BOOTLOADER_MSG_DONE            ;message pointer -> X
00F769 03F769 MACRO                                           STRING_PRINT_BL                         ;print message
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
00F769 03F769 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
00F769 03F769 16 15 EA                                        JOBSR   STRING_PRINT_BL                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                                              ;Update display
00F76C 03F76C MACRO                                           DISP_STREAM_FROM_TO_BL  IMG_SEQ_DONE_START, IMG_SEQ_DONE_END
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 11 bytes                                                               (DISP_STREAM_FROM_TO_BL)
                                      ;         Y is preserved                                                         (DISP_STREAM_FROM_TO_BL)
00F76C 03F76C CE FC 8D                                        LDX     #IMG_SEQ_DONE_START                              (DISP_STREAM_FROM_TO_BL)
00F76F 03F76F CC FC F5                                        LDD     #IMG_SEQ_DONE_END                                (DISP_STREAM_FROM_TO_BL)
00F772 03F772 MACRO                                           DISP_STREAM_BL                                           (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D: pointer to the end of the sequence                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 11 bytes                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y and D are preserved                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
00F772 03F772 MACRO                                           SSTACK_JOBSR    DISP_STREAM_BL, 11                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00F772 03F772 16 F7 FE                                        JOBSR   DISP_STREAM_BL                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                                              ;Read loop
00F775 03F775 MACRO                   BOOTLOADER_DONE_2       SCI_RX_BL                               ;ignore incoming data
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
00F775 03F775 MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
00F775 03F775 16 14 B5                                        JOBSR   SCI_RX_BL                                        (SCI_RX_BL/SSTACK_JOBSR)
00F778 03F778 20 FB                                           JOB     BOOTLOADER_DONE_2
                                                              ;Indicate failed firmware update (error message in Y)
00F77A 03F77A MACRO                   BOOTLOADER_DONE_3       NVM_STOP                                ;stop the NVM
                                      ;#Stop NVM activity                                                              (NVM_STOP)
                                      ; args:   none                                                                   (NVM_STOP)
                                      ; result: none                                                                   (NVM_STOP)
                                      ; SSTACK:  0 bytes                                                               (NVM_STOP)
                                      ;         All registers are preserved                                            (NVM_STOP)
00F77A 03F77A 1D 01 06 80                                     BCLR    FSTAT,#CCIF                                      (NVM_STOP)
00F77E 03F77E 18 0C 1A B7 1A B6                               MOVB    NVM_BUF_OUT, NVM_BUF_IN                          (NVM_STOP)
00F784 03F784 CE F9 42                                        LDX     #BOOTLOADER_MSG_ERROR           ;message pointer -> X
00F787 03F787 MACRO                                           STRING_PRINT_BL                         ;print message
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
00F787 03F787 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
00F787 03F787 16 15 EA                                        JOBSR   STRING_PRINT_BL                                  (STRING_PRINT_BL/SSTACK_JOBSR)
00F78A 03F78A EE 40                                           LDX     0,Y                             ;message pointer -> X
00F78C 03F78C MACRO                                           STRING_PRINT_BL                         ;print message
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
00F78C 03F78C MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
00F78C 03F78C 16 15 EA                                        JOBSR   STRING_PRINT_BL                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                                              ;Set LEDs
00F78F 03F78F MACRO                                           LED_OFF A                               ;not busy anymore
                                      ;#Turn off non-blinking LED                                                      (LED_OFF)
                                      ; args:   1: LED index (A..D)                                                    (LED_OFF)
                                      ; result: none                                                                   (LED_OFF)
                                      ; SSTACK: none                                                                   (LED_OFF)
                                      ;         X, Y and D are preserved                                               (LED_OFF)
00F78F 03F78F 4C 08 01                                        BSET    LED_A_PORT, #LED_A_PIN        ;set port pin      (LED_OFF)
00F792 03F792 MACRO                                           LED_ON  B                               ;flag error
                                      ;#User functions                                                                 (LED_ON)
                                      ;#--------------                                                                 (LED_ON)
                                      ;#Turn on non-blinking LED                                                       (LED_ON)
                                      ; args:   1: LED index (A..D)                                                    (LED_ON)
                                      ; result: none                                                                   (LED_ON)
                                      ; SSTACK: none                                                                   (LED_ON)
                                      ;         X,Y and D are preserved                                                (LED_ON)
00F792 03F792 4D 08 02                                        BCLR    LED_B_PORT, #LED_B_PIN        ;clear port pin    (LED_ON)
                                                              ;Update display
00F795 03F795 MACRO                                           DISP_STREAM_FROM_TO_BL  IMG_SEQ_ERROR_START, IMG_SEQ_ERROR_END
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL)
                                      ; args:   1: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ;         2: pointer past the end of the sequence                                (DISP_STREAM_FROM_TO_BL)
                                      ; result: none                                                                   (DISP_STREAM_FROM_TO_BL)
                                      ; SSTACK: 11 bytes                                                               (DISP_STREAM_FROM_TO_BL)
                                      ;         Y is preserved                                                         (DISP_STREAM_FROM_TO_BL)
00F795 03F795 CE FC F5                                        LDX     #IMG_SEQ_ERROR_START                             (DISP_STREAM_FROM_TO_BL)
00F798 03F798 CC FD 57                                        LDD     #IMG_SEQ_ERROR_END                               (DISP_STREAM_FROM_TO_BL)
00F79B 03F79B MACRO                                           DISP_STREAM_BL                                           (DISP_STREAM_FROM_TO_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; args:   X: pointer to the start of the sequence                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         D: pointer to the end of the sequence                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; result: X: points to the byte after the sequence                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ; SSTACK: 11 bytes                                                               (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;         Y and D are preserved                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
00F79B 03F79B MACRO                                           SSTACK_JOBSR    DISP_STREAM_BL, 11                       (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL)
                                      ;#Check stack and call subroutine                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00F79B 03F79B 07 61                                           JOBSR   DISP_STREAM_BL                                   (DISP_STREAM_FROM_TO_BL/DISP_STREAM_BL/SSTACK_JOBSR)
00F79D 03F79D 20 D6                                           JOB     BOOTLOADER_DONE_2
                                                              ;Unexpected interrupt request
00F79F 03F79F 86 01                   BOOTLOADER_ISR_ERROR    LDAA    #BOOTLOADER_ERR_UNKNOWN                 ;unknown error -> A
00F7A1 03F7A1 1B 89                                           LEAS    9,SP                                    ;free stack space
00F7A3 03F7A3 10 EF                                           CLI                                             ;enable interrupts
00F7A5 03F7A5 20 B2                                           JOB     BOOTLOADER_DONE                         ;handle errors
00F7A7 03F7A7 -> $F7A7                MMAP_CODE_START         EQU     *
00F7A7 03F7A7 -> $3F7A7               MMAP_CODE_START_LIN     EQU     @
00F7A7 03F7A7                                                 ORG     MMAP_CODE_END, MMAP_CODE_END_LIN
00F7A7 03F7A7 -> $F7A7                GPIO_CODE_START         EQU     *
00F7A7 03F7A7 -> $3F7A7               GPIO_CODE_START_LIN     EQU     @
00F7A7 03F7A7                                                 ORG     GPIO_CODE_END, GPIO_CODE_END_LIN
00F7A7 03F7A7 -> $F7A7                RESET_CODE_START        EQU     *
00F7A7 03F7A7 -> $3F7A7               RESET_CODE_START_LIN    EQU     @
00F7B9 03F7B9                                                 ORG     RESET_CODE_END, RESET_CODE_END_LIN
00F7B9 03F7B9 -> $F7B9                CLOCK_CODE_START        EQU     *
00F7B9 03F7B9 -> $3F7B9               CLOCK_CODE_START_LIN    EQU     @
00F7B9 03F7B9                                                 ORG     CLOCK_CODE_END, CLOCK_CODE_END_LIN
00F7B9 03F7B9 -> $F7B9                LRE_CODE_START          EQU     *
00F7B9 03F7B9 -> $3F7B9               LRE_CODE_START_LIN      EQU     @
00F7B9 03F7B9                                                 ORG     LRE_CODE_END, LRE_CODE_END_LIN
00F7B9 03F7B9 -> $F7B9                TIM_CODE_START          EQU     *
00F7B9 03F7B9 -> $3F7B9               TIM_CODE_START_LIN      EQU     @
00F7B9 03F7B9                                                 ORG     TIM_CODE_END, TIM_CODE_END_LIN
00F7B9 03F7B9 -> $F7B9                DISP_CODE_START         EQU     *
00F7B9 03F7B9 -> $3F7B9               DISP_CODE_START_LIN     EQU     @
00F890 03F890                                                 ORG     DISP_CODE_END, DISP_CODE_END_LIN
00F890 03F890 -> $F890                LED_CODE_START          EQU     *
00F890 03F890 -> $3F890               LED_CODE_START_LIN      EQU     @
00F890 03F890                                                 ORG     LED_CODE_END, LED_CODE_END_LIN
00F890 03F890 -> $F890                IMG_CODE_START          EQU     *
00F890 03F890 -> $3F890               IMG_CODE_START_LIN      EQU     @
00F890 03F890                                                 ORG     IMG_CODE_END, IMG_CODE_END_LIN
00F890 03F890 -> $F890                CODE_END                EQU     *
00F890 03F890 -> $3F890               CODE_END_LIN            EQU     @
                                      ;###############################################################################
                                      ;# RAM code space                                                              #
                                      ;###############################################################################
00140F 03F00F                                                 ORG     RAM_CODE_START, RAM_CODE_START_LIN
00140F 03F00F -> $140F                START_OF_RAM_CODE       EQU     *
                                                              ;Parse incoming S-records
00140F 03F00F MACRO                                           SREC_PARSE_SREC
                                      ;#Parse S-Records - blocking                                                     (SREC_PARSE_SREC)
                                      ; args:   none                                                                   (SREC_PARSE_SREC)
                                      ; result: A:      error code                                                     (SREC_PARSE_SREC)
                                      ; SSTACK: 21 bytes                                                               (SREC_PARSE_SREC)
                                      ;         B, X and Y are preserved                                               (SREC_PARSE_SREC)
00140F 03F00F MACRO                                           SSTACK_JOBSR    SREC_PARSE_SREC, 21                      (SREC_PARSE_SREC)
                                      ;#Check stack and call subroutine                                                (SREC_PARSE_SREC/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_PARSE_SREC/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_PARSE_SREC/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_PARSE_SREC/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_PARSE_SREC/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_PARSE_SREC/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_PARSE_SREC/SSTACK_JOBSR)
00140F 03F00F 16 17 97                                        JOBSR   SREC_PARSE_SREC                                  (SREC_PARSE_SREC/SSTACK_JOBSR)
                                                              ;Wait for NVM (error code in A)
001412 03F012 MACRO                                           NVM_WAIT_IDLE                           ;wait for FTMRG to become idle
                                      ;#Wait until the FTMRG wrapper is idle                                           (NVM_WAIT_IDLE)
                                      ; args:   none                                                                   (NVM_WAIT_IDLE)
                                      ; result: none                                                                   (NVM_WAIT_IDLE)
                                      ; SSTACK:  0 bytes                                                               (NVM_WAIT_IDLE)
                                      ;         All registers are preserved                                            (NVM_WAIT_IDLE)
001412 03F012 1F 01 06 80 FB                                  BRCLR   FSTAT,#CCIF,*                                    (NVM_WAIT_IDLE)
001417 03F017 06 F7 59                                        JOB     BOOTLOADER_DONE                 ;show result
00141A 03F01A -> $141A                VECTAB_CODE_START       EQU     *
00141A 03F01A -> $3F01A               VECTAB_CODE_START_LIN   EQU     @
00141A 03F01A                                                 ORG     VECTAB_CODE_END, VECTAB_CODE_END_LIN
00141A 03F01A -> $141A                SSTACK_CODE_START       EQU     *
00141A 03F01A -> $3F01A               SSTACK_CODE_START_LIN   EQU     @
00141A 03F01A                                                 ORG     SSTACK_CODE_END, SSTACK_CODE_END_LIN
00141A 03F01A -> $141A                ISTACK_CODE_START       EQU     *
00141A 03F01A -> $3F01A               ISTACK_CODE_START_LIN   EQU     @
00141A 03F01A                                                 ORG     ISTACK_CODE_END, ISTACK_CODE_END_LIN
00141A 03F01A -> $141A                SCI_CODE_START          EQU     *
00141A 03F01A -> $3F01A               SCI_CODE_START_LIN      EQU     @
0015D0 03F1D0                                                 ORG     SCI_CODE_END, SCI_CODE_END_LIN
0015D0 03F1D0 -> $15D0                STRING_CODE_START       EQU     *
0015D0 03F1D0 -> $3F1D0               STRING_CODE_START_LIN   EQU     @
001603 03F203                                                 ORG     STRING_CODE_END, STRING_CODE_END_LIN
001603 03F203 -> $1603                NVM_CODE_START          EQU     *
001603 03F203 -> $3F203               NVM_CODE_START_LIN      EQU     @
001797 03F397                                                 ORG     NVM_CODE_END, NVM_CODE_END_LIN
001797 03F397 -> $1797                SREC_CODE_START         EQU     *
001797 03F397 -> $3F397               SREC_CODE_START_LIN     EQU     @
001994 03F594                                                 ORG     SREC_CODE_END, SREC_CODE_END_LIN
001994 03F594 -> $1994                RAM_CODE_END            EQU     *
001994 03F594 -> $3F594               RAM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Table space                                                                 #
                                      ;###############################################################################
00F890 03F890                                                 ORG     TABS_START, TABS_START_LIN
00F890 03F890 F8 A0                   BOOTLOADER_ERR_TAB      DW      BOOTLOADER_MSG_RX
00F892 03F892 F8 B5                                           DW      BOOTLOADER_MSG_FORMAT
00F894 03F894 F8 CB                                           DW      BOOTLOADER_MSG_CHECKSUM
00F896 03F896 F8 DE                                           DW      BOOTLOADER_MSG_COUNT
00F898 03F898 F8 F3                                           DW      BOOTLOADER_MSG_ADDR
00F89A 03F89A F9 01                                           DW      BOOTLOADER_MSG_HW
00F89C 03F89C F9 11                                           DW      BOOTLOADER_MSG_UNKNOWN
00F89E 03F89E F9 11                                           DW      BOOTLOADER_MSG_UNKNOWN
00F8A0 03F8A0 42 72 6F 6B 65 6E 20 64 BOOTLOADER_MSG_RX       FCS     "Broken data transfer!"
              61 74 61 20 74 72 61 6E 
              73 66 65 72 A1          
00F8B5 03F8B5 57 72 6F 6E 67 20 53 2D BOOTLOADER_MSG_FORMAT   FCS     "Wrong S-record format!"
              72 65 63 6F 72 64 20 66 
              6F 72 6D 61 74 A1       
00F8CB 03F8CB 49 6E 63 6F 72 72 65 63 BOOTLOADER_MSG_CHECKSUM FCS     "Incorrect checksum!"
              74 20 63 68 65 63 6B 73 
              75 6D A1                
00F8DE 03F8DE 57 72 6F 6E 67 20 53 2D BOOTLOADER_MSG_COUNT    FCS     "Wrong S-record count!"
              72 65 63 6F 72 64 20 63 
              6F 75 6E 74 A1          
00F8F3 03F8F3 57 72 6F 6E 67 20 61 64 BOOTLOADER_MSG_ADDR     FCS     "Wrong address!"
              64 72 65 73 73 A1       
00F901 03F901 48 61 72 64 77 61 72 65 BOOTLOADER_MSG_HW       FCS     "Hardware failur!"
              20 66 61 69 6C 75 72 A1 
00F911 03F911 55 6E 6B 6E 6F 77 6E 20 BOOTLOADER_MSG_UNKNOWN  FCS     "Unknown cause!"
              63 61 75 73 65 A1       
00F91F 03F91F MACRO                   BOOTLOADER_MSG_READY    STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00F91F 03F91F 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_NONTERM)
00F920 03F920 0A                                              DB      STRING_NL_2ND                                    (STRING_NL_NONTERM)
00F921 03F921 52 65 61 64 79 20 74 6F                         FCS     "Ready to receive S-record!"
              20 72 65 63 65 69 76 65 
              20 53 2D 72 65 63 6F 72 
              64 A1                   
00F93B 03F93B MACRO                   BOOTLOADER_MSG_DONE     STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00F93B 03F93B 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_NONTERM)
00F93C 03F93C 0A                                              DB      STRING_NL_2ND                                    (STRING_NL_NONTERM)
00F93D 03F93D 44 6F 6E 65 A1                                  FCS     "Done!"
00F942 03F942 MACRO                   BOOTLOADER_MSG_ERROR    STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
00F942 03F942 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_NONTERM)
00F943 03F943 0A                                              DB      STRING_NL_2ND                                    (STRING_NL_NONTERM)
00F944 03F944 45 72 72 6F 72 21 A0                            FCS     "Error! "
00F94B 03F94B -> $F94B                MMAP_TABS_START         EQU     *
00F94B 03F94B -> $3F94B               MMAP_TABS_START_LIN     EQU     @
00F94B 03F94B                                                 ORG     MMAP_TABS_END, MMAP_TABS_END_LIN
00F94B 03F94B -> $F94B                GPIO_TABS_START         EQU     *
00F94B 03F94B -> $3F94B               GPIO_TABS_START_LIN     EQU     @
00F94B 03F94B                                                 ORG     GPIO_TABS_END, GPIO_TABS_END_LIN
00F94B 03F94B -> $F94B                RESET_TABS_START        EQU     *
00F94B 03F94B -> $3F94B               RESET_TABS_START_LIN    EQU     @
00F94B 03F94B                                                 ORG     RESET_TABS_END, RESET_TABS_END_LIN
00F94B 03F94B -> $F94B                CLOCK_TABS_START        EQU     *
00F94B 03F94B -> $3F94B               CLOCK_TABS_START_LIN    EQU     @
00F94B 03F94B                                                 ORG     CLOCK_TABS_END, CLOCK_TABS_END_LIN
00F94B 03F94B -> $F94B                LRE_TABS_START          EQU     *
00F94B 03F94B -> $3F94B               LRE_TABS_START_LIN      EQU     @
00F94B 03F94B                                                 ORG     LRE_TABS_END, LRE_TABS_END_LIN
00F94B 03F94B -> $F94B                TIM_TABS_START          EQU     *
00F94B 03F94B -> $3F94B               TIM_TABS_START_LIN      EQU     @
00F94B 03F94B                                                 ORG     TIM_TABS_END, TIM_TABS_END_LIN
00F94B 03F94B -> $F94B                DISP_TABS_START         EQU     *
00F94B 03F94B -> $3F94B               DISP_TABS_START_LIN     EQU     @
00F94B 03F94B                                                 ORG     DISP_TABS_END, DISP_TABS_END_LIN
00F94B 03F94B -> $F94B                LED_TABS_START          EQU     *
00F94B 03F94B -> $3F94B               LED_TABS_START_LIN      EQU     @
00F94B 03F94B                                                 ORG     LED_TABS_END, LED_TABS_END_LIN
00F94B 03F94B -> $F94B                IMG_TABS_START          EQU     *
00F94B 03F94B -> $3F94B               IMG_TABS_START_LIN      EQU     @
00FD57 03FD57                                                 ORG     IMG_TABS_END, IMG_TABS_END_LIN
00FD57 03FD57 -> $FD57                TABS_END                EQU     *
00FD57 03FD57 -> $3FD57               TABS_END_LIN            EQU     @
                                      ;###############################################################################
                                      ;# RAM table space                                                             #
                                      ;###############################################################################
001400 03F000                                                 ORG     RAM_TABS_START, RAM_TABS_START_LIN
001400 03F000 -> $1400                VECTAB_TABS_START       EQU     *
001400 03F000 -> $3F000               VECTAB_TABS_START_LIN   EQU     @
001400 03F000                                                 ORG     VECTAB_TABS_END, VECTAB_TABS_END_LIN
001400 03F000 -> $1400                SSTACK_TABS_START       EQU     *
001400 03F000 -> $3F000               SSTACK_TABS_START_LIN   EQU     @
001400 03F000                                                 ORG     SSTACK_TABS_END, SSTACK_TABS_END_LIN
001400 03F000 -> $1400                ISTACK_TABS_START       EQU     *
001400 03F000 -> $3F000               ISTACK_TABS_START_LIN   EQU     @
001400 03F000                                                 ORG     ISTACK_TABS_END, ISTACK_TABS_END_LIN
001400 03F000 -> $1400                SCI_TABS_START          EQU     *
001400 03F000 -> $3F000               SCI_TABS_START_LIN      EQU     @
001400 03F000                                                 ORG     SCI_TABS_END, SCI_TABS_END_LIN
001400 03F000 -> $1400                STRING_TABS_START       EQU     *
001400 03F000 -> $3F000               STRING_TABS_START_LIN   EQU     @
001402 03F002                                                 ORG     STRING_TABS_END, STRING_TABS_END_LIN
001402 03F002 -> $1402                NVM_TABS_START          EQU     *
001402 03F002 -> $3F002               NVM_TABS_START_LIN      EQU     @
001402 03F002                                                 ORG     NVM_TABS_END, NVM_TABS_END_LIN
001402 03F002 -> $1402                SREC_TABS_START         EQU     *
001402 03F002 -> $3F002               SREC_TABS_START_LIN     EQU     @
00140F 03F00F                                                 ORG     SREC_TABS_END, SREC_TABS_END_LIN
00140F 03F00F -> $140F                RAM_TABS_END            EQU     *
00140F 03F00F -> $3F00F               RAM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# S12CBase - REGDEF - Register Definitions (S12G-Micro-EVB)                   #
                                      ;###############################################################################
                                      ;#    Copyright 2010-2016 Dirk Heisswolf                                       #
                                      ;#    This file is part of the S12CBase framework for NXP's S12C MCU family.   #
                                      ;#                                                                             #
                                      ;#    S12CBase is free software: you can redistribute it and/or modify         #
                                      ;#    it under the terms of the GNU General Public License as published by     #
                                      ;#    the Free Software Foundation, either version 3 of the License, or        #
                                      ;#    (at your option) any later version.                                      #
                                      ;#                                                                             #
                                      ;#    S12CBase is distributed in the hope that it will be useful,              #
                                      ;#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
                                      ;#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
                                      ;#    GNU General Public License for more details.                             #
                                      ;#                                                                             #
                                      ;#    You should have received a copy of the GNU General Public License        #
                                      ;#    along with S12CBase.  If not, see <http://www.gnu.org/licenses/>.        #
                                      ;###############################################################################
                                      ;# Description:                                                                #
                                      ;#    This module defines the register map of the S12G-family.                 #
                                      ;###############################################################################
                                      ;# Required Modules:                                                           #
                                      ;#    - none                                                                   #
                                      ;#                                                                             #
                                      ;# Requirements to Software Using this Module:                                 #
                                      ;#    - none                                                                   #
                                      ;###############################################################################
                                      ;# Version History:                                                            #
                                      ;#    Apr 1, 2010                                                              #
                                      ;#      - Initial release                                                      #
                                      ;###############################################################################
                                      ;#############################
                                      ;# S12G Register Definitions #
                                      ;#############################
00140F 03F00F -> $0000                PORTA           EQU     $0000
00140F 03F00F -> $0080                PTA7            EQU     $80
00140F 03F00F -> $0040                PTA6            EQU     $40
00140F 03F00F -> $0020                PTA5            EQU     $20
00140F 03F00F -> $0010                PTA4            EQU     $10
00140F 03F00F -> $0008                PTA3            EQU     $08
00140F 03F00F -> $0004                PTA2            EQU     $04
00140F 03F00F -> $0002                PTA1            EQU     $02
00140F 03F00F -> $0001                PTA0            EQU     $01
00140F 03F00F -> $0080                PA7             EQU     $80
00140F 03F00F -> $0040                PA6             EQU     $40
00140F 03F00F -> $0020                PA5             EQU     $20
00140F 03F00F -> $0010                PA4             EQU     $10
00140F 03F00F -> $0008                PA3             EQU     $08
00140F 03F00F -> $0004                PA2             EQU     $04
00140F 03F00F -> $0002                PA1             EQU     $02
00140F 03F00F -> $0001                PA0             EQU     $01
00140F 03F00F -> $0001                PORTB           EQU     $0001
00140F 03F00F -> $0080                PTB7            EQU     $80
00140F 03F00F -> $0040                PTB6            EQU     $40
00140F 03F00F -> $0020                PTB5            EQU     $20
00140F 03F00F -> $0010                PTB4            EQU     $10
00140F 03F00F -> $0008                PTB3            EQU     $08
00140F 03F00F -> $0004                PTB2            EQU     $04
00140F 03F00F -> $0002                PTB1            EQU     $02
00140F 03F00F -> $0001                PTB0            EQU     $01
00140F 03F00F -> $0080                PB7             EQU     $80
00140F 03F00F -> $0040                PB6             EQU     $40
00140F 03F00F -> $0020                PB5             EQU     $20
00140F 03F00F -> $0010                PB4             EQU     $10
00140F 03F00F -> $0008                PB3             EQU     $08
00140F 03F00F -> $0004                PB2             EQU     $04
00140F 03F00F -> $0002                PB1             EQU     $02
00140F 03F00F -> $0001                PB0             EQU     $01
00140F 03F00F -> $0002                DDRA            EQU     $0002
00140F 03F00F -> $0080                DDRA7           EQU     $80
00140F 03F00F -> $0040                DDRA6           EQU     $40
00140F 03F00F -> $0020                DDRA5           EQU     $20
00140F 03F00F -> $0010                DDRA4           EQU     $10
00140F 03F00F -> $0008                DDRA3           EQU     $08
00140F 03F00F -> $0004                DDRA2           EQU     $04
00140F 03F00F -> $0002                DDRA1           EQU     $02
00140F 03F00F -> $0001                DDRA0           EQU     $01
00140F 03F00F -> $0003                DDRB            EQU     $0003
00140F 03F00F -> $0080                DDRB7           EQU     $80
00140F 03F00F -> $0040                DDRB6           EQU     $40
00140F 03F00F -> $0020                DDRB5           EQU     $20
00140F 03F00F -> $0010                DDRB4           EQU     $10
00140F 03F00F -> $0008                DDRB3           EQU     $08
00140F 03F00F -> $0004                DDRB2           EQU     $04
00140F 03F00F -> $0002                DDRB1           EQU     $02
00140F 03F00F -> $0001                DDRB0           EQU     $01
00140F 03F00F -> $0004                PORTC           EQU     $0004
00140F 03F00F -> $0080                PTC7            EQU     $80
00140F 03F00F -> $0040                PTC6            EQU     $40
00140F 03F00F -> $0020                PTC5            EQU     $20
00140F 03F00F -> $0010                PTC4            EQU     $10
00140F 03F00F -> $0008                PTC3            EQU     $08
00140F 03F00F -> $0004                PTC2            EQU     $04
00140F 03F00F -> $0002                PTC1            EQU     $02
00140F 03F00F -> $0001                PTC0            EQU     $01
00140F 03F00F -> $0080                PC7             EQU     $80
00140F 03F00F -> $0040                PC6             EQU     $40
00140F 03F00F -> $0020                PC5             EQU     $20
00140F 03F00F -> $0010                PC4             EQU     $10
00140F 03F00F -> $0008                PC3             EQU     $08
00140F 03F00F -> $0004                PC2             EQU     $04
00140F 03F00F -> $0002                PC1             EQU     $02
00140F 03F00F -> $0001                PC0             EQU     $01
00140F 03F00F -> $0005                PORTD           EQU     $0005
00140F 03F00F -> $0080                PTD7            EQU     $80
00140F 03F00F -> $0040                PTD6            EQU     $40
00140F 03F00F -> $0020                PTD5            EQU     $20
00140F 03F00F -> $0010                PTD4            EQU     $10
00140F 03F00F -> $0008                PTD3            EQU     $08
00140F 03F00F -> $0004                PTD2            EQU     $04
00140F 03F00F -> $0002                PTD1            EQU     $02
00140F 03F00F -> $0001                PTD0            EQU     $01
00140F 03F00F -> $0080                PD7             EQU     $80
00140F 03F00F -> $0040                PD6             EQU     $40
00140F 03F00F -> $0020                PD5             EQU     $20
00140F 03F00F -> $0010                PD4             EQU     $10
00140F 03F00F -> $0008                PD3             EQU     $08
00140F 03F00F -> $0004                PD2             EQU     $04
00140F 03F00F -> $0002                PD1             EQU     $02
00140F 03F00F -> $0001                PD0             EQU     $01
00140F 03F00F -> $0006                DDRC            EQU     $0006
00140F 03F00F -> $0080                DDRC7           EQU     $80
00140F 03F00F -> $0040                DDRC6           EQU     $40
00140F 03F00F -> $0020                DDRC5           EQU     $20
00140F 03F00F -> $0010                DDRC4           EQU     $10
00140F 03F00F -> $0008                DDRC3           EQU     $08
00140F 03F00F -> $0004                DDRC2           EQU     $04
00140F 03F00F -> $0007                DDRD            EQU     $0007
00140F 03F00F -> $0080                DDRD7           EQU     $80
00140F 03F00F -> $0040                DDRD6           EQU     $40
00140F 03F00F -> $0020                DDRD5           EQU     $20
00140F 03F00F -> $0010                DDRD4           EQU     $10
00140F 03F00F -> $0008                DDRD3           EQU     $08
00140F 03F00F -> $0004                DDRD2           EQU     $04
00140F 03F00F -> $0008                PORTE           EQU     $0008
00140F 03F00F -> $0002                PTE1            EQU     $02
00140F 03F00F -> $0001                PTE0            EQU     $01
00140F 03F00F -> $0002                PE1             EQU     $02
00140F 03F00F -> $0001                PE0             EQU     $01
00140F 03F00F -> $0009                DDRE            EQU     $0009
00140F 03F00F -> $0002                DDRE1           EQU     $02
00140F 03F00F -> $0001                DDRE0           EQU     $01
00140F 03F00F -> $000B                MODE            EQU     $000B
00140F 03F00F -> $0080                MODC            EQU     $80
00140F 03F00F -> $000C                PUCR            EQU     $000C
00140F 03F00F -> $0040                BKPUE           EQU     $40
00140F 03F00F -> $0010                PUPEE           EQU     $10
00140F 03F00F -> $0008                PUPDE           EQU     $08
00140F 03F00F -> $0004                PUPCE           EQU     $04
00140F 03F00F -> $0002                PUPBE           EQU     $02
00140F 03F00F -> $0001                PUPAE           EQU     $01
00140F 03F00F -> $0011                DIRECT          EQU     $0011
00140F 03F00F -> $0080                DP15            EQU     $80
00140F 03F00F -> $0040                DP14            EQU     $40
00140F 03F00F -> $0020                DP13            EQU     $20
00140F 03F00F -> $0010                DP12            EQU     $10
00140F 03F00F -> $0008                DP11            EQU     $08
00140F 03F00F -> $0004                DP10            EQU     $04
00140F 03F00F -> $0002                DP9             EQU     $02
00140F 03F00F -> $0001                DP8             EQU     $01
00140F 03F00F -> $0013                MMCCTL          EQU     $0013
00140F 03F00F -> $0001                NVMRES           EQU     $01
00140F 03F00F -> $0015                PPAGE           EQU     $0015
00140F 03F00F -> $0008                PIX3            EQU     $08
00140F 03F00F -> $0004                PIX2            EQU     $04
00140F 03F00F -> $0002                PIX1            EQU     $02
00140F 03F00F -> $0001                PIX0            EQU     $01
00140F 03F00F -> $001A                PARTIDH         EQU     $001A
00140F 03F00F -> $0080                ID15            EQU     $80
00140F 03F00F -> $0040                ID14            EQU     $40
00140F 03F00F -> $0020                ID13            EQU     $20
00140F 03F00F -> $0010                ID12            EQU     $10
00140F 03F00F -> $0008                ID11            EQU     $08
00140F 03F00F -> $0004                ID10            EQU     $04
00140F 03F00F -> $0002                ID9             EQU     $02
00140F 03F00F -> $0001                ID8             EQU     $01
00140F 03F00F -> $001B                PARTIDL         EQU     $001B
00140F 03F00F -> $0080                ID7             EQU     $80
00140F 03F00F -> $0040                ID6             EQU     $40
00140F 03F00F -> $0020                ID5             EQU     $20
00140F 03F00F -> $0010                ID4             EQU     $10
00140F 03F00F -> $0008                ID3             EQU     $08
00140F 03F00F -> $0004                ID2             EQU     $04
00140F 03F00F -> $0002                ID1             EQU     $02
00140F 03F00F -> $0001                ID0             EQU     $01
00140F 03F00F -> $001C                ECLKCTL         EQU     $001C
00140F 03F00F -> $0080                NECLK           EQU     $80
00140F 03F00F -> $0040                NCLKX2          EQU     $40
00140F 03F00F -> $0020                DIV16           EQU     $20
00140F 03F00F -> $0010                EDIV4           EQU     $10
00140F 03F00F -> $0008                EDIV3           EQU     $08
00140F 03F00F -> $0004                EDIV2           EQU     $04
00140F 03F00F -> $0002                EDIV1           EQU     $02
00140F 03F00F -> $0001                EDIV0           EQU     $01
00140F 03F00F -> $001E                IRQCR           EQU     $001E
00140F 03F00F -> $0080                IRQE            EQU     $80
00140F 03F00F -> $0040                IRQEN           EQU     $40
00140F 03F00F -> $0020                DBGC1           EQU     $0020
00140F 03F00F -> $0080                ARM             EQU     $80
00140F 03F00F -> $0040                TRIG            EQU     $40
00140F 03F00F -> $0010                BDM             EQU     $10
00140F 03F00F -> $0004                DBGBRK          EQU     $04
00140F 03F00F -> $0003                COMRV           EQU     $03
00140F 03F00F -> $0021                DBGSR           EQU     $0021
00140F 03F00F -> $0080                TBF             EQU     $80
00140F 03F00F -> $0004                SSF2            EQU     $04
00140F 03F00F -> $0002                SSF1            EQU     $02
00140F 03F00F -> $0001                SSF0            EQU     $01
00140F 03F00F -> $0022                DBGTCR          EQU     $0022
00140F 03F00F -> $0040                TSOURCE         EQU     $40
00140F 03F00F -> $000C                TRCMOD          EQU     $0C
00140F 03F00F -> $0001                TALIGN          EQU     $01
00140F 03F00F -> $0023                DBGC2           EQU     $0023
00140F 03F00F -> $0003                ABCM            EQU     $03
00140F 03F00F -> $0024                DBGTBH          EQU     $0024
00140F 03F00F -> $0080                DBGTB15         EQU     $80
00140F 03F00F -> $0040                DBGTB14         EQU     $40
00140F 03F00F -> $0020                DBGTB13         EQU     $20
00140F 03F00F -> $0010                DBGTB12         EQU     $10
00140F 03F00F -> $0008                DBGTB11         EQU     $08
00140F 03F00F -> $0004                DBGTB10         EQU     $04
00140F 03F00F -> $0002                DBGTB9          EQU     $02
00140F 03F00F -> $0001                DBGTB8          EQU     $01
00140F 03F00F -> $0025                DBGTBL          EQU     $0025
00140F 03F00F -> $0080                DBGTB7          EQU     $80
00140F 03F00F -> $0040                DBGTB6          EQU     $40
00140F 03F00F -> $0020                DBGTB5          EQU     $20
00140F 03F00F -> $0010                DBGTB4          EQU     $10
00140F 03F00F -> $0008                DBGTB3          EQU     $08
00140F 03F00F -> $0004                DBGTB2          EQU     $04
00140F 03F00F -> $0002                DBGTB1          EQU     $02
00140F 03F00F -> $0001                DBGTB0          EQU     $01
00140F 03F00F -> $0026                DBGCNT          EQU     $0026
00140F 03F00F -> $0080                TBF             EQU     $80
00140F 03F00F -> $007F                CNT             EQU     $7F
00140F 03F00F -> $0027                DBGSCRX         EQU     $0027
00140F 03F00F -> $0008                SC3             EQU     $08
00140F 03F00F -> $0004                SC2             EQU     $04
00140F 03F00F -> $0002                SC1             EQU     $02
00140F 03F00F -> $0001                SC0             EQU     $01
00140F 03F00F -> $0027                DBGMFR          EQU     $0027
00140F 03F00F -> $0004                MC2             EQU     $04
00140F 03F00F -> $0002                MC1             EQU     $02
00140F 03F00F -> $0001                MC0             EQU     $01
00140F 03F00F -> $0028                DBGXCTL         EQU     $0028
00140F 03F00F -> $0080                SZE             EQU     $80
00140F 03F00F -> $0040                SZ              EQU     $40
00140F 03F00F -> $0020                TAG             EQU     $20
00140F 03F00F -> $0010                BRK             EQU     $10
00140F 03F00F -> $0008                RW              EQU     $08
00140F 03F00F -> $0004                RWE             EQU     $04
00140F 03F00F -> $0002                NDB             EQU     $02
00140F 03F00F -> $0001                COMPE           EQU     $01
00140F 03F00F -> $0029                DBGXAH          EQU    $0029
00140F 03F00F -> $0002                DBGXA17         EQU    $02
00140F 03F00F -> $0001                DBGXA16         EQU    $01
00140F 03F00F -> $002A                DBGXAM          EQU     $002A
00140F 03F00F -> $0080                DBGXA15         EQU     $80
00140F 03F00F -> $0040                DBGXA14         EQU     $40
00140F 03F00F -> $0020                DBGXA13         EQU     $20
00140F 03F00F -> $0010                DBGXA12         EQU     $10
00140F 03F00F -> $0008                DBGXA11         EQU     $08
00140F 03F00F -> $0004                DBGXA10         EQU     $04
00140F 03F00F -> $0002                DBGXA9          EQU     $02
00140F 03F00F -> $0001                DBGXA8          EQU     $01
00140F 03F00F -> $002B                DBGXAL          EQU     $002B
00140F 03F00F -> $0080                DBGXA7          EQU     $80
00140F 03F00F -> $0040                DBGXA6          EQU     $40
00140F 03F00F -> $0020                DBGXA5          EQU     $20
00140F 03F00F -> $0010                DBGXA4          EQU     $10
00140F 03F00F -> $0008                DBGXA3          EQU     $08
00140F 03F00F -> $0004                DBGXA2          EQU     $04
00140F 03F00F -> $0002                DBGXA1          EQU     $02
00140F 03F00F -> $0001                DBGXA0          EQU     $01
00140F 03F00F -> $002C                DBGADH          EQU     $002C
00140F 03F00F -> $0080                DBGAD15         EQU     $80
00140F 03F00F -> $0040                DBGAD14         EQU     $40
00140F 03F00F -> $0020                DBGAD13         EQU     $20
00140F 03F00F -> $0010                DBGAD12         EQU     $10
00140F 03F00F -> $0008                DBGAD11         EQU     $08
00140F 03F00F -> $0004                DBGAD10         EQU     $04
00140F 03F00F -> $0002                DBGAD9          EQU     $02
00140F 03F00F -> $0001                DBGAD8          EQU     $01
00140F 03F00F -> $002D                DBGADL          EQU     $002D
00140F 03F00F -> $0080                DBGAD7          EQU     $80
00140F 03F00F -> $0040                DBGAD6          EQU     $40
00140F 03F00F -> $0020                DBGAD5          EQU     $20
00140F 03F00F -> $0010                DBGAD4          EQU     $10
00140F 03F00F -> $0008                DBGAD3          EQU     $08
00140F 03F00F -> $0004                DBGAD2          EQU     $04
00140F 03F00F -> $0002                DBGAD1          EQU     $02
00140F 03F00F -> $0001                DBGAD0          EQU     $01
00140F 03F00F -> $002E                DBGADHM         EQU     $002E
00140F 03F00F -> $0080                DBGADM15        EQU     $80
00140F 03F00F -> $0040                DBGADM14        EQU     $40
00140F 03F00F -> $0020                DBGADM13        EQU     $20
00140F 03F00F -> $0010                DBGADM12        EQU     $10
00140F 03F00F -> $0008                DBGADM11        EQU     $08
00140F 03F00F -> $0004                DBGADM10        EQU     $04
00140F 03F00F -> $0002                DBGADM9         EQU     $02
00140F 03F00F -> $0001                DBGADM8         EQU     $01
00140F 03F00F -> $002F                DBGADLM         EQU     $002F
00140F 03F00F -> $0080                DBGADM7         EQU     $80
00140F 03F00F -> $0040                DBGADM6         EQU     $40
00140F 03F00F -> $0020                DBGADM5         EQU     $20
00140F 03F00F -> $0010                DBGADM4         EQU     $10
00140F 03F00F -> $0008                DBGADM3         EQU     $08
00140F 03F00F -> $0004                DBGADM2         EQU     $04
00140F 03F00F -> $0002                DBGADM1         EQU     $02
00140F 03F00F -> $0001                DBGADM0         EQU     $01
00140F 03F00F -> $0034                CPMUSYNR        EQU     $0034
00140F 03F00F -> $0034                SYNR            EQU     $0034
00140F 03F00F -> $0080                VCOFRQ1         EQU     $80
00140F 03F00F -> $0040                VCOFRQ0         EQU     $40
00140F 03F00F -> $0020                SYNDIV5         EQU     $20
00140F 03F00F -> $0010                SYNDIV4         EQU     $10
00140F 03F00F -> $0008                SYNDIV3         EQU     $08
00140F 03F00F -> $0004                SYNDIV2         EQU     $04
00140F 03F00F -> $0002                SYNDIV1         EQU     $02
00140F 03F00F -> $0001                SYNDIV0         EQU     $01
00140F 03F00F -> $0035                CPMUREFDV       EQU     $0035
00140F 03F00F -> $0035                REFDV           EQU     $0035
00140F 03F00F -> $0080                REFFRQ1         EQU     $80
00140F 03F00F -> $0040                REFFRQ0         EQU     $40
00140F 03F00F -> $0008                REFDIV3         EQU     $08
00140F 03F00F -> $0004                REFDIV2         EQU     $04
00140F 03F00F -> $0002                REFDIV1         EQU     $02
00140F 03F00F -> $0001                REFDIV0         EQU     $01
00140F 03F00F -> $0036                CPMUPOSTDIV     EQU     $0036
00140F 03F00F -> $0036                POSTDIV         EQU     $0036
00140F 03F00F -> $0010                POSTDIV4        EQU     $10
00140F 03F00F -> $0008                POSTDIV3        EQU     $08
00140F 03F00F -> $0004                POSTDIV2        EQU     $04
00140F 03F00F -> $0002                POSTDIV1        EQU     $02
00140F 03F00F -> $0001                POSTDIV0        EQU     $01
00140F 03F00F -> $0037                CPMUFLG         EQU     $0037
00140F 03F00F -> $0080                RTIF            EQU     $80
00140F 03F00F -> $0040                PORF            EQU     $40
00140F 03F00F -> $0020                LVRF            EQU     $20
00140F 03F00F -> $0010                LOCKIF          EQU     $10
00140F 03F00F -> $0008                LOCK            EQU     $08
00140F 03F00F -> $0004                ILAF            EQU     $04
00140F 03F00F -> $0002                OSCIF           EQU     $02
00140F 03F00F -> $0001                UPOSC           EQU     $01
00140F 03F00F -> $0038                CPMUINT         EQU     $0038
00140F 03F00F -> $0080                RTIE            EQU     $80
00140F 03F00F -> $0010                LOCKIE          EQU     $10
00140F 03F00F -> $0002                OSCIE           EQU     $02
00140F 03F00F -> $0039                CPMUCLKS        EQU     $0039
00140F 03F00F -> $0080                PLLSEL          EQU     $80
00140F 03F00F -> $0040                PSTP            EQU     $40
00140F 03F00F -> $0008                PRE             EQU     $08
00140F 03F00F -> $0004                PCE             EQU     $04
00140F 03F00F -> $0002                RTIOSCSEL       EQU     $02
00140F 03F00F -> $0001                COPOSCSEL       EQU     $01
00140F 03F00F -> $003A                CPMUPLL         EQU     $003A
00140F 03F00F -> $0020                FM1             EQU     $20
00140F 03F00F -> $0010                FM0             EQU     $10
00140F 03F00F -> $003B                CPMURTI         EQU     $003B
00140F 03F00F -> $0080                RTDEC           EQU     $80
00140F 03F00F -> $0040                RTR6            EQU     $40
00140F 03F00F -> $0020                RTR5            EQU     $20
00140F 03F00F -> $0010                RTR4            EQU     $10
00140F 03F00F -> $0008                RTR3            EQU     $08
00140F 03F00F -> $0004                RTR2            EQU     $04
00140F 03F00F -> $0002                RTR1            EQU     $02
00140F 03F00F -> $0001                RTR0            EQU     $01
00140F 03F00F -> $003C                CPMUCOP         EQU     $003C
00140F 03F00F -> $0080                WCOP            EQU     $80
00140F 03F00F -> $0040                RSBCK           EQU     $40
00140F 03F00F -> $0020                WRTMASK         EQU     $20
00140F 03F00F -> $0004                CR2             EQU     $04
00140F 03F00F -> $0002                CR1             EQU     $02
00140F 03F00F -> $0001                CR0             EQU     $01
00140F 03F00F -> $003F                CPMUARMCOP      EQU     $003F
00140F 03F00F -> $003F                ARMCOP          EQU     $003F
00140F 03F00F -> $0040                TIM             EQU     $0040
00140F 03F00F -> $0040                TIOS            EQU     $0040
00140F 03F00F -> $0080                IOS7            EQU     $80
00140F 03F00F -> $0040                IOS6            EQU     $40
00140F 03F00F -> $0020                IOS5            EQU     $20
00140F 03F00F -> $0010                IOS4            EQU     $10
00140F 03F00F -> $0008                IOS3            EQU     $08
00140F 03F00F -> $0004                IOS2            EQU     $04
00140F 03F00F -> $0002                IOS1            EQU     $02
00140F 03F00F -> $0001                IOS0            EQU     $01
00140F 03F00F -> $0041                TCFORC          EQU     $0041
00140F 03F00F -> $0080                FOC7            EQU     $80
00140F 03F00F -> $0040                FOC6            EQU     $40
00140F 03F00F -> $0020                FOC5            EQU     $20
00140F 03F00F -> $0010                FOC4            EQU     $10
00140F 03F00F -> $0008                FOC3            EQU     $08
00140F 03F00F -> $0004                FOC2            EQU     $04
00140F 03F00F -> $0002                FOC1            EQU     $02
00140F 03F00F -> $0001                FOC0            EQU     $01
00140F 03F00F -> $0042                TOC7M           EQU     $0042
00140F 03F00F -> $0080                OC7M7           EQU     $80
00140F 03F00F -> $0040                OC7M6           EQU     $40
00140F 03F00F -> $0020                OC7M5           EQU     $20
00140F 03F00F -> $0010                OC7M4           EQU     $10
00140F 03F00F -> $0008                OC7M3           EQU     $08
00140F 03F00F -> $0004                OC7M2           EQU     $04
00140F 03F00F -> $0002                OC7M1           EQU     $02
00140F 03F00F -> $0001                OC7M0           EQU     $01
00140F 03F00F -> $0043                TOC7D           EQU     $0043
00140F 03F00F -> $0080                OC7D7           EQU     $80
00140F 03F00F -> $0040                OC7D6           EQU     $40
00140F 03F00F -> $0020                OC7D5           EQU     $20
00140F 03F00F -> $0010                OC7D4           EQU     $10
00140F 03F00F -> $0008                OC7D3           EQU     $08
00140F 03F00F -> $0004                OC7D2           EQU     $04
00140F 03F00F -> $0002                OC7D1           EQU     $02
00140F 03F00F -> $0001                OC7D0           EQU     $01
00140F 03F00F -> $0044                TCNT            EQU     $0044
00140F 03F00F -> $0046                TSCR1           EQU     $0046
00140F 03F00F -> $0080                TEN             EQU     $80
00140F 03F00F -> $0040                TSWAI           EQU     $40
00140F 03F00F -> $0020                TSFRZ           EQU     $20
00140F 03F00F -> $0010                TFFCA           EQU     $10
00140F 03F00F -> $0008                PRNT            EQU     $08
00140F 03F00F -> $0047                TTOV            EQU     $0047
00140F 03F00F -> $0080                TOV7            EQU     $80
00140F 03F00F -> $0040                TOV6            EQU     $40
00140F 03F00F -> $0020                TOV5            EQU     $20
00140F 03F00F -> $0010                TOV4            EQU     $10
00140F 03F00F -> $0008                TOV3            EQU     $08
00140F 03F00F -> $0004                TOV2            EQU     $04
00140F 03F00F -> $0002                TOV1            EQU     $02
00140F 03F00F -> $0001                TOV0            EQU     $01
00140F 03F00F -> $0048                TCTL1           EQU     $0048
00140F 03F00F -> $0080                OM7             EQU     $80
00140F 03F00F -> $0040                OL7             EQU     $40
00140F 03F00F -> $0020                OM6             EQU     $20
00140F 03F00F -> $0010                OL6             EQU     $10
00140F 03F00F -> $0008                OM5             EQU     $08
00140F 03F00F -> $0004                OL5             EQU     $04
00140F 03F00F -> $0002                OM4             EQU     $02
00140F 03F00F -> $0001                OL4             EQU     $01
00140F 03F00F -> $0049                TCTL2           EQU     $0049
00140F 03F00F -> $0080                OM3             EQU     $80
00140F 03F00F -> $0040                OL3             EQU     $40
00140F 03F00F -> $0020                OM2             EQU     $20
00140F 03F00F -> $0010                OL2             EQU     $10
00140F 03F00F -> $0008                OM1             EQU     $08
00140F 03F00F -> $0004                OL1             EQU     $04
00140F 03F00F -> $0002                OM0             EQU     $02
00140F 03F00F -> $0001                OL0             EQU     $01
00140F 03F00F -> $004A                TCTL3           EQU     $004A
00140F 03F00F -> $0080                EDG7B           EQU     $80
00140F 03F00F -> $0040                EDG7A           EQU     $40
00140F 03F00F -> $0020                EDG6B           EQU     $20
00140F 03F00F -> $0010                EDG6A           EQU     $10
00140F 03F00F -> $0008                EDG5B           EQU     $08
00140F 03F00F -> $0004                EDG5A           EQU     $04
00140F 03F00F -> $0002                EDG4B           EQU     $02
00140F 03F00F -> $0001                EDG4A           EQU     $01
00140F 03F00F -> $004B                TCTL4           EQU     $004B
00140F 03F00F -> $0080                EDG3B           EQU     $80
00140F 03F00F -> $0040                EDG3A           EQU     $40
00140F 03F00F -> $0020                EDG2B           EQU     $20
00140F 03F00F -> $0010                EDG2A           EQU     $10
00140F 03F00F -> $0008                EDG1B           EQU     $08
00140F 03F00F -> $0004                EDG1A           EQU     $04
00140F 03F00F -> $0002                EDG0B           EQU     $02
00140F 03F00F -> $0001                EDG0A           EQU     $01
00140F 03F00F -> $004C                TIE             EQU     $004C
00140F 03F00F -> $0080                C7I             EQU     $80
00140F 03F00F -> $0040                C6I             EQU     $40
00140F 03F00F -> $0020                C5I             EQU     $20
00140F 03F00F -> $0010                C4I             EQU     $10
00140F 03F00F -> $0008                C3I             EQU     $08
00140F 03F00F -> $0004                C2I             EQU     $04
00140F 03F00F -> $0002                C1I             EQU     $02
00140F 03F00F -> $0001                C0I             EQU     $01
00140F 03F00F -> $004D                TSCR2           EQU     $004D
00140F 03F00F -> $0080                TOI             EQU     $80
00140F 03F00F -> $0008                TCRE            EQU     $08
00140F 03F00F -> $0004                PR2             EQU     $04
00140F 03F00F -> $0002                PR1             EQU     $02
00140F 03F00F -> $0001                PR0             EQU     $01
00140F 03F00F -> $004E                TFLG1           EQU     $004E
00140F 03F00F -> $0080                C7F             EQU     $80
00140F 03F00F -> $0040                C6F             EQU     $40
00140F 03F00F -> $0020                C5F             EQU     $20
00140F 03F00F -> $0010                C4F             EQU     $10
00140F 03F00F -> $0008                C3F             EQU     $08
00140F 03F00F -> $0004                C2F             EQU     $04
00140F 03F00F -> $0002                C1F             EQU     $02
00140F 03F00F -> $0001                C0F             EQU     $01
00140F 03F00F -> $004F                TFLG2           EQU     $004F
00140F 03F00F -> $0080                TOF             EQU     $80
00140F 03F00F -> $0050                TC0             EQU     $0050
00140F 03F00F -> $0052                TC1             EQU     $0052
00140F 03F00F -> $0054                TC2             EQU     $0054
00140F 03F00F -> $0056                TC3             EQU     $0056
00140F 03F00F -> $0058                TC4             EQU     $0058
00140F 03F00F -> $005A                TC5             EQU     $005A
00140F 03F00F -> $005C                TC6             EQU     $005C
00140F 03F00F -> $005E                TC7             EQU     $005E
00140F 03F00F -> $0060                PACTL           EQU     $0060
00140F 03F00F -> $0040                PAEN            EQU     $40
00140F 03F00F -> $0020                PAMOD           EQU     $20
00140F 03F00F -> $0010                PEDGE           EQU     $10
00140F 03F00F -> $0008                CLK1            EQU     $08
00140F 03F00F -> $0004                CLK0            EQU     $04
00140F 03F00F -> $0002                PAOVI           EQU     $02
00140F 03F00F -> $0001                PAI             EQU     $01
00140F 03F00F -> $0061                PAFLG           EQU     $0061
00140F 03F00F -> $0002                PAOVF           EQU     $02
00140F 03F00F -> $0001                PAIF            EQU     $01
00140F 03F00F -> $0062                PACNT           EQU     $0062
00140F 03F00F -> $006C                OCPD            EQU     $006C
00140F 03F00F -> $0080                OCPD7           EQU     $80
00140F 03F00F -> $0040                OCPD6           EQU     $40
00140F 03F00F -> $0020                OCPD5           EQU     $20
00140F 03F00F -> $0010                OCPD4           EQU     $10
00140F 03F00F -> $0008                OCPD3           EQU     $08
00140F 03F00F -> $0004                OCPD2           EQU     $04
00140F 03F00F -> $0002                OCPD1           EQU     $02
00140F 03F00F -> $0001                OCPD0           EQU     $01
00140F 03F00F -> $006E                PTPSR           EQU     $006E
00140F 03F00F -> $0080                PTPS7           EQU     $80
00140F 03F00F -> $0040                PTPS6           EQU     $40
00140F 03F00F -> $0020                PTPS5           EQU     $20
00140F 03F00F -> $0010                PTPS4           EQU     $10
00140F 03F00F -> $0008                PTPS3           EQU     $08
00140F 03F00F -> $0004                PTPS2           EQU     $04
00140F 03F00F -> $0002                PTPS1           EQU     $02
00140F 03F00F -> $0001                PTPS0           EQU     $01
00140F 03F00F -> $0070                ATDCTL0         EQU     $0070
00140F 03F00F -> $0008                WRAP3           EQU     $08
00140F 03F00F -> $0004                WRAP2           EQU     $04
00140F 03F00F -> $0002                WRAP1           EQU     $02
00140F 03F00F -> $0001                WRAP0           EQU     $01
00140F 03F00F -> $0071                ATDCTL1         EQU     $0071
00140F 03F00F -> $0080                ETRIGSEL        EQU     $80
00140F 03F00F -> $0040                SRES1           EQU     $40
00140F 03F00F -> $0020                SRES0           EQU     $20
00140F 03F00F -> $0010                DIS             EQU     $10
00140F 03F00F -> $0008                ETRIGCH3        EQU     $08
00140F 03F00F -> $0004                ETRIGCH2        EQU     $04
00140F 03F00F -> $0002                ETRIGCH1        EQU     $02
00140F 03F00F -> $0001                ETRIGCH0        EQU     $01
00140F 03F00F -> $0072                ATDCTL2         EQU     $0072
00140F 03F00F -> $0040                AFFC            EQU     $40
00140F 03F00F -> $0010                ETRIGLE         EQU     $10
00140F 03F00F -> $0008                ETRIGP          EQU     $08
00140F 03F00F -> $0004                ETRIGE          EQU     $04
00140F 03F00F -> $0002                ASCIE           EQU     $02
00140F 03F00F -> $0001                ASCIF           EQU     $01
00140F 03F00F -> $0073                ATDCTL3         EQU     $0073
00140F 03F00F -> $0080                DJM             EQU     $80
00140F 03F00F -> $0040                S8C             EQU     $40
00140F 03F00F -> $0020                S4C             EQU     $20
00140F 03F00F -> $0010                S2C             EQU     $10
00140F 03F00F -> $0008                S1C             EQU     $08
00140F 03F00F -> $0004                FIFO            EQU     $04
00140F 03F00F -> $0002                FRZ1            EQU     $02
00140F 03F00F -> $0001                FRZ0            EQU     $01
00140F 03F00F -> $0074                ATDCTL4         EQU     $0074
00140F 03F00F -> $0080                SMP2            EQU     $80
00140F 03F00F -> $0040                SMP1            EQU     $40
00140F 03F00F -> $0020                SMP0            EQU     $20
00140F 03F00F -> $0010                PRS4            EQU     $10
00140F 03F00F -> $0008                PRS3            EQU     $08
00140F 03F00F -> $0004                PRS2            EQU     $04
00140F 03F00F -> $0002                PRS1            EQU     $02
00140F 03F00F -> $0001                PRS0            EQU     $01
00140F 03F00F -> $0075                ATDCTL5         EQU     $0075
00140F 03F00F -> $0040                SC              EQU     $40
00140F 03F00F -> $0020                SCAN            EQU     $20
00140F 03F00F -> $0010                MULT            EQU     $10
00140F 03F00F -> $0008                CD              EQU     $08
00140F 03F00F -> $0004                CC              EQU     $04
00140F 03F00F -> $0002                CB              EQU     $02
00140F 03F00F -> $0001                CA              EQU     $01
00140F 03F00F -> $0076                ATDSTAT0        EQU     $0076
00140F 03F00F -> $0080                SCF             EQU     $80
00140F 03F00F -> $0020                ETORF           EQU     $20
00140F 03F00F -> $0010                FIFOR           EQU     $10
00140F 03F00F -> $0004                CC3             EQU     $04
00140F 03F00F -> $0004                CC2             EQU     $04
00140F 03F00F -> $0002                CC1             EQU     $02
00140F 03F00F -> $0001                CC0             EQU     $01
00140F 03F00F -> $0078                ATDCMPEH        EQU     $0078
00140F 03F00F -> $0080                CMPE15          EQU     $80
00140F 03F00F -> $0040                CMPE14          EQU     $40
00140F 03F00F -> $0020                CMPE13          EQU     $20
00140F 03F00F -> $0010                CMPE12          EQU     $10
00140F 03F00F -> $0008                CMPE11          EQU     $08
00140F 03F00F -> $0004                CMPE10          EQU     $04
00140F 03F00F -> $0002                CMPE9           EQU     $02
00140F 03F00F -> $0001                CMPE8           EQU     $01
00140F 03F00F -> $0079                ATDCMPEL        EQU     $0079
00140F 03F00F -> $0080                CMPE7           EQU     $80
00140F 03F00F -> $0040                CMPE6           EQU     $40
00140F 03F00F -> $0020                CMPE5           EQU     $20
00140F 03F00F -> $0010                CMPE4           EQU     $10
00140F 03F00F -> $0008                CMPE3           EQU     $08
00140F 03F00F -> $0004                CMPE2           EQU     $04
00140F 03F00F -> $0002                CMPE1           EQU     $02
00140F 03F00F -> $0001                CMPE0           EQU     $01
00140F 03F00F -> $007A                ATDSTAT2H       EQU     $007A
00140F 03F00F -> $0080                CCF15           EQU     $80
00140F 03F00F -> $0040                CCF14           EQU     $40
00140F 03F00F -> $0020                CCF13           EQU     $20
00140F 03F00F -> $0010                CCF12           EQU     $10
00140F 03F00F -> $0008                CCF11           EQU     $08
00140F 03F00F -> $0004                CCF10           EQU     $04
00140F 03F00F -> $0002                CCF9            EQU     $02
00140F 03F00F -> $0001                CCF8            EQU     $01
00140F 03F00F -> $007B                ATDSTAT2L       EQU     $007B
00140F 03F00F -> $0080                CCF7            EQU     $80
00140F 03F00F -> $0040                CCF6            EQU     $40
00140F 03F00F -> $0020                CCF5            EQU     $20
00140F 03F00F -> $0010                CCF4            EQU     $10
00140F 03F00F -> $0008                CCF3            EQU     $08
00140F 03F00F -> $0004                CCF2            EQU     $04
00140F 03F00F -> $0002                CCF1            EQU     $02
00140F 03F00F -> $0001                CCF0            EQU     $01
00140F 03F00F -> $007C                ATDDIENH        EQU     $007C
00140F 03F00F -> $007C                ATDDIEN         EQU     $007C
00140F 03F00F -> $0080                IEN15           EQU     $80
00140F 03F00F -> $0040                IEN14           EQU     $40
00140F 03F00F -> $0020                IEN13           EQU     $20
00140F 03F00F -> $0010                IEN12           EQU     $10
00140F 03F00F -> $0008                IEN11           EQU     $08
00140F 03F00F -> $0004                IEN10           EQU     $04
00140F 03F00F -> $0002                IEN9            EQU     $02
00140F 03F00F -> $0001                IEN8            EQU     $01
00140F 03F00F -> $007D                ATDDIENL        EQU     $007D
00140F 03F00F -> $0080                IEN7            EQU     $80
00140F 03F00F -> $0040                IEN6            EQU     $40
00140F 03F00F -> $0020                IEN5            EQU     $20
00140F 03F00F -> $0010                IEN4            EQU     $10
00140F 03F00F -> $0008                IEN3            EQU     $08
00140F 03F00F -> $0004                IEN2            EQU     $04
00140F 03F00F -> $0002                IEN1            EQU     $02
00140F 03F00F -> $0001                IEN0            EQU     $01
00140F 03F00F -> $007E                ATDCMPHTH       EQU     $007E
00140F 03F00F -> $0080                CMPHT15         EQU     $80
00140F 03F00F -> $0040                CMPHT14         EQU     $40
00140F 03F00F -> $0020                CMPHT13         EQU     $20
00140F 03F00F -> $0010                CMPHT12         EQU     $10
00140F 03F00F -> $0008                CMPHT11         EQU     $08
00140F 03F00F -> $0004                CMPHT10         EQU     $04
00140F 03F00F -> $0002                CMPHT9          EQU     $02
00140F 03F00F -> $0001                CMPHT8          EQU     $01
00140F 03F00F -> $007F                ATDCMPHTL       EQU     $007F
00140F 03F00F -> $0001                CMPHT0          EQU     $01
00140F 03F00F -> $0002                CMPHT1          EQU     $02
00140F 03F00F -> $0004                CMPHT2          EQU     $04
00140F 03F00F -> $0008                CMPHT3          EQU     $08
00140F 03F00F -> $0010                CMPHT4          EQU     $10
00140F 03F00F -> $0020                CMPHT5          EQU     $20
00140F 03F00F -> $0040                CMPHT6          EQU     $40
00140F 03F00F -> $0080                CMPHT7          EQU     $80
00140F 03F00F -> $0080                ATDDR0          EQU     $0080
00140F 03F00F -> $0080                ATDDR0H         EQU     $0080
00140F 03F00F -> $0081                ATDDR0L         EQU     $0081
00140F 03F00F -> $0082                ATDDR1          EQU     $0082
00140F 03F00F -> $0082                ATDDR1H         EQU     $0082
00140F 03F00F -> $0083                ATDDR1L         EQU     $0083
00140F 03F00F -> $0084                ATDDR2          EQU     $0084
00140F 03F00F -> $0084                ATDDR2H         EQU     $0084
00140F 03F00F -> $0085                ATDDR2L         EQU     $0085
00140F 03F00F -> $0086                ATDDR3          EQU     $0086
00140F 03F00F -> $0086                ATDDR3H         EQU     $0086
00140F 03F00F -> $0087                ATDDR3L         EQU     $0087
00140F 03F00F -> $0088                ATDDR4          EQU     $0088
00140F 03F00F -> $0088                ATDDR4H         EQU     $0088
00140F 03F00F -> $0089                ATDDR4L         EQU     $0089
00140F 03F00F -> $008A                ATDDR5          EQU     $008A
00140F 03F00F -> $008A                ATDDR5H         EQU     $008A
00140F 03F00F -> $008B                ATDDR5L         EQU     $008B
00140F 03F00F -> $008C                ATDDR6          EQU     $008C
00140F 03F00F -> $008C                ATDDR6H         EQU     $008C
00140F 03F00F -> $008D                ATDDR6L         EQU     $008D
00140F 03F00F -> $008E                ATDDR7          EQU     $008E
00140F 03F00F -> $008E                ATDDR7H         EQU     $008E
00140F 03F00F -> $008F                ATDDR7L         EQU     $008F
00140F 03F00F -> $0090                ATDDR8          EQU     $0090
00140F 03F00F -> $0090                ATDDR8H         EQU     $0090
00140F 03F00F -> $0091                ATDDR8L         EQU     $0091
00140F 03F00F -> $0092                ATDDR9          EQU     $0092
00140F 03F00F -> $0092                ATDDR9H         EQU     $0092
00140F 03F00F -> $0093                ATDDR9L         EQU     $0093
00140F 03F00F -> $0093                ATDDR10         EQU     $0093
00140F 03F00F -> $0093                ATDDR10H        EQU     $0093
00140F 03F00F -> $0095                ATDDR10L        EQU     $0095
00140F 03F00F -> $0096                ATDDR11         EQU     $0096
00140F 03F00F -> $0096                ATDDR11H        EQU     $0096
00140F 03F00F -> $0097                ATDDR11L        EQU     $0097
00140F 03F00F -> $0098                ATDDR12         EQU     $0098
00140F 03F00F -> $0098                ATDDR12H        EQU     $0098
00140F 03F00F -> $0099                ATDDR12L        EQU     $0099
00140F 03F00F -> $009A                ATDDR13         EQU     $009A
00140F 03F00F -> $009A                ATDDR13H        EQU     $009A
00140F 03F00F -> $009B                ATDDR13L        EQU     $009B
00140F 03F00F -> $009C                ATDDR14         EQU     $009C
00140F 03F00F -> $009C                ATDDR14H        EQU     $009C
00140F 03F00F -> $009D                ATDDR14L        EQU     $009D
00140F 03F00F -> $009E                ATDDR15         EQU     $009E
00140F 03F00F -> $009E                ATDDR15H        EQU     $009E
00140F 03F00F -> $009F                ATDDR15L        EQU     $009F
00140F 03F00F -> $00A0                PWME            EQU     $00A0
00140F 03F00F -> $0080                PWME7           EQU     $80
00140F 03F00F -> $0040                PWME6           EQU     $40
00140F 03F00F -> $0020                PWME5           EQU     $20
00140F 03F00F -> $0010                PWME4           EQU     $10
00140F 03F00F -> $0008                PWME3           EQU     $08
00140F 03F00F -> $0004                PWME2           EQU     $04
00140F 03F00F -> $0002                PWME1           EQU     $02
00140F 03F00F -> $0001                PWME0           EQU     $01
00140F 03F00F -> $00A1                PWMPOL          EQU     $00A1
00140F 03F00F -> $0080                PPOL7           EQU     $80
00140F 03F00F -> $0040                PPOL6           EQU     $40
00140F 03F00F -> $0020                PPOL5           EQU     $20
00140F 03F00F -> $0010                PPOL4           EQU     $10
00140F 03F00F -> $0008                PPOL3           EQU     $08
00140F 03F00F -> $0004                PPOL2           EQU     $04
00140F 03F00F -> $0002                PPOL1           EQU     $02
00140F 03F00F -> $0001                PPOL0           EQU     $01
00140F 03F00F -> $00A2                PWMCLK          EQU     $00A2
00140F 03F00F -> $0080                PCLK7           EQU     $80
00140F 03F00F -> $0040                PCLK6           EQU     $40
00140F 03F00F -> $0020                PCLK5           EQU     $20
00140F 03F00F -> $0010                PCLK4           EQU     $10
00140F 03F00F -> $0008                PCLK3           EQU     $08
00140F 03F00F -> $0004                PCLK2           EQU     $04
00140F 03F00F -> $0002                PCLK1           EQU     $02
00140F 03F00F -> $0001                PCLK0           EQU     $01
00140F 03F00F -> $00A3                PWMPRCLK        EQU     $00A3
00140F 03F00F -> $0040                PCKB2           EQU     $40
00140F 03F00F -> $0020                PCKB1           EQU     $20
00140F 03F00F -> $0010                PCKB0           EQU     $10
00140F 03F00F -> $0004                PCKA2           EQU     $04
00140F 03F00F -> $0002                PCKA1           EQU     $02
00140F 03F00F -> $0001                PCKA0           EQU     $01
00140F 03F00F -> $00A4                PWMCAE          EQU     $00A4
00140F 03F00F -> $0080                CAE7            EQU     $80
00140F 03F00F -> $0040                CAE6            EQU     $40
00140F 03F00F -> $0020                CAE5            EQU     $20
00140F 03F00F -> $0010                CAE4            EQU     $10
00140F 03F00F -> $0008                CAE3            EQU     $08
00140F 03F00F -> $0004                CAE2            EQU     $04
00140F 03F00F -> $0002                CAE1            EQU     $02
00140F 03F00F -> $0001                CAE0            EQU     $01
00140F 03F00F -> $00A5                PWMCTL          EQU     $00A5
00140F 03F00F -> $0080                CON67           EQU     $80
00140F 03F00F -> $0040                CON45           EQU     $40
00140F 03F00F -> $0020                CON23           EQU     $20
00140F 03F00F -> $0010                CON01           EQU     $10
00140F 03F00F -> $0008                PSWAI           EQU     $08
00140F 03F00F -> $0004                PFRZ            EQU     $04
00140F 03F00F -> $00A6                PWMCLKAB        EQU     $00A6
00140F 03F00F -> $0080                PCLKAB7         EQU     $80
00140F 03F00F -> $0040                PCLKAB6         EQU     $40
00140F 03F00F -> $0020                PCLKAB5         EQU     $20
00140F 03F00F -> $0010                PCLKAB4         EQU     $10
00140F 03F00F -> $0008                PCLKAB3         EQU     $08
00140F 03F00F -> $0004                PCLKAB2         EQU     $04
00140F 03F00F -> $0002                PCLKAB1         EQU     $02
00140F 03F00F -> $0001                PCLKAB0         EQU     $01
00140F 03F00F -> $00A8                PWMSCNTA        EQU     $00A8
00140F 03F00F -> $00A9                PWMSCNTB        EQU     $00A9
00140F 03F00F -> $00AC                PWMCNT0         EQU     $00AC
00140F 03F00F -> $00AD                PWMCNT1         EQU     $00AD
00140F 03F00F -> $00AE                PWMCNT2         EQU     $00AE
00140F 03F00F -> $00AF                PWMCNT3         EQU     $00AF
00140F 03F00F -> $00B0                PWMCNT4         EQU     $00B0
00140F 03F00F -> $00B1                PWMCNT5         EQU     $00B1
00140F 03F00F -> $00B2                PWMCNT6         EQU     $00B2
00140F 03F00F -> $00B3                PWMCNT7         EQU     $00B3
00140F 03F00F -> $00B4                PWMPER0         EQU     $00B4
00140F 03F00F -> $00B5                PWMPER1         EQU     $00B5
00140F 03F00F -> $00B6                PWMPER2         EQU     $00B6
00140F 03F00F -> $00B7                PWMPER3         EQU     $00B7
00140F 03F00F -> $00B8                PWMPER4         EQU     $00B8
00140F 03F00F -> $00B9                PWMPER5         EQU     $00B9
00140F 03F00F -> $00BA                PWMPER6         EQU     $00BA
00140F 03F00F -> $00BB                PWMPER7         EQU     $00BB
00140F 03F00F -> $00BC                PWMDTY0         EQU     $00BC
00140F 03F00F -> $00BD                PWMDTY1         EQU     $00BD
00140F 03F00F -> $00BE                PWMDTY2         EQU     $00BE
00140F 03F00F -> $00BF                PWMDTY3         EQU     $00BF
00140F 03F00F -> $00C0                PWMDTY4         EQU     $00C0
00140F 03F00F -> $00C1                PWMDTY5         EQU     $00C1
00140F 03F00F -> $00C2                PWMDTY6         EQU     $00C2
00140F 03F00F -> $00C3                PWMDTY7         EQU     $00C3
00140F 03F00F -> $00C8                SCIBDH          EQU     $00C8
00140F 03F00F -> $00C8                SCI0BDH         EQU     $00C8
00140F 03F00F -> $0080                IREN            EQU     $80
00140F 03F00F -> $0040                TNP1            EQU     $40
00140F 03F00F -> $0020                TNP0            EQU     $20
00140F 03F00F -> $0010                SBR12           EQU     $10
00140F 03F00F -> $0008                SBR11           EQU     $08
00140F 03F00F -> $0004                SBR10           EQU     $04
00140F 03F00F -> $0002                SBR9            EQU     $02
00140F 03F00F -> $0001                SBR8            EQU     $01
00140F 03F00F -> $00C9                SCI0ASR1        EQU     $00C9
00140F 03F00F -> $0080                RXEDGIF         EQU     $80
00140F 03F00F -> $0004                BERRV           EQU     $04
00140F 03F00F -> $0002                BERRIF          EQU     $02
00140F 03F00F -> $0001                BKDIF           EQU     $01
00140F 03F00F -> $00C9                SCIBDL          EQU     $00C9
00140F 03F00F -> $00C9                SCI0BDL         EQU     $00C9
00140F 03F00F -> $0080                SBR7            EQU     $80
00140F 03F00F -> $0040                SBR6            EQU     $40
00140F 03F00F -> $0020                SBR5            EQU     $20
00140F 03F00F -> $0010                SBR4            EQU     $10
00140F 03F00F -> $0008                SBR3            EQU     $08
00140F 03F00F -> $0004                SBR2            EQU     $04
00140F 03F00F -> $0002                SBR1            EQU     $02
00140F 03F00F -> $0001                SBR0            EQU     $01
00140F 03F00F -> $00C9                SCI0ACR1        EQU     $00C9
00140F 03F00F -> $0080                RXEDGIE         EQU     $80
00140F 03F00F -> $0002                BERRIE          EQU     $02
00140F 03F00F -> $0001                BKDIE           EQU     $01
00140F 03F00F -> $00CA                SCICR1          EQU     $00CA
00140F 03F00F -> $00CA                SCI0CR1         EQU     $00CA
00140F 03F00F -> $0080                LOOPS           EQU     $80
00140F 03F00F -> $0040                SCISWAI         EQU     $40
00140F 03F00F -> $0020                RSRC            EQU     $20
00140F 03F00F -> $0010                M               EQU     $10
00140F 03F00F -> $0008                WAKE            EQU     $08
00140F 03F00F -> $0004                ILT             EQU     $04
00140F 03F00F -> $0002                PE              EQU     $02
00140F 03F00F -> $0001                PT              EQU     $01
00140F 03F00F -> $00CA                SCI0ACR2        EQU     $00CA
00140F 03F00F -> $0004                BERRM1          EQU     $04
00140F 03F00F -> $0002                BERRM0          EQU     $02
00140F 03F00F -> $0001                BKDFE           EQU     $01
00140F 03F00F -> $00CB                SCICR2          EQU     $00CB
00140F 03F00F -> $00CB                SCI0CR2         EQU     $00CB
00140F 03F00F -> $0080                TXIE            EQU     $80
00140F 03F00F -> $0040                TCIE            EQU     $40
00140F 03F00F -> $0020                RIE             EQU     $20
00140F 03F00F -> $0010                ILIE            EQU     $10
00140F 03F00F -> $0008                TE              EQU     $08
00140F 03F00F -> $0004                RE              EQU     $04
00140F 03F00F -> $0002                RWU             EQU     $02
00140F 03F00F -> $0001                SBK             EQU     $01
00140F 03F00F -> $00CC                SCISR1          EQU     $00CC
00140F 03F00F -> $00CC                SCI0SR1         EQU     $00CC
00140F 03F00F -> $0080                TDRE            EQU     $80
00140F 03F00F -> $0040                TC              EQU     $40
00140F 03F00F -> $0020                RDRFF           EQU     $20
00140F 03F00F -> $0010                IDLE            EQU     $10
00140F 03F00F -> $0008                OR              EQU     $08
00140F 03F00F -> $0004                NF              EQU     $04
00140F 03F00F -> $0002                FE              EQU     $02
00140F 03F00F -> $0001                PF              EQU     $01
00140F 03F00F -> $00CD                SCISR2          EQU     $00CD
00140F 03F00F -> $00CD                SCI0SR2         EQU     $00CD
00140F 03F00F -> $0008                AMAP            EQU     $08
00140F 03F00F -> $0010                TXPOL           EQU     $10
00140F 03F00F -> $0008                RXPOL           EQU     $08
00140F 03F00F -> $0004                BRK13           EQU     $04
00140F 03F00F -> $0002                TXDIR           EQU     $02
00140F 03F00F -> $0001                RAF             EQU     $01
00140F 03F00F -> $00CE                SCIDRH          EQU     $00CE
00140F 03F00F -> $00CE                SCI0DRH         EQU     $00CE
00140F 03F00F -> $0080                R8              EQU     $80
00140F 03F00F -> $0040                T8              EQU     $40
00140F 03F00F -> $00CF                SCIDRL          EQU     $00CF
00140F 03F00F -> $00CF                SCI0DRL         EQU     $00CF
00140F 03F00F -> $00D0                SCI1BDH         EQU     $00D0
00140F 03F00F -> $00D0                SCI1ASR1        EQU     $00D0
00140F 03F00F -> $00D1                SCI1BDL         EQU     $00D1
00140F 03F00F -> $00D1                SCI1ACR1        EQU     $00D1
00140F 03F00F -> $00D2                SCI1CR1         EQU     $00D2
00140F 03F00F -> $00D2                SCI1ACR2        EQU     $00D2
00140F 03F00F -> $00D3                SCI1CR2         EQU     $00D3
00140F 03F00F -> $00D4                SCI1SR1         EQU     $00D4
00140F 03F00F -> $00D5                SCI1SR2         EQU     $00D5
00140F 03F00F -> $00D6                SCI1DRH         EQU     $00D6
00140F 03F00F -> $00D7                SCI1DRL         EQU     $00D7
00140F 03F00F -> $00D8                SPICR1          EQU     $00D8
00140F 03F00F -> $00D8                SPI0CR1         EQU     $00D8
00140F 03F00F -> $0080                SPIE            EQU     $80
00140F 03F00F -> $0040                SPE             EQU     $40
00140F 03F00F -> $0020                SPTIE           EQU     $20
00140F 03F00F -> $0010                MSTR            EQU     $10
00140F 03F00F -> $0008                CPOL            EQU     $08
00140F 03F00F -> $0004                CPHA            EQU     $04
00140F 03F00F -> $0002                SSOE            EQU     $02
00140F 03F00F -> $0001                LSBFE           EQU     $01
00140F 03F00F -> $00D9                SPICR2          EQU     $00D9
00140F 03F00F -> $00D9                SPI0CR2         EQU     $00D9
00140F 03F00F -> $0040                XFRW            EQU     $40
00140F 03F00F -> $0010                MODFEN          EQU     $10
00140F 03F00F -> $0008                BIDIROE         EQU     $08
00140F 03F00F -> $0002                SPISWAI         EQU     $02
00140F 03F00F -> $0001                SPC0            EQU     $01
00140F 03F00F -> $00DA                SPIBR           EQU     $00DA
00140F 03F00F -> $00DA                SPI0BR          EQU     $00DA
00140F 03F00F -> $0040                SPPR2           EQU     $40
00140F 03F00F -> $0020                SPPR1           EQU     $20
00140F 03F00F -> $0010                SPPR0           EQU     $10
00140F 03F00F -> $0004                SPR2            EQU     $04
00140F 03F00F -> $0002                SPR1            EQU     $02
00140F 03F00F -> $0001                SPR0            EQU     $01
00140F 03F00F -> $00DB                SPISR           EQU     $00DB
00140F 03F00F -> $00DB                SPI0SR          EQU     $00DB
00140F 03F00F -> $0080                SPIF            EQU     $80
00140F 03F00F -> $0020                SPTEF           EQU     $20
00140F 03F00F -> $0010                MODF            EQU     $10
00140F 03F00F -> $00DC                SPIDRH          EQU     $00DC
00140F 03F00F -> $00DC                SPI0DRH         EQU     $00DC
00140F 03F00F -> $00DD                SPIDRL          EQU     $00DD
00140F 03F00F -> $00DD                SPI0DRL         EQU     $00DD
00140F 03F00F -> $00E8                SCI2BDH         EQU     $00E8
00140F 03F00F -> $00E8                SCI2ASR1        EQU     $00E8
00140F 03F00F -> $00E9                SCI2BDL         EQU     $00E9
00140F 03F00F -> $00E9                SCI2ACR1        EQU     $00E9
00140F 03F00F -> $00EA                SCI2CR1         EQU     $00EA
00140F 03F00F -> $00EA                SCI2ACR2        EQU     $00EA
00140F 03F00F -> $00EB                SCI2CR2         EQU     $00EB
00140F 03F00F -> $00EC                SCI2SR1         EQU     $00EC
00140F 03F00F -> $00ED                SCI2SR2         EQU     $00ED
00140F 03F00F -> $00EE                SCI2DRH         EQU     $00EE
00140F 03F00F -> $00EF                SCI2DRL         EQU     $00EF
00140F 03F00F -> $00F0                SPI1CR1         EQU     $00F0
00140F 03F00F -> $00F1                SPI1CR2         EQU     $00F1
00140F 03F00F -> $00F2                SPI1BR          EQU     $00F2
00140F 03F00F -> $00F3                SPI1SR          EQU     $00F3
00140F 03F00F -> $00F4                SPI1DRH         EQU     $00F4
00140F 03F00F -> $00F5                SPI1DRL         EQU     $00F5
00140F 03F00F -> $00F8                SPI2CR1         EQU     $00F8
00140F 03F00F -> $00F9                SPI2CR2         EQU     $00F9
00140F 03F00F -> $00FA                SPI2BR          EQU     $00FA
00140F 03F00F -> $00FB                SPI2SR          EQU     $00FB
00140F 03F00F -> $00FC                SPI2DRH         EQU     $00FC
00140F 03F00F -> $00FD                SPI2DRL         EQU     $00FD
00140F 03F00F -> $0100                FCLKDIV         EQU     $0100
00140F 03F00F -> $0080                FDIVLD          EQU     $80
00140F 03F00F -> $0040                FDIVLCK         EQU     $40
00140F 03F00F -> $0020                FDIV5           EQU     $20
00140F 03F00F -> $0010                FDIV4           EQU     $10
00140F 03F00F -> $0008                FDIV3           EQU     $08
00140F 03F00F -> $0004                FDIV2           EQU     $04
00140F 03F00F -> $0002                FDIV1           EQU     $02
00140F 03F00F -> $0001                FDIV0           EQU     $01
00140F 03F00F -> $0101                FSEC            EQU     $0101
00140F 03F00F -> $0080                KEYEN1          EQU     $80
00140F 03F00F -> $0040                KEYEN2          EQU     $40
00140F 03F00F -> $0020                RNV5            EQU     $20
00140F 03F00F -> $0010                RNV4            EQU     $10
00140F 03F00F -> $0008                RNV3            EQU     $08
00140F 03F00F -> $0004                RNV2            EQU     $04
00140F 03F00F -> $0002                SEC1            EQU     $02
00140F 03F00F -> $0001                SEC0            EQU     $01
00140F 03F00F -> $0102                FCCOBIX         EQU     $0102
00140F 03F00F -> $0004                CCOBIX2         EQU     $04
00140F 03F00F -> $0002                CCOBIX1         EQU     $02
00140F 03F00F -> $0001                CCOBIX0         EQU     $01
00140F 03F00F -> $0104                FCNFG           EQU     $0104
00140F 03F00F -> $0080                CCIE            EQU     $80
00140F 03F00F -> $0010                IGNSF           EQU     $10
00140F 03F00F -> $0002                FDFD            EQU     $02
00140F 03F00F -> $0001                FSFD            EQU     $01
00140F 03F00F -> $0105                FERCNFG         EQU     $0105
00140F 03F00F -> $0002                DFDIE           EQU     $02
00140F 03F00F -> $0001                SFDIE           EQU     $01
00140F 03F00F -> $0106                FSTAT           EQU     $0106
00140F 03F00F -> $0080                CCIF            EQU     $80
00140F 03F00F -> $0020                ACCERR          EQU     $20
00140F 03F00F -> $0010                FPVIOL          EQU     $10
00140F 03F00F -> $0008                MGBUSY          EQU     $08
00140F 03F00F -> $0002                MGSTAT1         EQU     $02
00140F 03F00F -> $0001                MGSTAT0         EQU     $01
00140F 03F00F -> $0107                FERSTAT         EQU     $0107
00140F 03F00F -> $0002                DFDIF           EQU     $02
00140F 03F00F -> $0001                SFDIF           EQU     $01
00140F 03F00F -> $0108                FPROT           EQU     $0108
00140F 03F00F -> $0080                FPOPEN          EQU     $80
00140F 03F00F -> $0040                RNV6            EQU     $40
00140F 03F00F -> $0020                FPHDIS          EQU     $20
00140F 03F00F -> $0010                FPHS1           EQU     $10
00140F 03F00F -> $0008                FPHS0           EQU     $08
00140F 03F00F -> $0004                FPLDIS          EQU     $04
00140F 03F00F -> $0002                FPLS1           EQU     $02
00140F 03F00F -> $0001                FPLS0           EQU     $01
00140F 03F00F -> $0109                DPROT           EQU     $0109
00140F 03F00F -> $0109                EPROT           EQU     $0109
00140F 03F00F -> $0080                DPOPEN          EQU     $80
00140F 03F00F -> $0080                EPOPEN          EQU     $80
00140F 03F00F -> $0008                EPDIS           EQU     $08
00140F 03F00F -> $0004                EPS2            EQU     $04
00140F 03F00F -> $0002                EPS1            EQU     $02
00140F 03F00F -> $0001                EPS0            EQU     $01
00140F 03F00F -> $010A                FCCOBHI         EQU     $010A
00140F 03F00F -> $0080                CCOB15          EQU     $80
00140F 03F00F -> $0040                CCOB14          EQU     $40
00140F 03F00F -> $0020                CCOB13          EQU     $20
00140F 03F00F -> $0010                CCOB12          EQU     $10
00140F 03F00F -> $0008                CCOB11          EQU     $08
00140F 03F00F -> $0004                CCOB10          EQU     $04
00140F 03F00F -> $0002                CCOB9           EQU     $02
00140F 03F00F -> $0001                CCOB8           EQU     $01
00140F 03F00F -> $010B                FCCOBLO         EQU     $010B
00140F 03F00F -> $0080                CCOB7           EQU     $80
00140F 03F00F -> $0040                CCOB6           EQU     $40
00140F 03F00F -> $0020                CCOB5           EQU     $20
00140F 03F00F -> $0010                CCOB4           EQU     $10
00140F 03F00F -> $0008                CCOB3           EQU     $08
00140F 03F00F -> $0004                CCOB2           EQU     $04
00140F 03F00F -> $0002                CCOB1           EQU     $02
00140F 03F00F -> $0001                CCOB0           EQU     $01
00140F 03F00F -> $0110                FOPT            EQU     $0110
00140F 03F00F -> $0080                NV7             EQU     $80
00140F 03F00F -> $0040                NV6             EQU     $40
00140F 03F00F -> $0020                NV5             EQU     $20
00140F 03F00F -> $0010                NV4             EQU     $10
00140F 03F00F -> $0008                NV3             EQU     $08
00140F 03F00F -> $0004                NV2             EQU     $04
00140F 03F00F -> $0002                NV1             EQU     $02
00140F 03F00F -> $0001                NV0             EQU     $01
00140F 03F00F -> $0120                IVBR            EQU     $0120
00140F 03F00F -> $0140                CANCTL0         EQU     $0140
00140F 03F00F -> $0080                RXFRM           EQU     $80
00140F 03F00F -> $0040                RXACT           EQU     $40
00140F 03F00F -> $0020                CSWAI           EQU     $20
00140F 03F00F -> $0010                SYNCH           EQU     $10
00140F 03F00F -> $0008                TIMEN           EQU     $08 ;RENAMED
00140F 03F00F -> $0004                WUPE            EQU     $04
00140F 03F00F -> $0002                SLPRQ           EQU     $02
00140F 03F00F -> $0001                INITRQ          EQU     $01
00140F 03F00F -> $0141                CANCTL1         EQU     $0141
00140F 03F00F -> $0080                CANE            EQU     $80
00140F 03F00F -> $0040                CLKSRC          EQU     $40
00140F 03F00F -> $0020                LOOPB           EQU     $20
00140F 03F00F -> $0010                LISTEN          EQU     $10
00140F 03F00F -> $0004                WUPM            EQU     $04
00140F 03F00F -> $0002                SLPAK           EQU     $02
00140F 03F00F -> $0001                INITAK          EQU     $01
00140F 03F00F -> $0142                CANBTR0         EQU     $0142
00140F 03F00F -> $0080                SJW1            EQU     $80
00140F 03F00F -> $0040                SJW0            EQU     $40
00140F 03F00F -> $0020                BRP5            EQU     $20
00140F 03F00F -> $0010                BRP4            EQU     $10
00140F 03F00F -> $0008                BRP3            EQU     $08
00140F 03F00F -> $0004                BRP2            EQU     $04
00140F 03F00F -> $0002                BRP1            EQU     $02
00140F 03F00F -> $0001                BRP0            EQU     $01
00140F 03F00F -> $0143                CANBTR1         EQU     $0143
00140F 03F00F -> $0080                SAMP            EQU     $80
00140F 03F00F -> $0040                TSEG22          EQU     $40
00140F 03F00F -> $0020                TSEG21          EQU     $20
00140F 03F00F -> $0010                TSEG20          EQU     $10
00140F 03F00F -> $0008                TSEG13          EQU     $08
00140F 03F00F -> $0004                TSEG12          EQU     $04
00140F 03F00F -> $0002                TSEG11          EQU     $02
00140F 03F00F -> $0001                TESG10          EQU     $01
00140F 03F00F -> $0144                CANRFLG         EQU     $0144
00140F 03F00F -> $0080                WUPIF           EQU     $80
00140F 03F00F -> $0040                CSCIF           EQU     $40
00140F 03F00F -> $0020                RSTAT1          EQU     $20
00140F 03F00F -> $0010                RSTAT0          EQU     $10
00140F 03F00F -> $0008                TSTAT1          EQU     $08
00140F 03F00F -> $0004                TSTAT0          EQU     $04
00140F 03F00F -> $0002                OVRIF           EQU     $02
00140F 03F00F -> $0001                RXF             EQU     $01
00140F 03F00F -> $0145                CANRIER         EQU     $0145
00140F 03F00F -> $0080                WUPIE           EQU     $80
00140F 03F00F -> $0040                CSCIE           EQU     $40
00140F 03F00F -> $0020                RSTATE1         EQU     $20
00140F 03F00F -> $0010                RSTATE0         EQU     $10
00140F 03F00F -> $0008                TSTATE1         EQU     $08
00140F 03F00F -> $0004                TSTATE0         EQU     $04
00140F 03F00F -> $0002                OVRIE           EQU     $02
00140F 03F00F -> $0001                RXFIE           EQU     $01
00140F 03F00F -> $0146                CANTFLG         EQU     $0146
00140F 03F00F -> $0004                TXE2            EQU     $04
00140F 03F00F -> $0002                TXE1            EQU     $02
00140F 03F00F -> $0001                TXE0            EQU     $01
00140F 03F00F -> $0147                CANTIER         EQU     $0147
00140F 03F00F -> $0004                TXEIE2          EQU     $04
00140F 03F00F -> $0002                TXEIE1          EQU     $02
00140F 03F00F -> $0001                TXEIE0          EQU     $01
00140F 03F00F -> $0148                CANTARQ         EQU     $0148
00140F 03F00F -> $0004                ABTRQ2          EQU     $04
00140F 03F00F -> $0002                ABTRQ1          EQU     $02
00140F 03F00F -> $0001                ABTRQ0          EQU     $01
00140F 03F00F -> $0149                CANTAAK         EQU     $0149
00140F 03F00F -> $0004                ABTAK2          EQU     $04
00140F 03F00F -> $0002                ABTAK1          EQU     $02
00140F 03F00F -> $0001                ABTAK0          EQU     $01
00140F 03F00F -> $014A                CANTBSEL        EQU     $014A
00140F 03F00F -> $0004                TX2             EQU     $04
00140F 03F00F -> $0002                TX1             EQU     $02
00140F 03F00F -> $0001                TX0             EQU     $01
00140F 03F00F -> $014B                CANIDAC         EQU     $014B
00140F 03F00F -> $0020                IDAM1           EQU     $20
00140F 03F00F -> $0010                IDAM0           EQU     $10
00140F 03F00F -> $0004                IDHIT2          EQU     $04
00140F 03F00F -> $0002                IDHIT1          EQU     $02
00140F 03F00F -> $0001                IDHIT0          EQU     $01
00140F 03F00F -> $014E                CANRXERR        EQU     $014E
00140F 03F00F -> $014F                CANTXERR        EQU     $014F
00140F 03F00F -> $0150                CANIDAR0        EQU     $0150
00140F 03F00F -> $0151                CANIDAR1        EQU     $0151
00140F 03F00F -> $0152                CANIDAR2        EQU     $0152
00140F 03F00F -> $0153                CANIDAR3        EQU     $0153
00140F 03F00F -> $0154                CANIDMR0        EQU     $0154
00140F 03F00F -> $0155                CANIDMR1        EQU     $0155
00140F 03F00F -> $0156                CANIDMR2        EQU     $0156
00140F 03F00F -> $0157                CANIDMR3        EQU     $0157
00140F 03F00F -> $0158                CANIDAR4        EQU     $0158
00140F 03F00F -> $0159                CANIDAR5        EQU     $0159
00140F 03F00F -> $015A                CANIDAR6        EQU     $015A
00140F 03F00F -> $015B                CANIDAR7        EQU     $015B
00140F 03F00F -> $015C                CANIDMR4        EQU     $015C
00140F 03F00F -> $015D                CANIDMR5        EQU     $015D
00140F 03F00F -> $015E                CANIDMR6        EQU     $015E
00140F 03F00F -> $015F                CANIDMR7        EQU     $015F
00140F 03F00F -> $0160                CANRXIDR0       EQU     $0160
00140F 03F00F -> $0161                CANRXIDR1       EQU     $0161
00140F 03F00F -> $0162                CANRXIDR2       EQU     $0162
00140F 03F00F -> $0163                CANRXIDR3       EQU     $0163
00140F 03F00F -> $0164                CANRXDSR0       EQU     $0164
00140F 03F00F -> $0165                CANRXDSR1       EQU     $0165
00140F 03F00F -> $0166                CANRXDSR2       EQU     $0166
00140F 03F00F -> $0167                CANRXDSR3       EQU     $0167
00140F 03F00F -> $0168                CANRXDSR4       EQU     $0168
00140F 03F00F -> $0169                CANRXDSR5       EQU     $0169
00140F 03F00F -> $016A                CANRXDSR6       EQU     $016A
00140F 03F00F -> $016B                CANRXDSR7       EQU     $016B
00140F 03F00F -> $016C                CANRXDLR        EQU     $016C
00140F 03F00F -> $016E                CANRTSRH        EQU     $016E
00140F 03F00F -> $016F                CANRTSRL        EQU     $016F
00140F 03F00F -> $0170                CANTXIDR0       EQU     $0170
00140F 03F00F -> $0171                CANTXIDR1       EQU     $0171
00140F 03F00F -> $0172                CANTXIDR2       EQU     $0172
00140F 03F00F -> $0173                CANTXIDR3       EQU     $0173
00140F 03F00F -> $0174                CANTXDSR0       EQU     $0174
00140F 03F00F -> $0175                CANTXDSR1       EQU     $0175
00140F 03F00F -> $0176                CANTXDSR2       EQU     $0176
00140F 03F00F -> $0177                CANTXDSR3       EQU     $0177
00140F 03F00F -> $0178                CANTXDSR4       EQU     $0178
00140F 03F00F -> $0179                CANTXDSR5       EQU     $0179
00140F 03F00F -> $017A                CANTXDSR6       EQU     $017A
00140F 03F00F -> $017B                CANTXDSR7       EQU     $017B
00140F 03F00F -> $017C                CANTXDLR        EQU     $017C
00140F 03F00F -> $017D                CANTXTBPR       EQU     $017D
00140F 03F00F -> $017E                CANTXTSRH       EQU     $017E
00140F 03F00F -> $017F                CANTXTSRL       EQU     $017F
00140F 03F00F -> $0240                PTT             EQU     $0240
00140F 03F00F -> $0080                PTT7            EQU     $80
00140F 03F00F -> $0040                PTT6            EQU     $40
00140F 03F00F -> $0020                PTT5            EQU     $20
00140F 03F00F -> $0010                PTT4            EQU     $10
00140F 03F00F -> $0008                PTT3            EQU     $08
00140F 03F00F -> $0004                PTT2            EQU     $04
00140F 03F00F -> $0002                PTT1            EQU     $02
00140F 03F00F -> $0001                PTT0            EQU     $01
00140F 03F00F -> $0080                PT7             EQU     $80
00140F 03F00F -> $0040                PT6             EQU     $40
00140F 03F00F -> $0020                PT5             EQU     $20
00140F 03F00F -> $0010                PT4             EQU     $10
00140F 03F00F -> $0008                PT3             EQU     $08
00140F 03F00F -> $0004                PT2             EQU     $04
00140F 03F00F -> $0002                PT1             EQU     $02
00140F 03F00F -> $0001                PT0             EQU     $01
00140F 03F00F -> $0241                PTIT            EQU     $0241
00140F 03F00F -> $0080                PTIT7           EQU     $80
00140F 03F00F -> $0040                PTIT6           EQU     $40
00140F 03F00F -> $0020                PTIT5           EQU     $20
00140F 03F00F -> $0010                PTIT4           EQU     $10
00140F 03F00F -> $0008                PTIT3           EQU     $08
00140F 03F00F -> $0004                PTIT2           EQU     $04
00140F 03F00F -> $0002                PTIT1           EQU     $02
00140F 03F00F -> $0001                PTIT0           EQU     $01
00140F 03F00F -> $0242                DDRT            EQU     $0242
00140F 03F00F -> $0080                DDRT7           EQU     $80
00140F 03F00F -> $0040                DDRT6           EQU     $40
00140F 03F00F -> $0020                DDRT5           EQU     $20
00140F 03F00F -> $0010                DDRT4           EQU     $10
00140F 03F00F -> $0008                DDRT3           EQU     $08
00140F 03F00F -> $0004                DDRT2           EQU     $04
00140F 03F00F -> $0002                DDRT1           EQU     $02
00140F 03F00F -> $0001                DDRT0           EQU     $01
00140F 03F00F -> $0244                PERT            EQU     $0244
00140F 03F00F -> $0080                PERT7           EQU     $80
00140F 03F00F -> $0040                PERT6           EQU     $40
00140F 03F00F -> $0020                PERT5           EQU     $20
00140F 03F00F -> $0010                PERT4           EQU     $10
00140F 03F00F -> $0008                PERT3           EQU     $08
00140F 03F00F -> $0004                PERT2           EQU     $04
00140F 03F00F -> $0002                PERT1           EQU     $02
00140F 03F00F -> $0001                PERT0           EQU     $01
00140F 03F00F -> $0245                PPST            EQU     $0245
00140F 03F00F -> $0080                PPST7           EQU     $80
00140F 03F00F -> $0040                PPST6           EQU     $40
00140F 03F00F -> $0020                PPST5           EQU     $20
00140F 03F00F -> $0010                PPST4           EQU     $10
00140F 03F00F -> $0008                PPST3           EQU     $08
00140F 03F00F -> $0004                PPST2           EQU     $04
00140F 03F00F -> $0002                PPST1           EQU     $02
00140F 03F00F -> $0001                PPST0           EQU     $01
00140F 03F00F -> $0248                PTS             EQU     $0248
00140F 03F00F -> $0080                PTS7            EQU     $80
00140F 03F00F -> $0040                PTS6            EQU     $40
00140F 03F00F -> $0020                PTS5            EQU     $20
00140F 03F00F -> $0010                PTS4            EQU     $10
00140F 03F00F -> $0008                PTS3            EQU     $08
00140F 03F00F -> $0004                PTS2            EQU     $04
00140F 03F00F -> $0002                PTS1            EQU     $02
00140F 03F00F -> $0001                PTS0            EQU     $01
00140F 03F00F -> $0080                PS7             EQU     $80
00140F 03F00F -> $0040                PS6             EQU     $40
00140F 03F00F -> $0020                PS5             EQU     $20
00140F 03F00F -> $0010                PS4             EQU     $10
00140F 03F00F -> $0008                PS3             EQU     $08
00140F 03F00F -> $0004                PS2             EQU     $04
00140F 03F00F -> $0002                PS1             EQU     $02
00140F 03F00F -> $0001                PS0             EQU     $01
00140F 03F00F -> $0249                PTIS            EQU     $0249
00140F 03F00F -> $0080                PTIS7           EQU     $80
00140F 03F00F -> $0040                PTIS6           EQU     $40
00140F 03F00F -> $0020                PTIS5           EQU     $20
00140F 03F00F -> $0010                PTIS4           EQU     $10
00140F 03F00F -> $0008                PTIS3           EQU     $08
00140F 03F00F -> $0004                PTIS2           EQU     $04
00140F 03F00F -> $0002                PTIS1           EQU     $02
00140F 03F00F -> $0001                PTIS0           EQU     $01
00140F 03F00F -> $024A                DDRS            EQU     $024A
00140F 03F00F -> $0080                DDRS7           EQU     $80
00140F 03F00F -> $0040                DDRS6           EQU     $40
00140F 03F00F -> $0020                DDRS5           EQU     $20
00140F 03F00F -> $0010                DDRS4           EQU     $10
00140F 03F00F -> $0008                DDRS3           EQU     $08
00140F 03F00F -> $0004                DDRS2           EQU     $04
00140F 03F00F -> $0002                DDRS1           EQU     $02
00140F 03F00F -> $0001                DDRS0           EQU     $01
00140F 03F00F -> $024C                PERS            EQU     $024C
00140F 03F00F -> $0080                PERS7           EQU     $80
00140F 03F00F -> $0040                PERS6           EQU     $40
00140F 03F00F -> $0020                PERS5           EQU     $20
00140F 03F00F -> $0010                PERS4           EQU     $10
00140F 03F00F -> $0008                PERS3           EQU     $08
00140F 03F00F -> $0004                PERS2           EQU     $04
00140F 03F00F -> $0002                PERS1           EQU     $02
00140F 03F00F -> $0001                PERS0           EQU     $01
00140F 03F00F -> $024D                PPSS            EQU     $024D
00140F 03F00F -> $0080                PPSS7           EQU     $80
00140F 03F00F -> $0040                PPSS6           EQU     $40
00140F 03F00F -> $0020                PPSS5           EQU     $20
00140F 03F00F -> $0010                PPSS4           EQU     $10
00140F 03F00F -> $0008                PPSS3           EQU     $08
00140F 03F00F -> $0004                PPSS2           EQU     $04
00140F 03F00F -> $0002                PPSS1           EQU     $02
00140F 03F00F -> $0001                PPSS0           EQU     $01
00140F 03F00F -> $024E                WOMS            EQU     $024E
00140F 03F00F -> $0080                WOMS7           EQU     $80
00140F 03F00F -> $0040                WOMS6           EQU     $40
00140F 03F00F -> $0020                WOMS5           EQU     $20
00140F 03F00F -> $0010                WOMS4           EQU     $10
00140F 03F00F -> $0008                WOMS3           EQU     $08
00140F 03F00F -> $0004                WOMS2           EQU     $04
00140F 03F00F -> $0002                WOMS1           EQU     $02
00140F 03F00F -> $0001                WOMS0           EQU     $01
00140F 03F00F -> $024F                PRR0            EQU     $024F
00140F 03F00F -> $0080                PRR0P3          EQU     $80
00140F 03F00F -> $0040                PRR0P2          EQU     $40
00140F 03F00F -> $0020                PRR0T31         EQU     $20
00140F 03F00F -> $0010                PRR0T30         EQU     $10
00140F 03F00F -> $0008                PRR0T21         EQU     $08
00140F 03F00F -> $0004                PRR0T20         EQU     $04
00140F 03F00F -> $0002                PRR0S1          EQU     $02
00140F 03F00F -> $0001                PRR0S0          EQU     $01
00140F 03F00F -> $0250                PTM             EQU     $0250
00140F 03F00F -> $0008                PTM3            EQU     $08
00140F 03F00F -> $0004                PTM2            EQU     $04
00140F 03F00F -> $0002                PTM1            EQU     $02
00140F 03F00F -> $0001                PTM0            EQU     $01
00140F 03F00F -> $0008                PM3             EQU     $08
00140F 03F00F -> $0004                PM2             EQU     $04
00140F 03F00F -> $0002                PM1             EQU     $02
00140F 03F00F -> $0001                PM0             EQU     $01
00140F 03F00F -> $0251                PTIM            EQU     $0251
00140F 03F00F -> $0008                PTIM3           EQU     $08
00140F 03F00F -> $0004                PTIM2           EQU     $04
00140F 03F00F -> $0002                PTIM1           EQU     $02
00140F 03F00F -> $0001                PTIM0           EQU     $01
00140F 03F00F -> $0252                DDRM            EQU     $0252
00140F 03F00F -> $0008                DDRM3           EQU     $08
00140F 03F00F -> $0004                DDRM2           EQU     $04
00140F 03F00F -> $0002                DDRM1           EQU     $02
00140F 03F00F -> $0001                DDRM0           EQU     $01
00140F 03F00F -> $0254                PERM            EQU     $0254
00140F 03F00F -> $0008                PERM3           EQU     $08
00140F 03F00F -> $0004                PERM2           EQU     $04
00140F 03F00F -> $0002                PERM1           EQU     $02
00140F 03F00F -> $0001                PERM0           EQU     $01
00140F 03F00F -> $0255                PPSM            EQU     $0255
00140F 03F00F -> $0008                PPSM3           EQU     $08
00140F 03F00F -> $0004                PPSM2           EQU     $04
00140F 03F00F -> $0002                PPSM1           EQU     $02
00140F 03F00F -> $0001                PPSM0           EQU     $01
00140F 03F00F -> $0256                WOMM            EQU     $0256
00140F 03F00F -> $0008                WOMM3           EQU     $08
00140F 03F00F -> $0004                WOMM2           EQU     $04
00140F 03F00F -> $0002                WOMM1           EQU     $02
00140F 03F00F -> $0001                WOMM0           EQU     $01
00140F 03F00F -> $0257                PKGCR           EQU     $0257
00140F 03F00F -> $0080                APICLKS7        EQU     $80
00140F 03F00F -> $0004                PKGCR2          EQU     $04
00140F 03F00F -> $0002                PKGCR1          EQU     $02
00140F 03F00F -> $0001                PKGCR0          EQU     $01
00140F 03F00F -> $0258                PTP             EQU     $0258
00140F 03F00F -> $0080                PTP7            EQU     $80
00140F 03F00F -> $0040                PTP6            EQU     $40
00140F 03F00F -> $0020                PTP5            EQU     $20
00140F 03F00F -> $0010                PTP4            EQU     $10
00140F 03F00F -> $0008                PTP3            EQU     $08
00140F 03F00F -> $0004                PTP2            EQU     $04
00140F 03F00F -> $0002                PTP1            EQU     $02
00140F 03F00F -> $0001                PTP0            EQU     $01
00140F 03F00F -> $0080                PP7             EQU     $80
00140F 03F00F -> $0040                PP6             EQU     $40
00140F 03F00F -> $0020                PP5             EQU     $20
00140F 03F00F -> $0010                PP4             EQU     $10
00140F 03F00F -> $0008                PP3             EQU     $08
00140F 03F00F -> $0004                PP2             EQU     $04
00140F 03F00F -> $0002                PP1             EQU     $02
00140F 03F00F -> $0001                PP0             EQU     $01
00140F 03F00F -> $0259                PTIP            EQU     $0259
00140F 03F00F -> $0080                PTIP7           EQU     $80
00140F 03F00F -> $0040                PTIP6           EQU     $40
00140F 03F00F -> $0020                PTIP5           EQU     $20
00140F 03F00F -> $0010                PTIP4           EQU     $10
00140F 03F00F -> $0008                PTIP3           EQU     $08
00140F 03F00F -> $0004                PTIP2           EQU     $04
00140F 03F00F -> $0002                PTIP1           EQU     $02
00140F 03F00F -> $0001                PTIP0           EQU     $01
00140F 03F00F -> $025A                DDRP            EQU     $025A
00140F 03F00F -> $0080                DDRP7           EQU     $80
00140F 03F00F -> $0040                DDRP6           EQU     $40
00140F 03F00F -> $0020                DDRP5           EQU     $20
00140F 03F00F -> $0010                DDRP4           EQU     $10
00140F 03F00F -> $0008                DDRP3           EQU     $08
00140F 03F00F -> $0004                DDRP2           EQU     $04
00140F 03F00F -> $0002                DDRP1           EQU     $02
00140F 03F00F -> $0001                DDRP0           EQU     $01
00140F 03F00F -> $025C                PERP            EQU     $025C
00140F 03F00F -> $0080                PERP7           EQU     $80
00140F 03F00F -> $0040                PERP6           EQU     $40
00140F 03F00F -> $0020                PERP5           EQU     $20
00140F 03F00F -> $0010                PERP4           EQU     $10
00140F 03F00F -> $0008                PERP3           EQU     $08
00140F 03F00F -> $0004                PERP2           EQU     $04
00140F 03F00F -> $0002                PERP1           EQU     $02
00140F 03F00F -> $0001                PERP0           EQU     $01
00140F 03F00F -> $025D                PPSP            EQU     $025D
00140F 03F00F -> $0080                PPSP7           EQU     $80
00140F 03F00F -> $0040                PPSP6           EQU     $40
00140F 03F00F -> $0020                PPSP5           EQU     $20
00140F 03F00F -> $0010                PPSP4           EQU     $10
00140F 03F00F -> $0008                PPSP3           EQU     $08
00140F 03F00F -> $0004                PPSP2           EQU     $04
00140F 03F00F -> $0002                PPSP1           EQU     $02
00140F 03F00F -> $0001                PPSP0           EQU     $01
00140F 03F00F -> $025E                PIEP            EQU     $025E
00140F 03F00F -> $0080                PIEP7           EQU     $80
00140F 03F00F -> $0040                PIEP6           EQU     $40
00140F 03F00F -> $0020                PIEP5           EQU     $20
00140F 03F00F -> $0010                PIEP4           EQU     $10
00140F 03F00F -> $0008                PIEP3           EQU     $08
00140F 03F00F -> $0004                PIEP2           EQU     $04
00140F 03F00F -> $0002                PIEP1           EQU     $02
00140F 03F00F -> $0001                PIEP0           EQU     $01
00140F 03F00F -> $025F                PIFP            EQU     $025F
00140F 03F00F -> $0080                PIFP7           EQU     $80
00140F 03F00F -> $0040                PIFP6           EQU     $40
00140F 03F00F -> $0020                PIFP5           EQU     $20
00140F 03F00F -> $0010                PIFP4           EQU     $10
00140F 03F00F -> $0008                PIFP3           EQU     $08
00140F 03F00F -> $0004                PIFP2           EQU     $04
00140F 03F00F -> $0002                PIFP1           EQU     $02
00140F 03F00F -> $0001                PIFP0           EQU     $01
00140F 03F00F -> $0260                ACMPC           EQU     $260
00140F 03F00F -> $0080                ACIE            EQU     $80
00140F 03F00F -> $0040                ACOPE           EQU     $40
00140F 03F00F -> $0020                ACICE           EQU     $20
00140F 03F00F -> $0008                ACMOD1          EQU     $08
00140F 03F00F -> $0004                ACMOD0          EQU     $04
00140F 03F00F -> $0001                ACE             EQU     $01
00140F 03F00F -> $0261                ACMPS           EQU     $261
00140F 03F00F -> $0080                ACIF            EQU     $80
00140F 03F00F -> $0040                ACO             EQU     $40
00140F 03F00F -> $0268                PTJ             EQU     $0268
00140F 03F00F -> $0080                PTJ7            EQU     $80
00140F 03F00F -> $0040                PTJ6            EQU     $40
00140F 03F00F -> $0020                PTJ5            EQU     $20
00140F 03F00F -> $0010                PTJ4            EQU     $10
00140F 03F00F -> $0008                PTJ3            EQU     $08
00140F 03F00F -> $0004                PTJ2            EQU     $04
00140F 03F00F -> $0002                PTJ1            EQU     $02
00140F 03F00F -> $0001                PTJ0            EQU     $01
00140F 03F00F -> $0080                PJ7             EQU     $80
00140F 03F00F -> $0040                PJ6             EQU     $40
00140F 03F00F -> $0020                PJ5             EQU     $20
00140F 03F00F -> $0010                PJ4             EQU     $10
00140F 03F00F -> $0008                PJ3             EQU     $08
00140F 03F00F -> $0004                PJ2             EQU     $04
00140F 03F00F -> $0002                PJ1             EQU     $02
00140F 03F00F -> $0001                PJ0             EQU     $01
00140F 03F00F -> $0269                PTIJ            EQU     $0269
00140F 03F00F -> $0080                PTIJ7           EQU     $80
00140F 03F00F -> $0040                PTIJ6           EQU     $40
00140F 03F00F -> $0020                PTIJ5           EQU     $20
00140F 03F00F -> $0010                PTIJ4           EQU     $10
00140F 03F00F -> $0008                PTIJ3           EQU     $08
00140F 03F00F -> $0004                PTIJ2           EQU     $04
00140F 03F00F -> $0002                PTIJ1           EQU     $02
00140F 03F00F -> $0001                PTIJ0           EQU     $01
00140F 03F00F -> $026A                DDRJ            EQU     $026A
00140F 03F00F -> $0080                DDRJ7           EQU     $80
00140F 03F00F -> $0040                DDRJ6           EQU     $40
00140F 03F00F -> $0020                DDRJ5           EQU     $20
00140F 03F00F -> $0010                DDRJ4           EQU     $10
00140F 03F00F -> $0008                DDRJ3           EQU     $08
00140F 03F00F -> $0004                DDRJ2           EQU     $04
00140F 03F00F -> $0002                DDRJ1           EQU     $02
00140F 03F00F -> $0001                DDRJ0           EQU     $01
00140F 03F00F -> $026C                PERJ            EQU     $026C
00140F 03F00F -> $0080                PERJ7           EQU     $80
00140F 03F00F -> $0040                PERJ6           EQU     $40
00140F 03F00F -> $0020                PERJ5           EQU     $20
00140F 03F00F -> $0010                PERJ4           EQU     $10
00140F 03F00F -> $0008                PERJ3           EQU     $08
00140F 03F00F -> $0004                PERJ2           EQU     $04
00140F 03F00F -> $0002                PERJ1           EQU     $02
00140F 03F00F -> $0001                PERJ0           EQU     $01
00140F 03F00F -> $026D                PPSJ            EQU     $026D
00140F 03F00F -> $0080                PPSJ7           EQU     $80
00140F 03F00F -> $0040                PPSJ6           EQU     $40
00140F 03F00F -> $0020                PPSJ5           EQU     $20
00140F 03F00F -> $0010                PPSJ4           EQU     $10
00140F 03F00F -> $0008                PPSJ3           EQU     $08
00140F 03F00F -> $0004                PPSJ2           EQU     $04
00140F 03F00F -> $0002                PPSJ1           EQU     $02
00140F 03F00F -> $0001                PPSJ0           EQU     $01
00140F 03F00F -> $026E                PIEJ            EQU     $026E
00140F 03F00F -> $0080                PIEJ7           EQU     $80
00140F 03F00F -> $0040                PIEJ6           EQU     $40
00140F 03F00F -> $0020                PIEJ5           EQU     $20
00140F 03F00F -> $0010                PIEJ4           EQU     $10
00140F 03F00F -> $0008                PIEJ3           EQU     $08
00140F 03F00F -> $0004                PIEJ2           EQU     $04
00140F 03F00F -> $0002                PIEJ1           EQU     $02
00140F 03F00F -> $0001                PIEJ0           EQU     $01
00140F 03F00F -> $026F                PIFJ            EQU     $026F
00140F 03F00F -> $0080                PIFJ7           EQU     $80
00140F 03F00F -> $0040                PIFJ6           EQU     $40
00140F 03F00F -> $0020                PIFJ5           EQU     $20
00140F 03F00F -> $0010                PIFJ4           EQU     $10
00140F 03F00F -> $0008                PIFJ3           EQU     $08
00140F 03F00F -> $0004                PIFJ2           EQU     $04
00140F 03F00F -> $0002                PIFJ1           EQU     $02
00140F 03F00F -> $0001                PIFJ0           EQU     $01
00140F 03F00F -> $0270                PT0AD           EQU     $0270
00140F 03F00F -> $0080                PT0AD7          EQU     $80
00140F 03F00F -> $0040                PT0AD6          EQU     $40
00140F 03F00F -> $0020                PT0AD5          EQU     $20
00140F 03F00F -> $0010                PT0AD4          EQU     $10
00140F 03F00F -> $0008                PT0AD3          EQU     $08
00140F 03F00F -> $0004                PT0AD2          EQU     $04
00140F 03F00F -> $0002                PT0AD1          EQU     $02
00140F 03F00F -> $0001                PT0AD0          EQU     $01
00140F 03F00F -> $0271                PT1AD           EQU     $0271
00140F 03F00F -> $0080                PT1AD7          EQU     $80
00140F 03F00F -> $0040                PT1AD6          EQU     $40
00140F 03F00F -> $0020                PT1AD5          EQU     $20
00140F 03F00F -> $0010                PT1AD4          EQU     $10
00140F 03F00F -> $0008                PT1AD3          EQU     $08
00140F 03F00F -> $0004                PT1AD2          EQU     $04
00140F 03F00F -> $0002                PT1AD1          EQU     $02
00140F 03F00F -> $0001                PT1AD0          EQU     $01
00140F 03F00F -> $0272                PTI0AD          EQU     $0272
00140F 03F00F -> $0080                PTI0AD7         EQU     $80
00140F 03F00F -> $0040                PTI0AD6         EQU     $40
00140F 03F00F -> $0020                PTI0AD5         EQU     $20
00140F 03F00F -> $0010                PTI0AD4         EQU     $10
00140F 03F00F -> $0008                PTI0AD3         EQU     $08
00140F 03F00F -> $0004                PTI0AD2         EQU     $04
00140F 03F00F -> $0002                PTI0AD1         EQU     $02
00140F 03F00F -> $0001                PTI0AD0         EQU     $01
00140F 03F00F -> $0273                PTI1AD          EQU     $0273
00140F 03F00F -> $0080                PTI1AD7         EQU     $80
00140F 03F00F -> $0040                PTI1AD6         EQU     $40
00140F 03F00F -> $0020                PTI1AD5         EQU     $20
00140F 03F00F -> $0010                PTI1AD4         EQU     $10
00140F 03F00F -> $0008                PTI1AD3         EQU     $08
00140F 03F00F -> $0004                PTI1AD2         EQU     $04
00140F 03F00F -> $0002                PTI1AD1         EQU     $02
00140F 03F00F -> $0001                PTI1AD0         EQU     $01
00140F 03F00F -> $0274                DDR0AD          EQU     $0274
00140F 03F00F -> $0080                DDR0AD7         EQU     $80
00140F 03F00F -> $0040                DDR0AD6         EQU     $40
00140F 03F00F -> $0020                DDR0AD5         EQU     $20
00140F 03F00F -> $0010                DDR0AD4         EQU     $10
00140F 03F00F -> $0008                DDR0AD3         EQU     $08
00140F 03F00F -> $0004                DDR0AD2         EQU     $04
00140F 03F00F -> $0002                DDR0AD1         EQU     $02
00140F 03F00F -> $0001                DDR0AD0         EQU     $01
00140F 03F00F -> $0275                DDR1AD          EQU     $0275
00140F 03F00F -> $0080                DDR1AD7         EQU     $80
00140F 03F00F -> $0040                DDR1AD6         EQU     $40
00140F 03F00F -> $0020                DDR1AD5         EQU     $20
00140F 03F00F -> $0010                DDR1AD4         EQU     $10
00140F 03F00F -> $0008                DDR1AD3         EQU     $08
00140F 03F00F -> $0004                DDR1AD2         EQU     $04
00140F 03F00F -> $0002                DDR1AD1         EQU     $02
00140F 03F00F -> $0001                DDR1AD0         EQU     $01
00140F 03F00F -> $0276                RVACTL          EQU     $0276
00140F 03F00F -> $0001                RVAON           EQU     $01
00140F 03F00F -> $0277                PRR1            EQU     $0277
00140F 03F00F -> $0001                PRR1AN          EQU     $01
00140F 03F00F -> $0278                PER0AD          EQU     $0278
00140F 03F00F -> $0080                PER0AD7         EQU     $80
00140F 03F00F -> $0040                PER0AD6         EQU     $40
00140F 03F00F -> $0020                PER0AD5         EQU     $20
00140F 03F00F -> $0010                PER0AD4         EQU     $10
00140F 03F00F -> $0008                PER0AD3         EQU     $08
00140F 03F00F -> $0004                PER0AD2         EQU     $04
00140F 03F00F -> $0002                PER0AD1         EQU     $02
00140F 03F00F -> $0001                PER0AD0         EQU     $01
00140F 03F00F -> $0279                PER1AD          EQU     $0279
00140F 03F00F -> $0080                PER1AD7         EQU     $80
00140F 03F00F -> $0040                PER1AD6         EQU     $40
00140F 03F00F -> $0020                PER1AD5         EQU     $20
00140F 03F00F -> $0010                PER1AD4         EQU     $10
00140F 03F00F -> $0008                PER1AD3         EQU     $08
00140F 03F00F -> $0004                PER1AD2         EQU     $04
00140F 03F00F -> $0002                PER1AD1         EQU     $02
00140F 03F00F -> $0001                PER1AD0         EQU     $01
00140F 03F00F -> $027A                PPS0AD          EQU     $027A
00140F 03F00F -> $0080                PPS0AD7         EQU     $80
00140F 03F00F -> $0040                PPS0AD6         EQU     $40
00140F 03F00F -> $0020                PPS0AD5         EQU     $20
00140F 03F00F -> $0010                PPS0AD4         EQU     $10
00140F 03F00F -> $0008                PPS0AD3         EQU     $08
00140F 03F00F -> $0004                PPS0AD2         EQU     $04
00140F 03F00F -> $0002                PPS0AD1         EQU     $02
00140F 03F00F -> $0001                PPS0AD0         EQU     $01
00140F 03F00F -> $027B                PPS1AD          EQU     $027B
00140F 03F00F -> $0080                PPS1AD7         EQU     $80
00140F 03F00F -> $0040                PPS1AD6         EQU     $40
00140F 03F00F -> $0020                PPS1AD5         EQU     $20
00140F 03F00F -> $0010                PPS1AD4         EQU     $10
00140F 03F00F -> $0008                PPS1AD3         EQU     $08
00140F 03F00F -> $0004                PPS1AD2         EQU     $04
00140F 03F00F -> $0002                PPS1AD1         EQU     $02
00140F 03F00F -> $0001                PPS1AD0         EQU     $01
00140F 03F00F -> $027C                PIE0AD          EQU     $027C
00140F 03F00F -> $0080                PIE0AD7         EQU     $80
00140F 03F00F -> $0040                PIE0AD6         EQU     $40
00140F 03F00F -> $0020                PIE0AD5         EQU     $20
00140F 03F00F -> $0010                PIE0AD4         EQU     $10
00140F 03F00F -> $0008                PIE0AD3         EQU     $08
00140F 03F00F -> $0004                PIE0AD2         EQU     $04
00140F 03F00F -> $0002                PIE0AD1         EQU     $02
00140F 03F00F -> $0001                PIE0AD0         EQU     $01
00140F 03F00F -> $027D                PIE1AD          EQU     $027D
00140F 03F00F -> $0080                PIE1AD7         EQU     $80
00140F 03F00F -> $0040                PIE1AD6         EQU     $40
00140F 03F00F -> $0020                PIE1AD5         EQU     $20
00140F 03F00F -> $0010                PIE1AD4         EQU     $10
00140F 03F00F -> $0008                PIE1AD3         EQU     $08
00140F 03F00F -> $0004                PIE1AD2         EQU     $04
00140F 03F00F -> $0002                PIE1AD1         EQU     $02
00140F 03F00F -> $0001                PIE1AD0         EQU     $01
00140F 03F00F -> $027E                PIF0AD          EQU     $027E
00140F 03F00F -> $0080                PIF0AD7         EQU     $80
00140F 03F00F -> $0040                PIF0AD6         EQU     $40
00140F 03F00F -> $0020                PIF0AD5         EQU     $20
00140F 03F00F -> $0010                PIF0AD4         EQU     $10
00140F 03F00F -> $0008                PIF0AD3         EQU     $08
00140F 03F00F -> $0004                PIF0AD2         EQU     $04
00140F 03F00F -> $0002                PIF0AD1         EQU     $02
00140F 03F00F -> $0001                PIF0AD0         EQU     $01
00140F 03F00F -> $027F                PIF1AD          EQU     $027F
00140F 03F00F -> $0080                PIF1AD7         EQU     $80
00140F 03F00F -> $0040                PIF1AD6         EQU     $40
00140F 03F00F -> $0020                PIF1AD5         EQU     $20
00140F 03F00F -> $0010                PIF1AD4         EQU     $10
00140F 03F00F -> $0008                PIF1AD3         EQU     $08
00140F 03F00F -> $0004                PIF1AD2         EQU     $04
00140F 03F00F -> $0002                PIF1AD1         EQU     $02
00140F 03F00F -> $0001                PIF1AD0         EQU     $01
00140F 03F00F -> $02F1                CPMULVCTL       EQU     $02F1
00140F 03F00F -> $0004                LVDS            EQU     $04
00140F 03F00F -> $0002                LVIE            EQU     $02
00140F 03F00F -> $0001                LVIF            EQU     $01
00140F 03F00F -> $02F2                CPMUAPICTL      EQU     $02F2
00140F 03F00F -> $0080                APICLK          EQU     $80
00140F 03F00F -> $0010                APIES           EQU     $10
00140F 03F00F -> $0008                APIEA           EQU     $08
00140F 03F00F -> $0004                APIFE           EQU     $04
00140F 03F00F -> $0002                APIE            EQU     $02
00140F 03F00F -> $0001                APIF            EQU     $01
00140F 03F00F -> $02F3                CPMUAPITR       EQU     $02F3
00140F 03F00F -> $0080                APITR5          EQU     $80
00140F 03F00F -> $0040                APITR4          EQU     $40
00140F 03F00F -> $0020                APITR3          EQU     $20
00140F 03F00F -> $0010                APITR2          EQU     $10
00140F 03F00F -> $0008                APITR1          EQU     $08
00140F 03F00F -> $0004                APITR0          EQU     $04
00140F 03F00F -> $02F4                CPMUAPIRH       EQU     $02F4
00140F 03F00F -> $0080                APIR15          EQU     $80
00140F 03F00F -> $0040                APIR14          EQU     $40
00140F 03F00F -> $0020                APIR13          EQU     $20
00140F 03F00F -> $0010                APIR12          EQU     $10
00140F 03F00F -> $0008                APIR11          EQU     $08
00140F 03F00F -> $0004                APIR10          EQU     $04
00140F 03F00F -> $0002                APIR9           EQU     $02
00140F 03F00F -> $0001                APIR8           EQU     $01
00140F 03F00F -> $02F5                CPMUAPIRL       EQU     $02F5
00140F 03F00F -> $0080                APIR7           EQU     $80
00140F 03F00F -> $0040                APIR6           EQU     $40
00140F 03F00F -> $0020                APIR5           EQU     $20
00140F 03F00F -> $0010                APIR4           EQU     $10
00140F 03F00F -> $0008                APIR3           EQU     $08
00140F 03F00F -> $0004                APIR2           EQU     $04
00140F 03F00F -> $0002                APIR1           EQU     $02
00140F 03F00F -> $0001                APIR0           EQU     $01
00140F 03F00F -> $02F8                CPMUIRCTRIMH    EQU     $02F8
00140F 03F00F -> $0080                TCTRIM3         EQU     $80
00140F 03F00F -> $0040                TCTRIM2         EQU     $40
00140F 03F00F -> $0020                TCTRIM1         EQU     $20
00140F 03F00F -> $0010                TCTRIM0         EQU     $10
00140F 03F00F -> $0002                IRCTRIM9        EQU     $02
00140F 03F00F -> $0001                IRCTRIM8        EQU     $01
00140F 03F00F -> $02F9                CPMUIRCTRIML    EQU     $02F9
00140F 03F00F -> $0080                IRCTRIM7        EQU     $80
00140F 03F00F -> $0040                IRCTRIM6        EQU     $40
00140F 03F00F -> $0020                IRCTRIM5        EQU     $20
00140F 03F00F -> $0010                IRCTRIM4        EQU     $10
00140F 03F00F -> $0008                IRCTRIM3        EQU     $08
00140F 03F00F -> $0004                IRCTRIM2        EQU     $04
00140F 03F00F -> $0002                IRCTRIM1        EQU     $02
00140F 03F00F -> $0001                IRCTRIM0        EQU     $01
00140F 03F00F -> $02FA                CPMUOSC         EQU     $02FA
00140F 03F00F -> $0080                OSCE            EQU     $80
00140F 03F00F -> $0020                OSCPINS_EN      EQU     $20
00140F 03F00F -> $02FB                CPMUPROT        EQU     $02FB
00140F 03F00F -> $0001                PROT            EQU     $01
00140F 03F00F -> $03C0                DAC0CTL         EQU     $03C0
00140F 03F00F -> $0080                FVR             EQU     $80
00140F 03F00F -> $0040                DRIVE           EQU     $40
00140F 03F00F -> $0004                MODE2           EQU     $04
00140F 03F00F -> $0002                MODE1           EQU     $02
00140F 03F00F -> $0001                MODE0           EQU     $01
00140F 03F00F -> $03C2                DAC0VOLTAGE     EQU     $03C2
00140F 03F00F -> $0080                VOLTAGE7        EQU     $80
00140F 03F00F -> $0040                VOLTAGE6        EQU     $40
00140F 03F00F -> $0020                VOLTAGE5        EQU     $20
00140F 03F00F -> $0010                VOLTAGE4        EQU     $10
00140F 03F00F -> $0008                VOLTAGE3        EQU     $08
00140F 03F00F -> $0004                VOLTAGE2        EQU     $04
00140F 03F00F -> $0002                VOLTAGE1        EQU     $02
00140F 03F00F -> $0001                VOLTAGE0        EQU     $01
00140F 03F00F -> $03C8                DAC1CTL         EQU     $03C8
00140F 03F00F -> $03CA                DAC1VOLTAGE     EQU     $03CA
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;# MCU (S12G32, S12G64, S12G128, or S12G240)
00140F 03F00F -> $0001                MMAP_S12G240            EQU     1       ;default is S12G240
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;# Memory Sizes:
00140F 03F00F -> $0400                MMAP_REG_SIZE           EQU      $0400  ;  1k
00140F 03F00F -> $1000                MMAP_EEPROM_SIZE        EQU      $1000  ;  4k
00140F 03F00F -> $2C00                MMAP_RAM_SIZE           EQU      $2C00  ; 11k
00140F 03F00F -> $3C000               MMAP_FLASH_SIZE         EQU     $3C000  ;240k
                                      ;# Memory Locations
00140F 03F00F -> $0000                MMAP_REG_START          EQU     $0000
00140F 03F00F -> $0400                MMAP_REG_END            EQU     $0400
00140F 03F00F -> $0000                MMAP_REG_START_LIN      EQU     MMAP_REG_START
00140F 03F00F -> $0400                MMAP_REG_END_LIN        EQU     MMAP_REG_END
00140F 03F00F -> $0400                MMAP_EEPROM_START       EQU     $0400
00140F 03F00F -> $1400                MMAP_EEPROM_END         EQU     $0400+MMAP_EEPROM_SIZE
00140F 03F00F -> $0400                MMAP_EEPROM_START_LIN   EQU     MMAP_EEPROM_START
00140F 03F00F -> $1400                MMAP_EEPROM_END_LIN     EQU     MMAP_EEPROM_END
00140F 03F00F -> $1400                MMAP_RAM_START          EQU     $4000-MMAP_RAM_SIZE
00140F 03F00F -> $4000                MMAP_RAM_END            EQU     $4000
00140F 03F00F -> $1400                MMAP_RAM_START_LIN      EQU     MMAP_RAM_START
00140F 03F00F -> $4000                MMAP_RAM_END_LIN        EQU     MMAP_RAM_END
00140F 03F00F -> $8000                MMAP_FLASHWIN_START     EQU     $8000
00140F 03F00F -> $C000                MMAP_FLASHWIN_END       EQU     $C000
00140F 03F00F -> $1400                MMAP_FLASH_C_START      EQU     MMAP_EEPROM_END
00140F 03F00F -> $1400                MMAP_FLASH_C_END        EQU     MMAP_RAM_START
00140F 03F00F -> $31400               MMAP_FLASH_C_START_LIN  EQU     $3_0000+MMAP_FLASH_C_START
00140F 03F00F -> $31400               MMAP_FLASH_C_END_LIN    EQU     $3_0000+MMAP_FLASH_C_END
00140F 03F00F -> $4000                MMAP_FLASH_D_START      EQU     $4000
00140F 03F00F -> $8000                MMAP_FLASH_D_END        EQU     $8000
00140F 03F00F -> $34000               MMAP_FLASH_D_START_LIN  EQU     $3_4000
00140F 03F00F -> $38000               MMAP_FLASH_D_END_LIN    EQU     $3_8000
00140F 03F00F -> $C000                MMAP_FLASH_F_START      EQU     $C000
00140F 03F00F -> $10000               MMAP_FLASH_F_END        EQU     $1_0000
00140F 03F00F -> $3C000               MMAP_FLASH_F_START_LIN  EQU     $3_C000
00140F 03F00F -> $40000               MMAP_FLASH_F_END_LIN    EQU     $4_0000
                                      ;# Bootloader
00140F 03F00F -> $F000                BOOTLOADER_START        EQU     MMAP_FLASH_F_END-BOOTLOADER_SIZE
00140F 03F00F -> $3F000               BOOTLOADER_START_LIN    EQU     MMAP_FLASH_F_END_LIN-BOOTLOADER_SIZE
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     MMAP_VARS_START, MMAP_VARS_START_LIN
001994 001994 -> $1994                MMAP_VARS_END           EQU     *
001994 001994 -> $1994                MMAP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F7A7 03F7A7                                                 ORG     MMAP_CODE_START, MMAP_CODE_START_LIN
00F7A7 03F7A7 -> $F7A7                MMAP_CODE_END           EQU     *
00F7A7 03F7A7 -> $3F7A7               MMAP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F94B 03F94B                                                 ORG     MMAP_TABS_START, MMAP_TABS_START_LIN
00F94B 03F94B -> $F94B                MMAP_TABS_END           EQU     *
00F94B 03F94B -> $3F94B               MMAP_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
001994 001994 -> $1994                GPIO_VARS_END           EQU     *
001994 001994 -> $1994                GPIO_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F7A7 03F7A7                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
00F7A7 03F7A7 -> $F7A7                GPIO_CODE_END           EQU     *
00F7A7 03F7A7 -> $3F7A7               GPIO_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F94B 03F94B                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
00F94B 03F94B -> $F94B                GPIO_TABS_END           EQU     *
00F94B 03F94B -> $3F94B               GPIO_TABS_END_LIN       EQU     @
                                      ;#Baud rate
00F94B 03F94B -> $B71B00              DISP_BAUD               EQU     12000000        ;default is 12 Mbit/s
                                      ;#RESET output
00F94B 03F94B -> $0248                DISP_RESET_PORT         EQU     PTS             ;default is port S
00F94B 03F94B -> $0008                DISP_RESET_PIN          EQU     PS3             ;default is PS3
                                      ;#A0 output
00F94B 03F94B -> $0248                DISP_A0_PORT            EQU     PTS             ;default is port S
00F94B 03F94B -> $0010                DISP_A0_PIN             EQU     PS4             ;default is PS4
                                      ;#Buffer size
00F94B 03F94B -> $0010                DISP_BUF_SIZE           EQU     16              ;depth of the command buffer
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Baud rate divider
00F94B 03F94B -> $0000                DISP_SPPR               EQU     ((CLOCK_BUS_FREQ/(2*DISP_BAUD))-1)&7
00F94B 03F94B -> $0000                DISP_SPR                EQU     0
                                      ;#SPI configuration
00F94B 03F94B -> $001E                DISP_SPICR1_CONFIG      EQU     %00011110       ;only SPE and SPTIE will be modified
                                                                      ;SSSMCCSL
                                                                      ;PPPSPPSS
                                                                      ;IETTOHOB
                                                                      ;E IRLAEF
                                                                      ;  E    E
00F94B 03F94B -> $0019                DISP_SPICR2_CONFIG      EQU     %00011001
                                                                      ; X MB SS
                                                                      ; F OI PP
                                                                      ; R DD IC
                                                                      ; W FI S0
                                                                      ;   ER W
                                                                      ;   NO A
                                                                      ;    E I
00F94B 03F94B -> $0000                DISP_SPIBR_CONFIG       EQU     ((DISP_SPPR<<4|(DISP_SPR)))
                                      ;#Escape sequences
00F94B 03F94B -> $00E3                DISP_ESC_START          EQU     $E3             ;start of eccape sequence (NOP)
00F94B 03F94B -> $00FF                DISP_ESC_ESC            EQU     $FF             ;transmit escape character
00F94B 03F94B -> $00FE                DISP_ESC_CMD            EQU     $FE             ;switch to command mode
00F94B 03F94B -> $00FD                DISP_ESC_DATA           EQU     $FD             ;switch to data mode
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
0019E2 0019E2                                                 ORG     DISP_VARS_START, DISP_VARS_START_LIN
0019E2 0019E2 -> $19E2                DISP_AUTO_LOC1          EQU     *               ;1st auto-place location
0019E2 0019E2                                                 ALIGN   1
                                      ;#Command buffer
0019E2 0019E2                         DISP_BUF                DS      DISP_BUF_SIZE
0019F2 0019F2                         DISP_BUF_IN             DS      1               ;points to the next free space
0019F3 0019F3                         DISP_BUF_OUT            DS      1               ;points to the oldest entry
0019F4 0019F4 -> $19F4                DISP_AUTO_LOC2          EQU     *               ;2nd auto-place location
0019F4 0019F4                                                 UNALIGN ((~DISP_AUTO_LOC1)&1)
                                      ;#Repeat counter (0=no repeat, $FF=handle escape character)
0019F5 0019F5 -> $19F4                DISP_RPTCNT             EQU     ((DISP_AUTO_LOC1&1)*DISP_AUTO_LOC1)+((~(DISP_AUTO_LOC1)&1)*DISP_AUTO_LOC2)
0019F5 0019F5 -> $19F5                DISP_VARS_END           EQU     *
0019F5 0019F5 -> $19F5                DISP_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F7B9 03F7B9                                                 ORG     DISP_CODE_START, DISP_CODE_START_LIN
                                      ;# Essential functions
                                      ;---------------------
                                      ;#Transmit commands and data (non-blocking)
                                      ; args:   B: buffer entry
                                      ; result: C: 1 = successful, 0=buffer full
                                      ; SSTACK: 5 bytes
                                      ;         X, Y and D are preserved
00F7B9 03F7B9 -> $F7B9                DISP_TX_NB              EQU     *
                                                              ;Save registers (buffer entry in B)
00F7B9 03F7B9 34                                              PSHX                                                    ;push index X onto the SSTACK
00F7BA 03F7BA 36                                              PSHA                                                    ;push accu A onto the SSTACK
                                                              ;Store buffer entry (buffer entry in B)
00F7BB 03F7BB CE 19 E2                                        LDX     #DISP_BUF                                       ;buffer address->X
00F7BE 03F7BE B6 19 F2                                        LDAA    DISP_BUF_IN
00F7C1 03F7C1 6B E4                                           STAB    A,X                                             ;write data into buffer
00F7C3 03F7C3 42                                              INCA                                                    ;advance IN index
00F7C4 03F7C4 84 0F                                           ANDA    #(DISP_BUF_SIZE-1)                              ;buffer usage->A
00F7C6 03F7C6 B1 19 F3                                        CMPA    DISP_BUF_OUT                                    ;check if the buffer is full
00F7C9 03F7C9 27 0D                                           BEQ     DISP_TX_NB_2                                    ;buffer is full
00F7CB 03F7CB 7A 19 F2                                        STAA    DISP_BUF_IN
                                                              ;Enable SPI transmit interrupt
00F7CE 03F7CE 18 0B 7E 00 D8                                  MOVB    #(SPE|SPTIE|DISP_SPICR1_CONFIG), SPICR1
                                                              ;Return positive status
00F7D3 03F7D3 MACRO                                           SSTACK_PREPULL  5
00F7D3 03F7D3 14 01                                           SEC                                                     ;return positive status
00F7D5 03F7D5 32                      DISP_TX_NB_1            PULA                                                    ;pull accu A from the SSTACK
00F7D6 03F7D6 30                                              PULX                                                    ;pull index B from the SSTACK
                                                              ;Done
00F7D7 03F7D7 3D                                              RTS
                                                              ;Return negative status
00F7D8 03F7D8 MACRO                   DISP_TX_NB_2            SSTACK_PREPULL  5
00F7D8 03F7D8 10 FE                                           CLC                                                     ;return negative status
00F7DA 03F7DA 20 F9                                           JOB     DISP_TX_NB_1
                                      ;#Transmit commands and data (blocking)
                                      ; args:   B: buffer entry
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and D are preserved
00F7DC 03F7DC -> $F7DC                DISP_TX_BL              EQU     *
00F7DC 03F7DC MACRO                                           DISP_MAKE_BL    DISP_TX_NB, 5
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL)
                                      ;-------------------------                                                       (DISP_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL)
00F7DC 03F7DC MACRO                                           SCI_MAKE_BL DISP_TX_NB 5                                 (DISP_MAKE_BL)
                                      ;#Helper functions                                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#----------------                                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (DISP_MAKE_BL/SCI_MAKE_BL)
00F7DC 03F7DC 14 10                   LOOP                    SEI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (DISP_MAKE_BL/SCI_MAKE_BL)
00F7DE 03F7DE 07 D9                                           JOBSR   DISP_TX_NB                                       (DISP_MAKE_BL/SCI_MAKE_BL)
00F7E0 03F7E0 24 03                                           BCC     WAIT            ;function unsuccessful           (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (DISP_MAKE_BL/SCI_MAKE_BL)
00F7E2 03F7E2 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (DISP_MAKE_BL/SCI_MAKE_BL)
00F7E4 03F7E4 MACRO                                           SSTACK_PREPULL  2                                        (DISP_MAKE_BL/SCI_MAKE_BL)
00F7E4 03F7E4 3D                                              RTS                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (DISP_MAKE_BL/SCI_MAKE_BL)
00F7E5 03F7E5 MACRO                   WAIT                    ISTACK_WAIT                                              (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00F7E5 03F7E5 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00F7E7 03F7E7 3E                                              WAI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (DISP_MAKE_BL/SCI_MAKE_BL)
00F7E8 03F7E8 MACRO                                           SSTACK_PREPUSH  5                                        (DISP_MAKE_BL/SCI_MAKE_BL)
00F7E8 03F7E8 20 F2                                           JOB     LOOP                                             (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Transmit a sequence of commands and data (non-blocking)
                                      ; args:   X: pointer to the start of the sequence
                                      ;         D: pointer to the end of the sequence
                                      ; result: X: pointer to the start of the remaining sequence
                                      ;         C: 1 = successful, 0=buffer full
                                      ; SSTACK: 9 bytes
                                      ;         Y and D are preserved
00F7EA 03F7EA -> $F7EA                DISP_STREAM_NB          EQU     *
                                                              ;Save registers (start pointer in X, end pointer in D)
00F7EA 03F7EA 3B                                              PSHD                                                    ;push accu D onto the SSTACK
                                                              ;Transmit next byte (start pointer in X, end pointer in D)
00F7EB 03F7EB E6 30                   DISP_STREAM_NB_1        LDAB    1,X+                                            ;get data
00F7ED 03F7ED MACRO                                           DISP_TX_NB                                              ;transmit data (SSTACK: 5 bytes)
                                      ;#Transmit commands and data (non-blocking)                                      (DISP_TX_NB)
                                      ; args:   B: buffer entry                                                        (DISP_TX_NB)
                                      ; result: C: 1=successful, 0=nothing has been done                               (DISP_TX_NB)
                                      ; SSTACK: 5 bytes                                                                (DISP_TX_NB)
                                      ;         X, Y and D are preserved                                               (DISP_TX_NB)
00F7ED 03F7ED MACRO                                           SSTACK_JOBSR    DISP_TX_NB, 5                            (DISP_TX_NB)
                                      ;#Check stack and call subroutine                                                (DISP_TX_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (DISP_TX_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (DISP_TX_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (DISP_TX_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (DISP_TX_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (DISP_TX_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (DISP_TX_NB/SSTACK_JOBSR)
00F7ED 03F7ED 07 CA                                           JOBSR   DISP_TX_NB                                       (DISP_TX_NB/SSTACK_JOBSR)
00F7EF 03F7EF 24 08                                           BCC     DISP_STREAM_NB_3                                ;TX buffer is full
00F7F1 03F7F1 AE 80                                           CPX     0,SP                                            ;check if stream is complete
00F7F3 03F7F3 25 F6                                           BLO     DISP_STREAM_NB_1                                ;transmit next byte
                                                              ;Successful transmission (new start pointer in X, $0000 in Y)
00F7F5 03F7F5 MACRO                                           SSTACK_PREPULL  3
00F7F5 03F7F5 14 01                                           SEC                                                     ;signal success
00F7F7 03F7F7 3A                      DISP_STREAM_NB_2        PULD                                                    ;pull accu B from the SSTACK
                                                              ;Done
00F7F8 03F7F8 3D                                              RTS
                                                              ;TX buffer is full (new start pointer+1 in X, new byte count in Y)
00F7F9 03F7F9 09                      DISP_STREAM_NB_3        DEX                                                     ;restore pointer
                                                              ;Unsucessful transmission (new start pointer in X, new byte count in Y)
00F7FA 03F7FA MACRO                                           SSTACK_PREPULL  3
00F7FA 03F7FA 10 FE                                           CLC                                                     ;signal success
00F7FC 03F7FC 20 F9                                           JOB     DISP_STREAM_NB_2                                ; done
                                      ;#Transmit a sequence of commands and data (non-blocking)
                                      ; args:   X: pointer to the start of the sequence
                                      ;         D: pointer to the end of the sequence
                                      ; result: X: points to the byte after the sequence
                                      ; SSTACK: 11 bytes
                                      ;         Y and D are preserved
00F7FE 03F7FE -> $F7FE                DISP_STREAM_BL          EQU     *
00F7FE 03F7FE MACRO                                           DISP_MAKE_BL    DISP_STREAM_NB, 8
                                      ;# Macros for internal use                                                       (DISP_MAKE_BL)
                                      ;-------------------------                                                       (DISP_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL)
00F7FE 03F7FE MACRO                                           SCI_MAKE_BL DISP_STREAM_NB 8                             (DISP_MAKE_BL)
                                      ;#Helper functions                                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#----------------                                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (DISP_MAKE_BL/SCI_MAKE_BL)
00F7FE 03F7FE 14 10                   LOOP                    SEI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (DISP_MAKE_BL/SCI_MAKE_BL)
00F800 03F800 07 E8                                           JOBSR   DISP_STREAM_NB                                   (DISP_MAKE_BL/SCI_MAKE_BL)
00F802 03F802 24 03                                           BCC     WAIT            ;function unsuccessful           (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (DISP_MAKE_BL/SCI_MAKE_BL)
00F804 03F804 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (DISP_MAKE_BL/SCI_MAKE_BL)
00F806 03F806 MACRO                                           SSTACK_PREPULL  2                                        (DISP_MAKE_BL/SCI_MAKE_BL)
00F806 03F806 3D                                              RTS                                                      (DISP_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (DISP_MAKE_BL/SCI_MAKE_BL)
00F807 03F807 MACRO                   WAIT                    ISTACK_WAIT                                              (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00F807 03F807 10 EF                                           CLI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
00F809 03F809 3E                                              WAI                                                      (DISP_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (DISP_MAKE_BL/SCI_MAKE_BL)
00F80A 03F80A MACRO                                           SSTACK_PREPUSH  8                                        (DISP_MAKE_BL/SCI_MAKE_BL)
00F80A 03F80A 20 F2                                           JOB     LOOP                                             (DISP_MAKE_BL/SCI_MAKE_BL)
                                      ;#SPI ISR for transmitting data to the ST7565R display controller
                                      ;----------------------------------------------------------------
                                      ;+-------------------------------------------------------------+
                                      ;| !!! This ISR will not work if a mode switch is required !!! |
                                      ;| !!!   before the first character has been transmitted   !!! |
                                      ;+-------------------------------------------------------------+
00F80C 03F80C -> $F80C                DISP_ISR                EQU     *
                                                              ;Check and clear SPIF flag
                                                              ;SPIF cleared: transmssion still ongoing
                                                              ;SPIF set:     transmssion complete
                                                              ;Check if DISP buffer is empty
00F80C 03F80C FC 19 F2                                        LDD     DISP_BUF_IN                                     ;IN->A, OUT->B
00F80F 03F80F 18 17                                           CBA                                                     ;check if
00F811 03F811 27 2A                                           BEQ     DISP_ISR_6                                      ;DISP buffer is empty
                                                              ;Check repeat/escape status (OUT in B)
                                                              ;DISP_RPTCNT = $00:      no repeat loop, escaping enabled
                                                              ;DISP_RPTCNT = $01:      last iteration if a repeat loop, escaping disabled
                                                              ;DISP_RPTCNT = $02..$FD: repeat loop ongoing, escaping disabled
                                                              ;DISP_RPTCNT = $FF:      escape sequence started
00F813 03F813 CE 19 E2                                        LDX     #DISP_BUF                                       ;buffer pointer -> X
00F816 03F816 E6 E5                                           LDAB    B,X                                             ;char -> B
00F818 03F818 B6 19 F4                                        LDAA    DISP_RPTCNT                                     ;repeat counter -> A
00F81B 03F81B 26 27                                           BNE     DISP_ISR_7                                      ;repeat loop or escape sequence in progress
                                                              ;Check for new escape character (repeat counter in A, char in B)
00F81D 03F81D C1 E3                                           CMPB    #DISP_ESC_START                                 ;check for escape character
00F81F 03F81F 27 37                                           BEQ     DISP_ISR_8                                      ;escape character found
                                                              ;Transmit character (repeat counter in A, char in B)
00F821 03F821 4F DB 20 17             DISP_ISR_1              BRCLR   SPISR,#SPTEF,DISP_ISR_5                         ;wait for TX buffer to be empty
00F825 03F825 F7 00 DD                DISP_ISR_2              TST     SPIDRL                                          ;clear SPIF flag
00F828 03F828 5B DD                                           STAB    SPIDRL                                          ;transmit character
                                                              ;Check repeat count (repeat counter in A)
00F82A 03F82A 04 40 06                                        TBEQ    A, DISP_ISR_4                                   ;repeat count is zero
00F82D 03F82D 04 20 2F                                        DBNE    A, DISP_ISR_9                                   ;decrement repeat count
00F830 03F830 79 19 F4                DISP_ISR_3              CLR     DISP_RPTCNT                                     ;clear repeat count
                                                              ;Advance OUT index
00F833 03F833 F6 19 F3                DISP_ISR_4              LDAB    DISP_BUF_OUT                                    ;OUT -> B
00F836 03F836 52                                              INCB                                                    ;increment OUT
00F837 03F837 C4 0F                                           ANDB    #(DISP_BUF_SIZE-1)                              ;wrap OUT
00F839 03F839 7B 19 F3                                        STAB    DISP_BUF_OUT                                    ;update OUT
                                                              ;Done
00F83C 03F83C MACRO                   DISP_ISR_5              ISTACK_RTI                                              ;return
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
00F83C 03F83C 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;DISP buffer is empty
00F83D 03F83D 18 0B 5E 00 D8          DISP_ISR_6              MOVB    #(SPE|DISP_SPICR1_CONFIG), SPICR1               ;disable transmit buffer empty interrupt
00F842 03F842 20 F8                                           JOB     DISP_ISR_5                                      ;done
                                                              ;Repeat loop or escape sequence in progress (repeat counter in A, char in B)
00F844 03F844 81 FF                   DISP_ISR_7              CMPA    #$FF                                            ;check for ongoing escape sequence
00F846 03F846 26 D9                                           BNE     DISP_ISR_1                                      ;repeat loop in progress
                                                              ;Conclude ongoing escape sequence(escaped char in B)
00F848 03F848 04 81 19                                        IBEQ    B, DISP_ISR_10                                  ;$FF: transmit escape character
00F84B 03F84B 18 0F                                           TBA                                                     ;repeat count+1 -> A
00F84D 03F84D 04 81 20                                        IBEQ    B, DISP_ISR_11                                  ;$FE: switch to command mode
00F850 03F850 04 81 2D                                        IBEQ    B, DISP_ISR_12                                  ;$FD: switch to data mode
                                                              ;Set new repeat count
00F853 03F853 7A 19 F4                                        STAA    DISP_RPTCNT                                     ;update repeat count
00F856 03F856 20 DB                                           JOB     DISP_ISR_4                                      ;advance out index
                                                              ;Escape character found
00F858 03F858 18 0B FF 19 F4          DISP_ISR_8              MOVB    #DISP_ESC_ESC, DISP_RPTCNT                      ;flag new escape sequence
00F85D 03F85D 20 D4                                           JOB     DISP_ISR_4                                      ;advance out index
                                                              ;Update repeat count (decremented repeat counter in A)
00F85F 03F85F 7A 19 F4                DISP_ISR_9              STAA    DISP_RPTCNT                                     ;update repeat count
00F862 03F862 20 D8                                           JOB     DISP_ISR_5                                      ;done
                                                              ;Transmit escape character
00F864 03F864 4F DB 20 D4             DISP_ISR_10             BRCLR   SPISR,#SPTEF,DISP_ISR_5                         ;wait for TX buffer to be empty
00F868 03F868 CC 00 E3                                        LDD     #DISP_ESC_START                                 ;repeat counter -> A, escape char -> B
00F86B 03F86B 7A 19 F4                                        STAA    DISP_RPTCNT                                     ;update repeat count
00F86E 03F86E 20 B5                                           JOB     DISP_ISR_2                                      ;transmit escape char
                                                              ;Switch to command mode
00F870 03F870 1F 02 48 10 BB          DISP_ISR_11             BRCLR   DISP_A0_PORT,#DISP_A0_PIN,DISP_ISR_3            ;command mode already set
00F875 03F875 4F DB 80 C3                                     BRCLR   SPISR,#SPIF,DISP_ISR_5                          ;wait for TX to be complete
                                                              ;BCLR   DISP_A0_PORT, #DISP_A0_PIN                      ;switch to command mode
00F879 03F879 18 0B 08 02 48                                  MOVB    #DISP_RESET_PIN, DISP_A0_PORT                   ; shortcut
00F87E 03F87E 20 B0                                           JOB     DISP_ISR_3                                      ;clear repeat counter and advance OUT
                                                              ;Switch to data mode
00F880 03F880 1E 02 48 10 AB          DISP_ISR_12             BRSET   DISP_A0_PORT,#DISP_A0_PIN,DISP_ISR_3            ;command mode already set
00F885 03F885 4F DB 80 B3                                     BRCLR   SPISR,#SPIF,DISP_ISR_5                          ;wait for TX to be complete
                                                              ;BSET   DISP_A0_PORT, #DISP_A0_PIN                      ;switch to data mode
00F889 03F889 18 0B 18 02 48                                  MOVB    #(DISP_A0_PIN|DISP_RESET_PIN), DISP_A0_PORT     ; shortcut
00F88E 03F88E 20 A0                                           JOB     DISP_ISR_3                                      ;clear repeat counter and advance OUT
00F890 03F890 -> $F890                DISP_CODE_END           EQU     *
00F890 03F890 -> $3F890               DISP_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F94B 03F94B                                                 ORG     DISP_TABS_START, DISP_TABS_START_LIN
00F94B 03F94B -> $F94B                DISP_TABS_END           EQU     *
00F94B 03F94B -> $3F94B               DISP_TABS_END_LIN       EQU     @
                                      ;#Reference clock divider
00F94B 03F94B -> $0000                CLOCK_REFDV             EQU     (CLOCK_OSC_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Reference clock multiplier
00F94B 03F94B -> $0018                CLOCK_SYNR              EQU     (CLOCK_BUS_FREQ/CLOCK_REF_FREQ)-1
                                      ;#Overall PLL configuration
00F94B 03F94B -> $5800                CLOCK_PLL_CONFIG        EQU     (CLOCK_VCOFRQ<<14)|(CLOCK_SYNR<<8)|(CLOCK_REFFRQ<<6)|CLOCK_REFDV
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
001994 001994 -> $1994                CLOCK_VARS_END          EQU     *
001994 001994 -> $1994                CLOCK_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F7B9 03F7B9                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
00F7B9 03F7B9 -> $F7B9                CLOCK_CODE_END          EQU     *
00F7B9 03F7B9 -> $3F7B9               CLOCK_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F94B 03F94B                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
00F94B 03F94B -> $F94B                CLOCK_TABS_END          EQU     *
00F94B 03F94B -> $3F94B               CLOCK_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Clock divider
                                      ;-------------
00F94B 03F94B -> $0001                TIM_DIV_OFF             EQU     1       ;default no clock divider
                                      ;OCPD checks (only disable timer if all OCPD bits are set)
                                      ;---------------------------------------------------------
00F94B 03F94B -> $0001                TIM_OCPD_CHECK_OFF      EQU     1               ;disable OCPD checks
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Timer frequency
                                      ;---------------
00F94B 03F94B -> $17D7840             TIM_FREQ                EQU     CLOCK_BUS_FREQ          ;frequency in Hz
                                      ;Register offsets
                                      ;-----------------
00F94B 03F94B -> $0000                TIOS_OFFSET             EQU     $0000
                                      ;TCFORC_OFFSET          EQU     $0001
                                      ;TOC7M_OFFSET           EQU     $0002
                                      ;TOC7D_OFFSET           EQU     $0003
00F94B 03F94B -> $0004                TCNT_OFFSET             EQU     $0004
00F94B 03F94B -> $0006                TSCR1_OFFSET            EQU     $0006
                                      ;TTOV_OFFSET            EQU     $0007
00F94B 03F94B -> $0008                TCTL1_OFFSET            EQU     $0008
00F94B 03F94B -> $0009                TCTL2_OFFSET            EQU     $0009
00F94B 03F94B -> $000A                TCTL3_OFFSET            EQU     $000A
00F94B 03F94B -> $000B                TCTL4_OFFSET            EQU     $000B
00F94B 03F94B -> $000C                TIE_OFFSET              EQU     $000C
00F94B 03F94B -> $000D                TSCR2_OFFSET            EQU     $000D
00F94B 03F94B -> $000E                TFLG1_OFFSET            EQU     $000E
00F94B 03F94B -> $000F                TFLG2_OFFSET            EQU     $000F
00F94B 03F94B -> $0010                TC0_OFFSET              EQU     $0010
                                      ;TC1_OFFSET             EQU     $0012
                                      ;TC2_OFFSET             EQU     $0014
                                      ;TC3_OFFSET             EQU     $0016
                                      ;TC4_OFFSET             EQU     $0018
                                      ;TC5_OFFSET             EQU     $001A
                                      ;TC6_OFFSET             EQU     $001C
                                      ;TC7_OFFSET             EQU     $001E
                                      ;PACTL_OFFSET           EQU     $0020
                                      ;PAFLG_OFFSET           EQU     $0021
                                      ;PACNT_OFFSET           EQU     $0022
00F94B 03F94B -> $002C                OCPD_OFFSET             EQU     $002C
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     TIM_VARS_START, TIM_VARS_START_LIN
001994 001994 -> $1994                TIM_VARS_END            EQU     *
001994 001994 -> $1994                TIM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F7B9 03F7B9                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
00F7B9 03F7B9 -> $F7B9                TIM_CODE_END            EQU     *
00F7B9 03F7B9 -> $3F7B9               TIM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F94B 03F94B                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
00F94B 03F94B -> $F94B                TIM_TABS_END            EQU     *
00F94B 03F94B -> $3F94B               TIM_TABS_END_LIN        EQU     @
                                      ;Range checks
                                      ;------------
                                      ;General stack range check enable
00F94B 03F94B -> $0001                SSTACK_CHECK_OFF        EQU     1               ;default is off
                                      ;Debug code
                                      ;----------
00F94B 03F94B -> $0001                SSTACK_DEBUG_OFF        EQU     1               ;default is off
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Stack size
                                      ;----------
00F94B 03F94B -> $2480                SSTACK_SIZE             EQU     (SSTACK_BOTTOM-SSTACK_TOP)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     SSTACK_VARS_START, SSTACK_VARS_START_LIN
001994 001994 -> $1994                SSTACK_VARS_END         EQU     *
001994 001994 -> $1994                SSTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Stack space                                                                 #
                                      ;###############################################################################
001B00 001B00                                                 ORG     SSTACK_TOP, SSTACK_TOP_LIN
                                                              ;Declare RAM space (to be recognized by the assembler)
001B00 001B00                                                 DS      SSTACK_BOTTOM-SSTACK_TOP
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00141A 03F01A                                                 ORG     SSTACK_CODE_START, SSTACK_CODE_START_LIN
00141A 03F01A -> $141A                SSTACK_CODE_END         EQU     *
00141A 03F01A -> $3F01A               SSTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001400 03F000                                                 ORG     SSTACK_TABS_START, SSTACK_TABS_START_LIN
001400 03F000 -> $1400                SSTACK_TABS_END         EQU     *
001400 03F000 -> $3F000               SSTACK_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Wait mode when idle
                                      ;-------------------
001400 03F000 -> $0001                ISTACK_WAI              EQU     1               ;default is no WAI
                                      ;Range checks
                                      ;------------
                                      ;General stack range checkenable
001400 03F000 -> $0001                ISTACK_CHECK_OFF        EQU     1               ;default is off
                                      ;Debug code
                                      ;----------
001400 03F000 -> $0001                ISTACK_DEBUG_OFF        EQU     1               ;default is off
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Stack allocation
                                      ;----------------
001400 03F000 -> $1B00                ISTACK_TOP              EQU     SSTACK_TOP
001400 03F000 -> $3F80                ISTACK_BOTTOM           EQU     SSTACK_BOTTOM
001400 03F000 -> $2480                ISTACK_SIZE             EQU     SSTACK_SIZE
                                      ;S12 stack layout:
                                      ;        +----------------+
                                      ;        |      CCR       | SP+0
                                      ;        +----------------+
                                      ;        |       B        | SP+1
                                      ;        +----------------+
                                      ;        |       A        | SP+2
                                      ;        +----------------+
                                      ;        |       Xh       | SP+3
                                      ;        +----------------+
                                      ;        |       Xl       | SP+4
                                      ;        +----------------+
                                      ;        |       Yh       | SP+5
                                      ;        +----------------+
                                      ;        |       Yl       | SP+6
                                      ;        +----------------+
                                      ;        |      RTNh      | SP+7
                                      ;        +----------------+
                                      ;        |      RTNl      | SP+8
                                      ;        +----------------+
001400 03F000 -> $0009                ISTACK_FRAME_SIZE       EQU     9
001400 03F000 -> $0000                ISTACK_FRAME_CCR        EQU     0
001400 03F000 -> $0001                ISTACK_FRAME_D          EQU     1
001400 03F000 -> $0003                ISTACK_FRAME_X          EQU     3
001400 03F000 -> $0005                ISTACK_FRAME_Y          EQU     5
001400 03F000 -> $0007                ISTACK_FRAME_RTN        EQU     7
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     ISTACK_VARS_START, ISTACK_VARS_START_LIN
001994 001994 -> $1994                ISTACK_VARS_END         EQU     *
001994 001994 -> $1994                ISTACK_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00141A 03F01A                                                 ORG     ISTACK_CODE_START, ISTACK_CODE_START_LIN
00141A 03F01A -> $141A                ISTACK_CODE_END         EQU     *
00141A 03F01A -> $3F01A               ISTACK_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001400 03F000                                                 ORG     ISTACK_TABS_START, ISTACK_TABS_START_LIN
001400 03F000 -> $1400                ISTACK_TABS_END         EQU     *
001400 03F000 -> $3F000               ISTACK_TABS_END_LIN     EQU     @
                                      ;TIM configuration
                                      ;TIM instance for baud rate detection
001400 03F000 -> $0040                SCI_IC_TIM              EQU     TIOS            ;default is the TIM instance associated with TIOS
                                      ;Input capture channel for baud rate detection
001400 03F000 -> $0001                SCI_IC                  EQU     1               ;default is IC1
                                      ;TIM instance for baud rate detection and flow control
                                      ;Output compare channel for baud rate detection and flow control
                                      ;Past baud rate detection, the OC will always measure time periods of roughly 2 SCI frames
                                      ;TIM instance for the MUCts00510 workaround
001400 03F000 -> $0040                SCI_IRQBUG_TIM          EQU     TIOS            ;default is the TIM instance associated with TIOS
                                      ;Output compare channel for the MUCts00510 workaround
                                      ;Past baud rate detection, the OC will always measure time periods of roughly 2 SCI frames
001400 03F000 -> $0002                SCI_IRQBUG_OC           EQU     2               ;default is OC02
                                      ;Frame format
                                      ;------------
001400 03F000                         SCI_FORMAT_8N1
                                      ;SCI V02.00 IRQ workaround (MUCts00510)
                                      ;--------------------------------------
                                      ;###############################################################################
                                      ;# Relevant for the folowing parts:                                            #
                                      ;#    MC9S12DP256 mask sets 0K79X, 1K79X, 2K79X, 0L58F                         #
                                      ;#    MC9S12H256  mask sets 0K78X, 1K78X, 2K78X                                #
                                      ;# The will SCI only request interrupts if an odd number of interrupt flags is #
                                      ;# This will cause disabled and spourious interrupts.                          #
                                      ;# -> The RX/TX ISR must be periodically triggered by a timer interrupt.       #
                                      ;#    The timer period should be about as long as two SCI frames:              #
                                      ;#    RT cycle = SCIBD * bus cycles                                            #
                                      ;#    bit time = 16 * RT cycles = 16 * SCIBD * bus cycles                      #
                                      ;#    frame time = 10 * bit times = 160 RT cycles = 160 * SCIBD * bus cycles   #
                                      ;#    2 * frame times = 320 * SCIBD * bus cycles = 0x140 * SCIBD * bus cycles  #
                                      ;#    Simplification:                                                          #
                                      ;#    TIM period = 0x100 * SCIBD * bus cycles                                  #
                                      ;###############################################################################
                                      ;Enable workaround for MUCts00510
001400 03F000 -> $0001                SCI_IRQBUG_OFF          EQU     1               ;IRQ workaround disabled on newer SCIs
                                      ;#Baud rate
001400 03F000 -> $2580                SCI_BAUD                EQU     9600
                                      ;#Baud rate divider (SCIBD)
                                      ; SCI V5: SCIBD = bus clock / (16*baud rate)
                                      ;         25MHz:   9600 -> $A2
                                      ;                 14400 -> $6C
                                      ;                 19200 -> $51
                                      ;                 28800 -> $36
                                      ;                 38400 -> $28
                                      ;                 57600 -> $1B
                                      ;                 76800 -> $14
                                      ;                115200 -> $0D
                                      ;                153600 -> $0A
                                      ; SCI V6: SCIBD = bus clock / baud rate
                                      ;         25MHz:   9600 -> $A2C
                                      ;                 14400 -> $6C8
                                      ;                 19200 -> $516
                                      ;                 28800 -> $364
                                      ;                 38400 -> $28B
                                      ;                 57600 -> $1B2
                                      ;                 76800 -> $145
                                      ;                115200 -> $0D9
                                      ;                153600 -> $0A2
001400 03F000 -> $00A3                SCI_BDIV                EQU     (CLOCK_BUS_FREQ/(16*SCI_BAUD))+(((2*CLOCK_BUS_FREQ)/(16*SCI_BAUD))&1)
                                      ;#Pulse range for faud rate detection
                                      ;max. baud rate:  153600 baud +10% = 168960 baud
                                      ;min. baud rate:  TIM_FREQ/$FFFF   ~   381 baud (TIM_FREQ=25MHz)
001400 03F000 -> $29400               SCI_BD_MAX_BAUD         EQU     168960                          ;highest baud rate
001400 03F000 -> $017D                SCI_BD_MIN_BAUD         EQU     TIM_FREQ/$FFFF                  ;lowest baud rate
001400 03F000 -> $0093                SCI_BD_MIN_PULSE        EQU     TIM_FREQ/SCI_BD_MAX_BAUD        ;shortest bit pulse
001400 03F000 -> $FFFF                SCI_BD_MAX_PULSE        EQU     $FFFF                           ;longest bit pulse
                                      ;#Frame format
001400 03F000 -> $0004                SCI_8N1                 EQU       ILT           ;8N1
001400 03F000 -> $0006                SCI_8E1                 EQU       ILT|PE        ;8E1
001400 03F000 -> $0007                SCI_8O1                 EQU       ILT|PE|PT     ;8O1
001400 03F000 -> $0014                SCI_8N2                 EQU     M|ILT           ;8N2 TX8=1
001400 03F000 -> $0004                SCI_FORMAT              EQU     SCI_8N1
                                      ;#C0 characters
001400 03F000 -> $00E0                SCI_C0_MASK             EQU     $E0             ;mask for C0 character range
001400 03F000 -> $0003                SCI_C0_BREAK            EQU     $03             ;ctrl-c (break signal)
001400 03F000 -> $0010                SCI_C0_DLE              EQU     $10             ;data link escape (treat next byte as data)
001400 03F000 -> $0011                SCI_C0_XON              EQU     $11             ;unblock transmission
001400 03F000 -> $0013                SCI_C0_XOFF             EQU     $13             ;block transmission
001400 03F000 -> $0018                SCI_C0_CANCEL           EQU     $18             ;ctrl-x (cancel signal)
001400 03F000 -> $001A                SCI_C0_SUSPEND          EQU     $1A             ;ctrl-z (suspend signal)
001400 03F000 -> $001B                SCI_C0_ESCAPE           EQU     $1B             ;ESC (escape signal)
001400 03F000 -> $001A                SCI_C0_US               EQU     $1A             ;last C0 character (unit separator)
001400 03F000 -> $007F                SCI_C0_DEL              EQU     $7F             ;DELETE
                                      ;#C1 characters
001400 03F000 -> $0010                SCI_C1_MASK             EQU     $10             ;mask for C1 character range
                                      ;#Buffer masks
001400 03F000 -> $003F                SCI_RXBUF_MASK          EQU     SCI_RXBUF_SIZE-1;mask for rolling over the RX buffer
001400 03F000 -> $0007                SCI_TXBUF_MASK          EQU     SCI_TXBUF_SIZE-1;mask for rolling over the TX buffer
                                      ;#Flow control thresholds
001400 03F000 -> $0036                SCI_RX_FULL_LEVEL       EQU     SCI_RXBUF_SIZE-10;RX buffer threshold to block transmissions
001400 03F000 -> $0004                SCI_RX_EMPTY_LEVEL      EQU     2*2             ;RX buffer threshold to unblock transmissions
                                      ;#Action flags
001400 03F000 -> $0080                SCI_EXCPT_RXFC          EQU     $80             ;handle RX flow control
001400 03F000 -> $0000                SCI_EXCPT_BREAK         EQU     $00             ;no BREAK request
001400 03F000 -> $0000                SCI_EXCPT_CANCEL        EQU     $00             ;no CANCEL request
001400 03F000 -> $0000                SCI_EXCPT_SUSPEND       EQU     $00             ;no SUSPEND request
001400 03F000 -> $0000                SCI_EXCPT_ESCAPE        EQU     $00             ;no ESCAPE request
001400 03F000 -> $0080                SCI_EXCPT_ANY           EQU     SCI_EXCPT_RXFC|SCI_EXCPT_BREAK|SCI_EXCPT_CANCEL|SCI_EXCPT_SUSPEND|SCI_EXCPT_ESCAPE
                                      ;#Status Flags
001400 03F000 -> $0080                SCI_STAT_TCVALID        EQU     $80             ;timestamp is valid
001400 03F000 -> $0040                SCI_STAT_TXDLE          EQU     $40             ;atomic TX sequence
001400 03F000 -> $0020                SCI_STAT_RXDLE          EQU     $20             ;next RX character is escaped
001400 03F000 -> $0010                SCI_STAT_SWOR           EQU     $10             ;software buffer overrun (RX buffer)
001400 03F000 -> $0008                SCI_STAT_NOTX           EQU     $08             ;don't transmit (XOFF received)
001400 03F000 -> $0004                SCI_STAT_RXERR          EQU     $04             ;RX error state
001400 03F000 -> $0002                SCI_STAT_BDIVOK         EQU     $02             ;BDIV is valid
                                      ;#Meta Data
001400 03F000 -> $0080                SCI_META_C1             EQU     $80             ;C1 character
001400 03F000 -> $0040                SCI_META_C0             EQU     $40             ;C0 Character (incl. DEL)
001400 03F000 -> $0020                SCI_META_DLE            EQU     $20             ;character is escaped
001400 03F000 -> $0010                SCI_META_SWOR           EQU     $10             ;software overrun (previous data lost)
001400 03F000 -> $0008                SCI_META_HWOR           EQU     $08             ;hardware overrun (previous data lost)
001400 03F000 -> $0004                SCI_META_NF             EQU     $04             ;data received with noise
001400 03F000 -> $0002                SCI_META_FE             EQU     $02             ;data received with frame error
001400 03F000 -> $0001                SCI_META_PF             EQU     $01             ;data received with parity error
                                      ;#Shortcuts
001400 03F000 -> $0010                SWOR                    EQU     SCI_META_SWOR   ;shortcut
                                      ;#Timer usage and configuration
001400 03F000 -> $0000                SCI_IC_TCTL34_INIT      EQU     0               ;no IC needed
001400 03F000 -> $0001                SCI_OC_TIOS_INIT        EQU     1<<SCI_OC       ;use OC
001400 03F000 -> $0004                SCI_IRQBUG_TIOS_INIT    EQU     1<<SCI_IRQBUG_OC;use OC
                                      ;#Timer channels
001400 03F000 -> $0052                SCI_IC_TC               EQU     SCI_IC_TIM+TC0_OFFSET+(2*SCI_IC)        ;IC capture register
001400 03F000 -> $0050                SCI_OC_TC               EQU     SCI_OC_TIM+TC0_OFFSET+(2*SCI_OC)        ;OC compare register
001400 03F000 -> $0044                SCI_OC_TCNT             EQU     SCI_OC_TIM+TCNT_OFFSET                  ;OC counter register
001400 03F000 -> $0054                SCI_IRQBUG_TC           EQU     SCI_IRQBUG_TIM+TC0_OFFSET+(2*SCI_IRQBUG_OC);OC counter register
001400 03F000 -> $0044                SCI_IRQBUG_TCNT         EQU     SCI_IRQBUG_TIM+TCNT_OFFSET              ;OC counter register
                                      ;#OC delays
001400 03F000 -> $0EE2                SCI_XONXOFF_DLY         EQU     10*(TIM_FREQ/65536)                     ;XON/XOFF reminder intervall (~10sec)
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     SCI_VARS_START, SCI_VARS_START_LIN
001994 001994                                                 ALIGN   1
                                      ;#Receive buffer
001994 001994                         SCI_RXBUF               DS      SCI_RXBUF_SIZE
0019D4 0019D4                         SCI_RXBUF_IN            DS      1               ;points to the next free space
0019D5 0019D5                         SCI_RXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Transmit buffer
0019D6 0019D6                         SCI_TXBUF               DS      SCI_TXBUF_SIZE
0019DE 0019DE                         SCI_TXBUF_IN            DS      1               ;points to the next free space
0019DF 0019DF                         SCI_TXBUF_OUT           DS      1               ;points to the oldest entry
                                      ;#Event flags
0019E0 0019E0                         SCI_EXCPT               DS      1               ; flags
                                      ;#Status flags
0019E1 0019E1                         SCI_STAT                DS      1               ;status flags
0019E2 0019E2 -> $19E2                SCI_VARS_END            EQU     *
0019E2 0019E2 -> $19E2                SCI_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00141A 03F01A                                                 ORG     SCI_CODE_START, SCI_CODE_START_LIN
                                      ;#Transmit one byte - non-blocking
                                      ; args:   B: data to be send
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00141A 03F01A -> $141A                SCI_TX_NB               EQU     *
                                                              ;Save registers (data in B)
00141A 03F01A 34                                              PSHX                                            ;save X
00141B 03F01B 36                                              PSHA                                            ;save A
00141C 03F01C 10 FE                                           CLC                                             ;signal failure by default
00141E 03F01E 39                                              PSHC                                            ;save CCR
                                                              ;Write data into the TX buffer (data in B)
00141F 03F01F CE 19 D6                                        LDX     #SCI_TXBUF                              ;buffer pointer -> X
001422 03F022 B6 19 DE                                        LDAA    SCI_TXBUF_IN                            ;in -> A
001425 03F025 6B E4                                           STAB    A,X                                     ;store data in buffer
                                                              ;Check if there is room for this entry (data in B, in-index in A, TX buffer pointer in X)
001427 03F027 42                                              INCA                                            ;increment index
001428 03F028 84 07                                           ANDA    #SCI_TXBUF_MASK                         ;wrap index
00142A 03F02A B1 19 DF                                        CMPA    SCI_TXBUF_OUT                           ;check if buffer is full
00142D 03F02D 27 09                                           BEQ     SCI_TX_NB_1                             ;buffer is full
                                                              ;Update buffer
00142F 03F02F 7A 19 DE                                        STAA    SCI_TXBUF_IN                            ;update in
                                                              ;Enable interrupts
001432 03F032 4C CB 80                                        BSET    SCICR2,#TXIE                            ;enable TX interrupt
                                                              ;Signal success
001435 03F035 0C 80 01                                        BSET    0,SP, #$01                              ;set C-flag
                                                              ;Restore registers
001438 03F038 MACRO                   SCI_TX_NB_1             SSTACK_PREPULL  6                               ;check SSTACK
001438 03F038 38                                              PULC                                            ;restore CCR (incl. result)
001439 03F039 32                                              PULA                                            ;restore A
00143A 03F03A 30                                              PULX                                            ;restore X
                                                              ;Done
00143B 03F03B 3D                                              RTS
                                      ;#Transmit one byte - blocking
                                      ; args:   B: data to be send
                                      ; result: none
                                      ; SSTACK: 8 bytes
                                      ;         X, Y, and D are preserved
00143C 03F03C -> $143C                SCI_TX_BL               EQU     *
00143C 03F03C MACRO                                           SCI_MAKE_BL     SCI_TX_NB, 6
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00143C 03F03C 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00143E 03F03E 07 DA                                           JOBSR   SCI_TX_NB                                        (SCI_MAKE_BL)
001440 03F040 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001442 03F042 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001444 03F044 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
001444 03F044 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001445 03F045 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001445 03F045 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001447 03F047 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001448 03F048 MACRO                                           SSTACK_PREPUSH  6                                        (SCI_MAKE_BL)
001448 03F048 20 F2                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if TX queue can hold further data
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y, and D are preserved
00144A 03F04A -> $144A                SCI_TX_READY_NB         EQU     *
                                                              ;Save registers
00144A 03F04A 36                                              PSHA                                            ;sace A
00144B 03F04B 10 FE                                           CLC                                             ;default result: failure
00144D 03F04D 39                                              PSHC                                            ;save CCR (incl. default result)
                                                              ;Check if there is room for this entry
00144E 03F04E B6 19 DE                                        LDAA    SCI_TXBUF_IN                            ;in -> A
001451 03F051 42                                              INCA                                            ;increment in
001452 03F052 84 07                                           ANDA    #SCI_TXBUF_MASK                         ;wrap in
001454 03F054 B1 19 DF                                        CMPA    SCI_TXBUF_OUT                           ;check for overflow
001457 03F057 27 03                                           BEQ     SCI_TX_READY_NB_2                       ;buffer is full
                                                              ;Signal success
001459 03F059 0C 80 01                SCI_TX_READY_NB_1       BSET    0,SP, #1                                ;set C-flag
                                                              ;Restore registers
00145C 03F05C MACRO                   SCI_TX_READY_NB_2       SSTACK_PREPULL  4                               ;check SSTACK
00145C 03F05C 38                                              PULC                                            ;restore CCR (incl. result)
00145D 03F05D 32                                              PULA                                            ;restore A
                                                              ;Done
00145E 03F05E 3D                                              RTS
                                      ;#Wait until TX queue can hold further data
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y, and D are preserved
00145F 03F05F -> $145F                SCI_TX_READY_BL         EQU     *
00145F 03F05F MACRO                                           SCI_MAKE_BL     SCI_TX_READY_NB, 4
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00145F 03F05F 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
001461 03F061 07 E7                                           JOBSR   SCI_TX_READY_NB                                  (SCI_MAKE_BL)
001463 03F063 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001465 03F065 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001467 03F067 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
001467 03F067 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001468 03F068 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001468 03F068 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
00146A 03F06A 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
00146B 03F06B MACRO                                           SSTACK_PREPUSH  4                                        (SCI_MAKE_BL)
00146B 03F06B 20 F2                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is no more data in the TX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 4 bytes
                                      ;         X, Y and B are preserved
00146D 03F06D -> $146D                SCI_TX_DONE_NB          EQU     *
                                                              ;Save registers
00146D 03F06D 36                                              PSHA                                            ;save A
00146E 03F06E 10 FE                                           CLC                                             ;default result: failure
001470 03F070 39                                              PSHC                                            ;save CCR (incl. default result)
                                                              ;Check if TX queue is empty
001471 03F071 B6 19 DE                                        LDAA    SCI_TXBUF_IN                            ;in -> A
001474 03F074 B1 19 DF                                        CMPA    SCI_TXBUF_OUT                           ;check for overflow
001477 03F077 27 E0                                           BEQ     SCI_TX_READY_NB_1                       ;signal success
001479 03F079 20 E1                                           JOB     SCI_TX_READY_NB_2                       ;signal failure
                                      ;#Wait until there is no more data in the TX queue
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 6 bytes
                                      ;         X, Y and B are preserved
00147B 03F07B -> $147B                SCI_TX_DONE_BL          EQU     *
00147B 03F07B MACRO                                           SCI_MAKE_BL     SCI_TX_DONE_NB, 4
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
00147B 03F07B 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
00147D 03F07D 07 EE                                           JOBSR   SCI_TX_DONE_NB                                   (SCI_MAKE_BL)
00147F 03F07F 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
001481 03F081 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
001483 03F083 MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
001483 03F083 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
001484 03F084 MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
001484 03F084 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
001486 03F086 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
001487 03F087 MACRO                                           SSTACK_PREPUSH  4                                        (SCI_MAKE_BL)
001487 03F087 20 F2                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Receive one byte - non-blocking ;OK!
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ;         C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X and Y are preserved
001489 03F089 -> $1489                SCI_RX_NB               EQU     *
                                                              ;Save registers
001489 03F089 34                                              PSHX                                            ;save X
00148A 03F08A 10 FE                                           CLC                                             ;signal failure by default
00148C 03F08C 39                                              PSHC                                            ;save CCR
                                                              ;Check if there is data in the RX queue
00148D 03F08D FC 19 D4                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
001490 03F090 18 16                                           SBA                                             ;A=in-out
001492 03F092 27 1E                                           BEQ     SCI_RX_NB_5                             ;RX buffer is empty (failure)
                                                              ;Signal success
001494 03F094 0C 80 01                                        BSET    0,SP, #$01                              ;set C-flag
                                                              ;Pull entry from the RX queue (in-out in A, out in B)
001497 03F097 CE 19 94                                        LDX     #SCI_RXBUF                              ;buffer pointer -> X
00149A 03F09A EE E5                                           LDX     B,X                                     ;flags:data -> X
00149C 03F09C CB 02                                           ADDB    #$02                                    ;increment out
00149E 03F09E C4 3F                                           ANDB    #SCI_RXBUF_MASK                         ;wrap out
0014A0 03F0A0 7B 19 D5                                        STAB    SCI_RXBUF_OUT                           ;update out
                                                              ;Check if more RX buffer is running empty (in-out in A, flags:data in X)
0014A3 03F0A3 84 3F                                           ANDA    #SCI_RXBUF_MASK                         ;adjust RX data count
0014A5 03F0A5 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL                     ;check flow control threshold
0014A7 03F0A7 26 07                                           BNE     SCI_RX_NB_2                             ;don't apply flow control
0014A9 03F0A9 1C 19 E0 80                                     BSET    SCI_EXCPT,#SCI_EXCPT_RXFC               ;request flow control handletr
0014AD 03F0AD 4C CB 80                                        BSET    SCICR2, #TXIE                           ;enable TX interrupt
                                                              ;Return result (flags:data in X)
0014B0 03F0B0 B7 54                   SCI_RX_NB_2             TFR     X, D                                    ;flags:data -> D
                                                              ;Restore registers (flags:data in D)
0014B2 03F0B2 MACRO                   SCI_RX_NB_5             SSTACK_PREPULL  5                               ;check SSTACK
0014B2 03F0B2 38                                              PULC                                            ;restore CCR (incl. result)
0014B3 03F0B3 30                                              PULX                                            ;restore X
                                                              ;Done
0014B4 03F0B4 3D                                              RTS
                                      ;#Receive one byte - blocking
                                      ; args:   none
                                      ; result: A:      error flags
                                      ;         B:      received data
                                      ; SSTACK: 7 bytes
                                      ;         X and Y are preserved
0014B5 03F0B5 -> $14B5                SCI_RX_BL               EQU     *
0014B5 03F0B5 MACRO                                           SCI_MAKE_BL     SCI_RX_NB, 5
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0014B5 03F0B5 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0014B7 03F0B7 07 D0                                           JOBSR   SCI_RX_NB                                        (SCI_MAKE_BL)
0014B9 03F0B9 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0014BB 03F0BB 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0014BD 03F0BD MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
0014BD 03F0BD 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0014BE 03F0BE MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0014BE 03F0BE 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0014C0 03F0C0 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0014C1 03F0C1 MACRO                                           SSTACK_PREPUSH  5                                        (SCI_MAKE_BL)
0014C1 03F0C1 20 F2                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#Check if there is data in the RX queue
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 5 bytes
                                      ;         X, Y and D are preserved
0014C3 03F0C3 -> $14C3                SCI_RX_READY_NB         EQU     *
                                                              ;Save registers
0014C3 03F0C3 3B                                              PSHD                                            ;save D
0014C4 03F0C4 10 FE                                           CLC                                             ;default result: failure
0014C6 03F0C6 39                                              PSHC                                            ;save CCR (incl. default result)
                                                              ;Check if there is data in the RX queue
0014C7 03F0C7 FC 19 D4                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
0014CA 03F0CA 18 17                                           CBA                                             ;check is RX data is available
0014CC 03F0CC 27 03                                           BEQ     SCI_RX_READY_NB_1                       ;buffer is empty
                                                              ;Signal success
0014CE 03F0CE 0C 80 01                                        BSET    0,SP, #1                                ;set C-flag
                                                              ;Restore registers
0014D1 03F0D1 MACRO                   SCI_RX_READY_NB_1       SSTACK_PREPULL  5                               ;check SSTACK
0014D1 03F0D1 38                                              PULC                                            ;restore CCR (incl. result)
0014D2 03F0D2 3A                                              PULD                                            ;restore D
                                                              ;Done
0014D3 03F0D3 3D                                              RTS
                                      ;#Wait until there is data in the RX queue
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 7 bytes
                                      ;         X, Y and D are preserved
0014D4 03F0D4 -> $14D4                SCI_RX_READY_BL         EQU     *
0014D4 03F0D4 MACRO                                           SCI_MAKE_BL     SCI_RX_READY_NB, 5
                                      ;#Helper functions                                                               (SCI_MAKE_BL)
                                      ;#----------------                                                               (SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (SCI_MAKE_BL)
0014D4 03F0D4 14 10                   LOOP                    SEI                                                      (SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (SCI_MAKE_BL)
0014D6 03F0D6 07 EB                                           JOBSR   SCI_RX_READY_NB                                  (SCI_MAKE_BL)
0014D8 03F0D8 24 03                                           BCC     WAIT            ;function unsuccessful           (SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (SCI_MAKE_BL)
0014DA 03F0DA 10 EF                                           CLI                                                      (SCI_MAKE_BL)
                                                              ;Done                                                    (SCI_MAKE_BL)
0014DC 03F0DC MACRO                                           SSTACK_PREPULL  2                                        (SCI_MAKE_BL)
0014DC 03F0DC 3D                                              RTS                                                      (SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (SCI_MAKE_BL)
0014DD 03F0DD MACRO                   WAIT                    ISTACK_WAIT                                              (SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (SCI_MAKE_BL/ISTACK_WAIT)
0014DD 03F0DD 10 EF                                           CLI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
0014DF 03F0DF 3E                                              WAI                                                      (SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (SCI_MAKE_BL)
0014E0 03F0E0 MACRO                                           SSTACK_PREPUSH  5                                        (SCI_MAKE_BL)
0014E0 03F0E0 20 F2                                           JOB     LOOP                                             (SCI_MAKE_BL)
                                      ;#TIM OC ISR
                                      ;-----------
                                      ;  Baud rate detection:
                                      ;    Invalidate last IC edge at every OC event
                                      ;    Calcuate and set baud rate when delay is over
                                      ;      Restart baud rate detection if baud rate is invalid
                                      ;  XON/XOFF flow control
                                      ;    Disable OC
                                      ;    Request XON/XOFF transmission
                                      ;  RTS polling
                                      ;    Disable OC
                                      ;    Run RX/TX ISR
0014E2 03F0E2 -> $14E2                SCI_ISR_OC              EQU     *
0014E2 03F0E2                                                 //Clear interrupt flag
0014E2 03F0E2 MACRO                                           TIM_CLRIF, SCI_OC_TIM, SCI_OC           ;clear IF
                                      ;#Clear one interrupt flag                                                       (TIM_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF)
                                      ;       2: channel number                                                        (TIM_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF)
0014E2 03F0E2 MACRO                                           TIM_MULT_CLRIF  SCI_OC_TIM, (1<<SCI_OC)                  (TIM_CLRIF)
                                      ;#Clear multiple interrupt flags                                                 (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; args: 1: start address of register space                                       (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;       2: channel mask                                                          (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ; SSTACK: none                                                                   (TIM_CLRIF/TIM_MULT_CLRIF)
                                      ;         X, Y, and D are preserved                                              (TIM_CLRIF/TIM_MULT_CLRIF)
0014E2 03F0E2 18 0B 01 00 4E                                  MOVB    #1<<SCI_OC, SCI_OC_TIM+TFLG1_OFFSET              (TIM_CLRIF/TIM_MULT_CLRIF)
                                                              ;########################################
                                                              ;# RTS/CTS                              #
                                                              ;# =======                              #
                                                              ;# - Set TXIE after RTS poll delay      #
                                                              ;########################################
                                                              ;Enable TX interrupt
0014E7 03F0E7 1C 19 E0 80                                     BSET    SCI_EXCPT,#SCI_EXCPT_RXFC               ;request exception handler
0014EB 03F0EB 4C CB 80                                        BSET    SCICR2, #TXIE                           ;enable TX interrupt
0014EE 03F0EE MACRO                                           TIM_DIS SCI_OC_TIM, SCI_OC                      ;disable OC
                                      ;#Disable one timer channel                                                      (TIM_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS)
                                      ;       2: channel number                                                        (TIM_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS)
0014EE 03F0EE MACRO                                           TIM_MULT_DIS    SCI_OC_TIM, (1<<SCI_OC)                  (TIM_DIS)
                                      ;#Disable multiple timer channels                                                (TIM_DIS/TIM_MULT_DIS)
                                      ; args: 1: start address of register space                                       (TIM_DIS/TIM_MULT_DIS)
                                      ;       2: channel mask                                                          (TIM_DIS/TIM_MULT_DIS)
                                      ; SSTACK: none                                                                   (TIM_DIS/TIM_MULT_DIS)
                                      ;         X, Y, and D are preserved                                              (TIM_DIS/TIM_MULT_DIS)
0014EE 03F0EE 4D 4C 01                                        BCLR    SCI_OC_TIM+TIE_OFFSET, #1<<SCI_OC                (TIM_DIS/TIM_MULT_DIS)
0014F1 03F0F1 26 03                                           BNE     DONE                                             (TIM_DIS/TIM_MULT_DIS)
0014F3 03F0F3 79 00 46                DISABLE                 CLR     SCI_OC_TIM+TSCR1_OFFSET                          (TIM_DIS/TIM_MULT_DIS)
0014F6 03F0F6 -> $14F6                DONE                    EQU     *                                                (TIM_DIS/TIM_MULT_DIS)
                                                              ;Done
0014F6 03F0F6 MACRO                                           ISTACK_RTI                                      ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0014F6 03F0F6 0B                                              RTI                                                      (ISTACK_RTI)
                                      ;#SCI EXCPT ISR (status flags in A)
                                      ;----------------------------------
0014F7 03F0F7 -> $14F7                SCI_ISR_EXCPT           EQU     *
                                                              ;Handle RXFC request (status flags in A)
                                                              ;---------------------------------------
                                                              ;Check if an RXFC request is pending
0014F7 03F0F7 1F 19 E0 80 1D                                  BRCLR   SCI_EXCPT,#SCI_EXCPT_RXFC,SCI_ISR_EXCPT_3;handle another exception
                                                              ;Check RX buffer
0014FC 03F0FC FC 19 D4                                        LDD     SCI_RXBUF_IN                            ;A:B=in:out
0014FF 03F0FF 18 16                                           SBA                                             ;A=in-out
001501 03F101 84 3F                                           ANDA    #SCI_RXBUF_MASK                         ;adjust RX data count
                                                              ;Check empty level (char count in A)
001503 03F103 81 04                                           CMPA    #SCI_RX_EMPTY_LEVEL                     ;check flow control threshold
001505 03F105 22 06                                           BHI     SCI_ISR_EXCPT_1                         ;don't apply flow control
                                                              ;Allow incoming data
001507 03F107 MACRO                                           SCI_ASSERT_CTS                                  ;set CTS
                                      ;#Assert CTS (Clear To Send - allow incoming data)                               (SCI_ASSERT_CTS)
                                      ; args:   none                                                                   (SCI_ASSERT_CTS)
                                      ; result: none                                                                   (SCI_ASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_ASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_ASSERT_CTS)
001507 03F107 1D 02 50 02                                     BCLR    SCI_CTS_PORT, #SCI_CTS_PIN              ;clear CTS (allow RX data) (SCI_ASSERT_CTS)
00150B 03F10B 20 08                                           JOB     SCI_ISR_EXCPT_2                         ;done
                                                              ;Check full level (char count in A)
00150D 03F10D 81 36                   SCI_ISR_EXCPT_1         CMPA    #SCI_RX_FULL_LEVEL                      ;check flow control threshold
00150F 03F10F 25 04                                           BLO     SCI_ISR_EXCPT_2                         ;don't apply flow control
                                                              ;Block incoming data
001511 03F111 MACRO                                           SCI_DEASSERT_CTS                                ;clear CTS
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_DEASSERT_CTS)
                                      ; args:   none                                                                   (SCI_DEASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_DEASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_DEASSERT_CTS)
001511 03F111 1C 02 50 02                                     BSET    SCI_CTS_PORT, #SCI_CTS_PIN              ;set CTS (prohibit RX data) (SCI_DEASSERT_CTS)
001515 03F115                         SCI_ISR_EXCPT_2         ;Clear RXFC request
001515 03F115 1D 19 E0 80                                     BCLR    SCI_EXCPT,#SCI_EXCPT_RXFC               ;clear RXFC request
001519 03F119 -> $1519                SCI_ISR_EXCPT_3         EQU     *
                                                              ;Done
001519 03F119 MACRO                   SCI_ISR_EXCPT_8         ISTACK_RTI                                      ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001519 03F119 0B                                              RTI                                                      (ISTACK_RTI)
                                      ;#SCI TX ISR (status flags in A)
                                      ;-------------------------------
00151A 03F11A -> $151A                SCI_ISR_TX              EQU     *
                                                              ;Check action requests (status flags in A)
00151A 03F11A F6 19 E0                                        LDAB    SCI_EXCPT                               ;exceptions -> A
00151D 03F11D C5 80                                           BITB    #SCI_EXCPT_ANY                          ;only check implemented requests
00151F 03F11F 26 D6                                           BNE     SCI_ISR_EXCPT                           ;process exception handlers
                                                              ;Make sure TDRE is set (status flags in A)
001521 03F121 97                                              TSTA                                            ;check TDRE
001522 03F122 2A 3E                                           BPL     SCI_ISR_TX_4                            ;done
                                                              ;Check TX flow control
001524 03F124 1F 02 50 01 19                                  BRCLR   SCI_RTS_PORT,#SCI_RTS_PIN,SCI_ISR_TX_2  ;transmission permitted
001529 03F129 MACRO                                           SCI_LDD_FRAME_DELAY     1                       ;poll delay -> D
                                      ;#Load TCs for the length a given number of SCI frames into accu D               (SCI_LDD_FRAME_DELAY)
                                      ; args:   1: delay in SCI frames                                                 (SCI_LDD_FRAME_DELAY)
                                      ; result: D: TCs roughly equivalent to 2 SCI frames                              (SCI_LDD_FRAME_DELAY)
                                      ; SSTACK: 0 bytes                                                                (SCI_LDD_FRAME_DELAY)
                                      ;         X is preserved                                                         (SCI_LDD_FRAME_DELAY)
                                      ; SCI V6: TC = FRAMES *  10 * SCIBD * CLOCK_BUS_FREQ/TIM_FREQ                    (SCI_LDD_FRAME_DELAY)
                                      ; SCI V5: TC = FRAMES * 160 * SCIBD * CLOCK_BUS_FREQ/TIM_FREQ                    (SCI_LDD_FRAME_DELAY)
                                                              ;Fixed baud rate                                         (SCI_LDD_FRAME_DELAY)
001529 03F129 CC 00 13                                        LDD     #((1*160*$140*SCI_BAUD)/TIM_FREQ);TC -> D        (SCI_LDD_FRAME_DELAY)
00152C 03F12C D3 44                                           ADDD    SCI_OC_TCNT                             ;new OC timestamp -> D
00152E 03F12E 5C 50                                           STD     SCI_OC_TC                               ;setup OC
001530 03F130 MACRO                                           TIM_EN  SCI_OC_TIM, SCI_OC                      ;enable timer
                                      ;#Enable one timer channel                                                       (TIM_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN)
                                      ;       2: channel number                                                        (TIM_EN)
                                      ; SSTACK: none                                                                   (TIM_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN)
001530 03F130 MACRO                                           TIM_MULT_EN     SCI_OC_TIM, (1<<SCI_OC)                  (TIM_EN)
                                      ;#Enable multiple timer channels                                                 (TIM_EN/TIM_MULT_EN)
                                      ; args: 1: start address of register space                                       (TIM_EN/TIM_MULT_EN)
                                      ;       2: channels  mask                                                        (TIM_EN/TIM_MULT_EN)
                                      ; SSTACK: none                                                                   (TIM_EN/TIM_MULT_EN)
                                      ;         X, Y, and D are preserved                                              (TIM_EN/TIM_MULT_EN)
001530 03F130 18 0B 01 00 4E                                  MOVB    #1<<SCI_OC, SCI_OC_TIM+TFLG1_OFFSET            ;clear interrupt flags (TIM_EN/TIM_MULT_EN)
001535 03F135 4C 4C 01                                        BSET    SCI_OC_TIM+TIE_OFFSET, #1<<SCI_OC              ;enable interrupts (TIM_EN/TIM_MULT_EN)
001538 03F138 18 0B A0 00 46                                  MOVB    #(TEN|TSFRZ), SCI_OC_TIM+TSCR1_OFFSET   ;enable timer (TIM_EN/TIM_MULT_EN)
00153D 03F13D 4D CB 80                                        BCLR    SCICR2, #TXIE                           ;disable TX interrupt
001540 03F140 20 20                                           JOB     SCI_ISR_TX_4                            ;done
                                                              ;Check TX buffer
001542 03F142 FC 19 DE                SCI_ISR_TX_2            LDD     SCI_TXBUF_IN                            ;in:out -> A:B
001545 03F145 18 17                                           CBA                                             ;check if buffer is empty
001547 03F147 27 1A                                           BEQ     SCI_ISR_TX_5                            ;buffer is empty
                                                              ;Get TX data (in:out in D)
001549 03F149 CD 19 D6                                        LDY     #SCI_TXBUF                              ;buffer pointer -> Y
00154C 03F14C A6 ED                                           LDAA    B,Y                                     ;data -> A
                                                              ;Handle DLE code (data in A, out in B)
00154E 03F14E 1D 19 E1 40                                     BCLR    SCI_STAT,#SCI_STAT_TXDLE                ;release sequence lock
001552 03F152 81 10                                           CMPA    #SCI_C0_DLE                             ;check for DLE
001554 03F154 26 04                                           BNE     SCI_ISR_TX_3                            ;no DLE code
001556 03F156 1C 19 E1 40                                     BSET    SCI_STAT,#SCI_STAT_TXDLE                ;flag atomic sequence
                                                              ;Transmit data (data in A, out in B)
00155A 03F15A 5A CF                   SCI_ISR_TX_3            STAA    SCIDRL                                  ;transmit data
                                                              ;Increment index (out in B)
00155C 03F15C 52                                              INCB                                            ;advance out index
00155D 03F15D C4 07                                           ANDB    #SCI_TXBUF_MASK                         ;wrap out index
00155F 03F15F 7B 19 DF                                        STAB    SCI_TXBUF_OUT                           ;update out index
                                                              ;Done
001562 03F162 MACRO                   SCI_ISR_TX_4            ISTACK_RTI                                      ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001562 03F162 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;TX buffer is empty
001563 03F163 F7 19 E0                SCI_ISR_TX_5            TST     SCI_EXCPT                               ;RXFC->N, /others->Z, 0->V
001566 03F166 2E FA                                           BGT     SCI_ISR_TX_4                            ;Z + (N ^ V) = 0
001568 03F168 4D CB 80                                        BCLR    SCICR2, #TXIE                           ;disable TX interrupt
00156B 03F16B 20 F5                                           JOB     SCI_ISR_TX_4                            ;done
                                      ;#SCI RX/TX ISR (SCI ISR)
                                      ;------------------------
00156D 03F16D -> $156D                SCI_ISR_RXTX            EQU     *
                                                              ;Common entry point for all SCI interrupts
                                                              ;Load flags
00156D 03F16D 96 CC                                           LDAA    SCISR1                                  ;load status flags into accu A
                                                                                                              ;SCI Flag order:
                                                                                                              ; 7:TDRE (Transmit Data Register Empty Flag)
                                                                                                              ; 6:TC   (TransmitCompleteFlag)
                                                                                                              ; 5:RDRF (Receive Data Register Full Flag)
                                                                                                              ; 4:IDLE (Idle Line Flag)
                                                                                                              ; 3:OR   (Overrun Flag)
                                                                                                              ; 2:NF   (Noise Flag)
                                                                                                              ; 1:FE   (Framing Error Flag)
                                                                                                              ; 0:PE   (Parity Error Flag)
                                                              ;Check for RX data (status flags in A)
00156F 03F16F 85 28                                           BITA    #(RDRFF|OR)                             ;go to receive handler if receive buffer
001571 03F171 27 A7                                           BEQ     SCI_ISR_TX                              ;process requested actions
                                      ;#SCI RX ISR (status flags in A)
                                      ;-------------------------------
001573 03F173 D6 CF                   SCI_ISR_RX              LDAB    SCIDRL                                  ;load receive data into accu B (clears flags)
                                                              ;Transfer hardware flag to metadata (status flags in A, RX data in B)
001575 03F175 84 0F                                           ANDA    #(OR|NF|FE|PF)                          ;keep  error flags
                                                              ;Check for C0 range (metadata in A, RX data in B)
001577 03F177 C1 1A                   SCI_ISR_RX_1            CMPB    #SCI_C0_US                              ;check for lower C0 range
001579 03F179 2F 04                                           BLE     SCI_ISR_RX_2                            ;decode C0 character
00157B 03F17B C1 7F                                           CMPB    #SCI_C0_DEL                             ;check for DEL
00157D 03F17D 26 02                                           BNE     SCI_ISR_RX_3                            ;no C0 character
00157F 03F17F 8A 40                   SCI_ISR_RX_2            ORAA    #SCI_META_C0                            ;mark as C0 character
                                                              ;Check for C1 range (metadata in A, RX data in B)
001581 03F181 D7                      SCI_ISR_RX_3            TSTB                                            ;check for C1 range
001582 03F182 2A 02                                           BPL     SCI_ISR_RX_4                            ;no C1 character
001584 03F184 8A 80                                           ORAA    #SCI_META_C1                            ;mark as C1 character
                                                              ;Transfer SWOR und DLE flags to metadata (metadata in A, RX data in B)
001586 03F186 B7 15                   SCI_ISR_RX_4            TFR     B, X                                    ;RX data -> X
001588 03F188 F6 19 E1                                        LDAB    SCI_STAT                                ;get status bits
00158B 03F18B C4 30                                           ANDB    #(SCI_STAT_RXDLE|SCI_STAT_SWOR)                 ;mask DLE and SWOR
00158D 03F18D 18 06                                           ABA                                             ;transfer status bits to metadata
00158F 03F18F B7 51                                           TFR     X, B                                    ;RX data -> X
                                                              ;Interpret C0 codes if there is no error (metadata in A, RX data in B)
001591 03F191 81 40                   SCI_ISR_RX_5            CMPA    #SCI_META_C0                            ;check for C0 and no errors
001593 03F193 26 0A                                           BNE     SCI_ISR_RX_13                           ;queue RX data
                                                              ;Interpret DLE (RX data in B)
001595 03F195 C1 10                                           CMPB    #SCI_C0_DLE                             ;check for DLE
001597 03F197 26 06                                           BNE     SCI_ISR_RX_6                            ;no DLE character
001599 03F199 1C 19 E1 20                                     BSET    SCI_STAT,#SCI_STAT_RXDLE                        ;set DLE status
00159D 03F19D 20 30                                           JOB     SCI_ISR_RX_16                           ;done
00159F 03F19F -> $159F                SCI_ISR_RX_6            EQU     *                                       ;no DLE character
                                                              ;Queue RX data (metadata in A, RX data in B)
00159F 03F19F 1D 19 E1 30             SCI_ISR_RX_13           BCLR    SCI_STAT, #(SCI_STAT_RXDLE|SCI_STAT_SWOR);clear DLE and SWOR status
0015A3 03F1A3 B7 46                                           TFR     D, Y                                    ;metadata:RX data -> Y
0015A5 03F1A5 CE 19 94                                        LDX     #SCI_RXBUF                              ;buffer pointer -> X
0015A8 03F1A8 FC 19 D4                                        LDD     SCI_RXBUF_IN                            ;in:out -> A:B
0015AB 03F1AB 6D E4                                           STY     A,X                                     ;store metadata:RX data in buffer
0015AD 03F1AD 8B 02                                           ADDA    #2                                      ;advance in pointer
0015AF 03F1AF 84 3F                                           ANDA    #SCI_RXBUF_MASK                         ;
0015B1 03F1B1 18 17                                           CBA                                             ;check for buffer overflow
0015B3 03F1B3 27 11                                           BEQ     SCI_ISR_RX_14                           ;buffer overflow
0015B5 03F1B5 7A 19 D4                                        STAA    SCI_RXBUF_IN                            ;update IN pointer
                                                              ;Check if flow control must be applied (in:out in D, flags:data in Y)
0015B8 03F1B8 18 16                                           SBA                                             ;determine free buffer space
0015BA 03F1BA 84 3F                                           ANDA    #SCI_RXBUF_MASK                         ;
0015BC 03F1BC 81 36                                           CMPA    #SCI_RX_FULL_LEVEL                      ;check for threshold
0015BE 03F1BE 25 0F                                           BLO     SCI_ISR_RX_16                           ;buffer is getting full
                                                              ;Deassert CTS (flags:data in Y)
                                                              ;BSET   SCI_EXCPT,#SCI_EXCPT_RXFC               ;request flow control handletr
                                                              ;JOB    SCI_ISR_RX_15                           ;enable TX interrupt
0015C0 03F1C0 MACRO                                           SCI_DEASSERT_CTS                                ;clear CTS
                                      ;#Deassert CTS (stop incoming data)                                              (SCI_DEASSERT_CTS)
                                      ; args:   none                                                                   (SCI_DEASSERT_CTS)
                                      ; SSTACK: none                                                                   (SCI_DEASSERT_CTS)
                                      ;         X, Y, and D are preserved                                              (SCI_DEASSERT_CTS)
0015C0 03F1C0 1C 02 50 02                                     BSET    SCI_CTS_PORT, #SCI_CTS_PIN              ;set CTS (prohibit RX data) (SCI_DEASSERT_CTS)
0015C4 03F1C4 20 09                                           JOB     SCI_ISR_RX_16                           ;done
                                                              ;Buffer overflow
0015C6 03F1C6 -> $15C6                SCI_ISR_RX_14           EQU     *
0015C6 03F1C6 1C 19 E1 10                                     BSET    SCI_STAT,#SCI_STAT_SWOR                 ;set SWOR status
0015CA 03F1CA 20 03                                           JOB     SCI_ISR_RX_16
                                                              ;Enable TX interrupt
0015CC 03F1CC 4C CB 80                SCI_ISR_RX_15           BSET    SCICR2, #TXIE                           ;enable TX interrupt
                                                              ;Done
0015CF 03F1CF MACRO                   SCI_ISR_RX_16           ISTACK_RTI                                      ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
0015CF 03F1CF 0B                                              RTI                                                      (ISTACK_RTI)
0015D0 03F1D0 -> $1562                SCI_ISR_RX_17           EQU     SCI_ISR_TX_4                            ;done
0015D0 03F1D0 -> $15D0                SCI_CODE_END            EQU     *
0015D0 03F1D0 -> $3F1D0               SCI_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001400 03F000                                                 ORG     SCI_TABS_START, SCI_TABS_START_LIN
001400 03F000 -> $1400                SCI_TABS_END            EQU     *
001400 03F000 -> $3F000               SCI_TABS_END_LIN        EQU     @
                                      ;#######################################################x#######################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;TIM configuration
                                      ;-----------------
                                      ;TIM instance
001400 03F000 -> $0040                LED_TIM                 EQU     TIOS            ;default is the TIM instance associated with TIOS
                                      ;Output compare channel
001400 03F000 -> $0003                LED_OC                  EQU     3               ;default is OC3
                                      ;LED C
001400 03F000 -> $0001                LED_C_BLINK_OFF         EQU     1               ;blink patterns disabled by default
001400 03F000 -> $0258                LED_C_PORT              EQU     PTP             ;default is port P
001400 03F000 -> $0004                LED_C_PIN               EQU     PP2             ;default is PP2
                                      ;LED D
001400 03F000 -> $0001                LED_D_BLINK_OFF         EQU     1               ;blink patterns disabled by default
001400 03F000 -> $0258                LED_D_PORT              EQU     PTP             ;default is port P
001400 03F000 -> $0008                LED_D_PIN               EQU     PP3             ;default is PP3
                                      ;Non-requrring sequences
001400 03F000 -> $00C0                LED_NONREC_MASK         EQU     $C0             ;default is patterns 7 and 8
                                      ; TIOS
001400 03F000 -> $0000                LED_TIOS_INIT           EQU     0
                                      ;#Output compare register
001400 03F000 -> $0056                LED_OC_TC               EQU     LED_TIM+(TC0-TIOS)+(2*LED_OC)
                                      ;#Timer intervall
                                      ;LED_OC_CNT_RST         EQU     (TIM_FREQ/4)>>17                ;1/4 sec
001400 03F000 -> $002F                LED_OC_CNT_RST          EQU     TIM_FREQ>>19                    ;1/8 sec
                                      ;#Request masks
001400 03F000 -> $00FE                LED_TIMED_REQS          EQU     $FE                             ;mask for timed requests
001400 03F000 -> $00C0                LED_NONREC_REQS         EQU     $C0                             ;mask for non-recurring requests
                                      ;#Signal indexes
001400 03F000 -> $0007                LED_SEQ_SHORT_PULSE     EQU     7
001400 03F000 -> $0006                LED_SEQ_L0NG_PULSE      EQU     6
001400 03F000 -> $0005                LED_SEQ_FAST_BLINK      EQU     5
001400 03F000 -> $0004                LED_SEQ_SLOW_BLINK      EQU     4
001400 03F000 -> $0003                LED_SEQ_SINGLE_GAP      EQU     3
001400 03F000 -> $0002                LED_SEQ_DOUBLE_GAP      EQU     2
001400 03F000 -> $0001                LED_SEQ_HEART_BEAT      EQU     1
001400 03F000 -> $0000                LED_SEQ_ON              EQU     0
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
0019F5 0019F5                                                 ORG     LED_VARS_START, LED_VARS_START_LIN
0019F5 0019F5 -> $19F5                LED_VARS_END            EQU     *
0019F5 0019F5 -> $19F5                LED_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F890 03F890                                                 ORG     LED_CODE_START, LED_CODE_START_LIN
00F890 03F890 -> $F890                LED_CODE_END            EQU     *
00F890 03F890 -> $3F890               LED_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F94B 03F94B                                                 ORG     LED_TABS_START, LED_TABS_START_LIN
00F94B 03F94B -> $F94B                LED_TABS_END            EQU     *
00F94B 03F94B -> $3F94B               LED_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#ASCII code
00F94B 03F94B -> $0004                STRING_SYM_EOT          EQU     $04     ;EOT (ctrl-D)
00F94B 03F94B -> $0007                STRING_SYM_BEEP         EQU     $07     ;acoustic signal
00F94B 03F94B -> $0008                STRING_SYM_BACKSPACE    EQU     $08     ;backspace symbol
00F94B 03F94B -> $0009                STRING_SYM_TAB          EQU     $09     ;tab symbol
00F94B 03F94B -> $000A                STRING_SYM_LF           EQU     $0A     ;line feed symbol
00F94B 03F94B -> $000D                STRING_SYM_CR           EQU     $0D     ;carriage return symbol
00F94B 03F94B -> $0020                STRING_SYM_SPACE        EQU     $20     ;space (first printable ASCII character)
00F94B 03F94B -> $007E                STRING_SYM_TILDE        EQU     $7E     ;"~" (last printable ASCII character)
00F94B 03F94B -> $007F                STRING_SYM_DEL          EQU     $7F     ;delete symbol
                                      ;#String ternination
00F94B 03F94B -> $0080                STRING_TERM             EQU     $80     ;MSB for string termination
                                      ;#Line break
00F94B 03F94B -> $000D                STRING_NL_1ST           EQU     STRING_SYM_CR
00F94B 03F94B -> $000A                STRING_NL_2ND           EQU     STRING_SYM_LF
00F94B 03F94B -> $0D0A                STRING_NL               EQU     ((STRING_NL_1ST<<8)|STRING_NL_2ND)
00F94B 03F94B -> $0002                STRING_NL_BYTE_COUNT    EQU     2
                                      ;#Empty string
00F94B 03F94B -> $0000                STRING_EMPTY            EQU     $0000
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
0019E2 0019E2                                                 ORG     STRING_VARS_START, STRING_VARS_START_LIN
0019E2 0019E2 -> $19E2                STRING_VARS_END         EQU     *
0019E2 0019E2 -> $19E2                STRING_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
0015D0 03F1D0                                                 ORG     STRING_CODE_START, STRING_CODE_START_LIN
                                      ;#Basic print function - non-blocking
                                      ; args:   X:      start of the string
                                      ; result: X:      remaining string (points to the byte after the string, if successful)
                                      ;         C-flag: set if successful
                                      ; SSTACK: 8 bytes
                                      ;         Y and D are preserved
0015D0 03F1D0 -> $15D0                STRING_PRINT_NB         EQU     *
                                                              ;Save registers (string pointer in X)
0015D0 03F1D0 37                                              PSHB                            ;save B
                                                              ;Print characters (string pointer in X)
0015D1 03F1D1 E6 30                   STRING_PRINT_NB_1       LDAB    1,X+                    ;get next ASCII character
0015D3 03F1D3 2B 0A                                           BMI     STRING_PRINT_NB_3       ;last character
0015D5 03F1D5 16 14 1A                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0015D8 03F1D8 25 F7                                           BCS     STRING_PRINT_NB_1
                                                              ;Adjust string pointer (next string pointer in X)
0015DA 03F1DA 09                      STRING_PRINT_NB_2       DEX
                                                              ;Restore registers (string pointer in X)
0015DB 03F1DB MACRO                                           SSTACK_PREPULL  3
0015DB 03F1DB 33                                              PULB
                                                              ;Signal failure (string pointer in X)
0015DC 03F1DC 10 FE                                           CLC
                                                              ;Done
0015DE 03F1DE 3D                                              RTS
                                                              ;Print last character (next string pointer in X, last char in B)
0015DF 03F1DF C4 7F                   STRING_PRINT_NB_3       ANDB    #$7F                    ;remove termination bit
0015E1 03F1E1 16 14 1A                                        JOBSR   SCI_TX_NB               ;print character non blocking (SSTACK: 5 bytes)
0015E4 03F1E4 24 F4                                           BCC     STRING_PRINT_NB_2
                                                              ;Restore registers (next string pointer in X)
0015E6 03F1E6 MACRO                                           SSTACK_PREPULL  3
0015E6 03F1E6 33                                              PULB
                                                              ;Signal success (next string pointer in X)
0015E7 03F1E7 14 01                                           SEC
                                                              ;Done
0015E9 03F1E9 3D                                              RTS
                                      ;#Basic print function - blocking
                                      ; args:   X:      start of the string
                                      ; result: X;      points to the byte after the string
                                      ; SSTACK: 10 bytes
                                      ;         Y and D are preserved
0015EA 03F1EA -> $15EA                STRING_PRINT_BL         EQU     *
0015EA 03F1EA MACRO                                           STRING_MAKE_BL  STRING_PRINT_NB, 8
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (STRING_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (STRING_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function (min. 4)            (STRING_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_MAKE_BL)
0015EA 03F1EA MACRO                                           SCI_MAKE_BL STRING_PRINT_NB, 8                           (STRING_MAKE_BL)
                                      ;#Helper functions                                                               (STRING_MAKE_BL/SCI_MAKE_BL)
                                      ;#----------------                                                               (STRING_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (STRING_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (STRING_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (STRING_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (STRING_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (STRING_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (STRING_MAKE_BL/SCI_MAKE_BL)
0015EA 03F1EA 14 10                   LOOP                    SEI                                                      (STRING_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (STRING_MAKE_BL/SCI_MAKE_BL)
0015EC 03F1EC 07 E2                                           JOBSR   STRING_PRINT_NB                                  (STRING_MAKE_BL/SCI_MAKE_BL)
0015EE 03F1EE 24 03                                           BCC     WAIT            ;function unsuccessful           (STRING_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (STRING_MAKE_BL/SCI_MAKE_BL)
0015F0 03F1F0 10 EF                                           CLI                                                      (STRING_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (STRING_MAKE_BL/SCI_MAKE_BL)
0015F2 03F1F2 MACRO                                           SSTACK_PREPULL  2                                        (STRING_MAKE_BL/SCI_MAKE_BL)
0015F2 03F1F2 3D                                              RTS                                                      (STRING_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (STRING_MAKE_BL/SCI_MAKE_BL)
0015F3 03F1F3 MACRO                   WAIT                    ISTACK_WAIT                                              (STRING_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (STRING_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (STRING_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (STRING_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (STRING_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (STRING_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0015F3 03F1F3 10 EF                                           CLI                                                      (STRING_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0015F5 03F1F5 3E                                              WAI                                                      (STRING_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (STRING_MAKE_BL/SCI_MAKE_BL)
0015F6 03F1F6 MACRO                                           SSTACK_PREPUSH  8                                        (STRING_MAKE_BL/SCI_MAKE_BL)
0015F6 03F1F6 20 F2                                           JOB     LOOP                                             (STRING_MAKE_BL/SCI_MAKE_BL)
                                      ;#Make ASCII character printable
                                      ; args:   B: ASCII character (w/out termination)
                                      ; result: B: printable ASCII character or "."
                                      ; SSTACK: 2 bytes
                                      ;         X, Y, and A are preserved
0015F8 03F1F8 -> $15F8                STRING_PRINTABLE        EQU     *
0015F8 03F1F8 C1 20                                           CMPB    #$20            ;" "
0015FA 03F1FA 25 04                                           BLO     STRING_PRINTABLE_1
0015FC 03F1FC C1 7E                                           CMPB    #$7E            ;"~"
0015FE 03F1FE 23 02                                           BLS     STRING_PRINTABLE_2
001600 03F200 C6 2E                   STRING_PRINTABLE_1      LDAB    #$2E            ;"."
                                                              ;Done
001602 03F202 MACRO                                           SSTACK_PREPULL  2
001602 03F202 3D                      STRING_PRINTABLE_2      RTS
001603 03F203 -> $1603                STRING_CODE_END         EQU     *
001603 03F203 -> $3F203               STRING_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001400 03F000                                                 ORG     STRING_TABS_START, STRING_TABS_START_LIN
                                      ;Common strings
                                      ;STRING_STR_EXCLAM_NL   DB      "!"     ;exclamation mark + new line
001400 03F000 MACRO                   STRING_STR_NL           STRING_NL_TERM  ;new line
                                      ;#Terminated line break                                                          (STRING_NL_TERM)
001400 03F000 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_TERM)
001401 03F001 8A                                              DB      (STRING_NL_2ND|STRING_TERM)                      (STRING_NL_TERM)
001402 03F002 -> $1402                STRING_TABS_END         EQU     *
001402 03F002 -> $3F002               STRING_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     RESET_VARS_START, RESET_VARS_START_LIN
001994 001994 -> $1994                RESET_VARS_END          EQU     *
001994 001994 -> $1994                RESET_VARS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F7A7 03F7A7                                                 ORG     RESET_CODE_START, RESET_CODE_START_LIN
                                      ;# Entry point for COP reset
                                      ;#==========================
00F7A7 03F7A7 -> $F7A7                RESET_COP_ENTRY         EQU     *
00F7A7 03F7A7                                                 //Run firmware's COP reset handler
00F7A7 03F7A7 18 0B EF 01 20                                  MOVB    #(($FF00-BOOTLOADER_SIZE)>>8), IVBR
00F7AC 03F7AC 05 FB F8 4A                                     JMP     [$FFFA-BOOTLOADER_SIZE]
                                      ;# Entry point for CM reset
                                      ;#=========================
00F7B0 03F7B0 -> $F7B0                RESET_CM_ENTRY          EQU     *
00F7B0 03F7B0                                                 //Run firmware's COP reset handler
00F7B0 03F7B0 18 0B EF 01 20                                  MOVB    #(($FF00-BOOTLOADER_SIZE)>>8), IVBR
00F7B5 03F7B5 05 FB F8 43                                     JMP     [$FFFC-BOOTLOADER_SIZE]
                                      ;# Entry point for common resets
                                      ;#==============================
00F7B9 03F7B9 -> $F594                RESET_EXT_ENTRY         EQU     START_OF_CODE
00F7B9 03F7B9 -> $F7B9                RESET_CODE_END          EQU     *
00F7B9 03F7B9 -> $3F7B9               RESET_CODE_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F94B 03F94B                                                 ORG     RESET_TABS_START, RESET_TABS_START_LIN
00F94B 03F94B -> $F94B                RESET_TABS_END          EQU     *
00F94B 03F94B -> $3F94B               RESET_TABS_END_LIN      EQU     @
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     LRE_VARS_START, LRE_VARS_START_LIN
001994 001994 -> $1994                LRE_VARS_END            EQU     *
001994 001994 -> $1994                LRE_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F7B9 03F7B9                                                 ORG     LRE_CODE_START, LRE_CODE_START_LIN
00F7B9 03F7B9 -> $F7B9                LRE_CODE_END            EQU     *
00F7B9 03F7B9 -> $3F7B9               LRE_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F94B 03F94B                                                 ORG     LRE_TABS_START, LRE_TABS_START_LIN
00F94B 03F94B -> $F94B                LRE_TABS_END            EQU     *
00F94B 03F94B -> $3F94B               LRE_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;Prescaler value
                                      ;---------------
00F94B 03F94B -> $0018                NVM_FDIV_VAL            EQU     (CLOCK_BUS_FREQ/1000000)-1 ;FTMRG clock divider
                                      ;Program buffer
                                      ;--------------
00F94B 03F94B -> $0010                NVM_BUF_DEPTH           EQU     16                      ;max. 32 entries
                                      ;Firmware range
                                      ;--------------
00F94B 03F94B -> $4000                NVM_FIRMWARE_START_LIN  EQU     MMAP_FLASH_F_END_LIN-MMAP_FLASH_SIZE
00F94B 03F94B -> $3F000               NVM_FIRMWARE_END_LIN    EQU     MMAP_FLASH_F_END_LIN-BOOTLOADER_SIZE
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Sector size
00F94B 03F94B -> $0200                NVM_SECTOR_SIZE         EQU     512                     ;sector size  [bytes]
00F94B 03F94B -> $0008                NVM_PHRASE_SIZE         EQU     8                       ;phrase size  [bytes]
00F94B 03F94B -> $0004                NVM_ADDR_SIZE           EQU     4                       ;address size [bytes]
                                      ;#Firmware size
00F94B 03F94B -> $3B000               NVM_FIRMWARE_SIZE       EQU     NVM_FIRMWARE_END_LIN-NVM_FIRMWARE_START_LIN
                                      ;#NVM commands
00F94B 03F94B -> $0006                NVM_CMD_PROG            EQU     $06                     ;program P-flash command
00F94B 03F94B -> $000A                NVM_CMD_ERASE           EQU     $0A                     ;erase P-flash sector command
00F94B 03F94B -> $0003                NVM_CMD_VERIFY          EQU     $03                     ;erase verify P-flash section command
                                      ;#NVM fill pattern
00F94B 03F94B -> $00FF                NVM_FILL_PATTERN        EQU     $FF                     ;fill gaps with $FF
                                      ;#Error codes
00F94B 03F94B -> $0008                NVM_ERR_ADDR            EQU     $08                     ;address error
00F94B 03F94B -> $0004                NVM_ERR_HW              EQU     $04                     ;HW error
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
0019F5 0019F5                                                 ORG     NVM_VARS_START, NVM_VARS_START_LIN
0019F5 0019F5                                                 ALIGN   1
0019F6 0019F6                         NVM_DATA_BUF            DS      NVM_BUF_DEPTH*NVM_PHRASE_SIZE
001A76 001A76 -> $1A76                NVM_DATA_BUF_END        EQU     *
001A76 001A76                         NVM_ADDR_BUF            DS      NVM_BUF_DEPTH*NVM_ADDR_SIZE
001AB6 001AB6 -> $1AB6                NVM_ADDR_BUF_END        EQU     *
001AB6 001AB6                         NVM_BUF_IN              DS      1                       ;points to the next free space
001AB7 001AB7                         NVM_BUF_OUT             DS      1                       ;points to the oldest entry
001AB8 001AB8                         NVM_TAGS                DS      NVM_FIRMWARE_SIZE/(8*NVM_SECTOR_SIZE)
001AF3 001AF3 -> $1AF3                NVM_TAGS_END            EQU     *
001AF3 001AF3 -> $1AF3                NVM_VARS_END            EQU     *
001AF3 001AF3 -> $1AF3                NVM_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001603 03F203                                                 ORG     NVM_CODE_START, NVM_CODE_START_LIN
                                      ;#Set the start address of the following input stream (non-blocking)
                                      ; args:   Y:X: address
                                      ; result: none
                                      ; SSTACK: 21 bytes
                                      ;         All registers are preserved
001603 03F203 -> $1603                NVM_SET_ADDR_NB         EQU     *
                                                              ;Save registers (address in Y:X)
001603 03F203 35                                              PSHY                                            ;save Y (SP+5)
001604 03F204 34                                              PSHX                                            ;save X (SP+3)
001605 03F205 B7 81                                           EXG     A, B                                    ;adjust D for RTI unstacking
001607 03F207 3B                                              PSHD                                            ;save B:A (SP+1)
001608 03F208 10 FE                                           CLC                                             ;signal fail by default
00160A 03F20A 39                                              PSHC                                            ;save C (SP+0)
                                                              ;Check if phrase address matches (upper address word in Y)
00160B 03F20B CE 1A 76                                        LDX     #NVM_ADDR_BUF                           ;address buffer -> X
00160E 03F20E B6 1A B6                                        LDAA    NVM_BUF_IN                              ;IN -> A
001611 03F211 84 F8                                           ANDA    #~(NVM_PHRASE_SIZE-1)                   ;phrase offset -> A
001613 03F213 44                                              LSRA                                            ;address buffer offset -> X
001614 03F214 1A E4                                           LEAX    A,X                                     ;address pointer -> X
001616 03F216 AD 00                                           CPY     0,X                                     ;compare upper address word
001618 03F218 26 24                                           BNE     NVM_SET_ADDR_NB_5                       ;mismatch
00161A 03F21A EC 83                                           LDD     3,SP                                    ;lower address word -> D
00161C 03F21C C4 F8                                           ANDB    #~(NVM_PHRASE_SIZE-1)                   ;align address
00161E 03F21E AC 02                                           CPD     2,X                                     ;compare lower address word
001620 03F220 26 1C                                           BNE     NVM_SET_ADDR_NB_5                       ;mismatch
                                                              ;Check for gap to fill (upper address word in Y, address pointer in X)
001622 03F222 A6 84                   NVM_SET_ADDR_NB_1       LDAA    4,SP                                    ;lowest address byte -> A
001624 03F224 84 07                                           ANDA    #(NVM_PHRASE_SIZE-1)                    ;byte offset -> A
001626 03F226 F6 1A B6                                        LDAB    NVM_BUF_IN                              ;IN -> B
001629 03F229 C4 07                                           ANDB    #(NVM_PHRASE_SIZE-1)                    ;byte offset -> B
00162B 03F22B 18 16                                           SBA                                             ;A - B -> A
00162D 03F22D 2B 0F                                           BMI     NVM_SET_ADDR_NB_5                       ;mismatch
00162F 03F22F 27 09                                           BEQ     NVM_SET_ADDR_NB_3                       ;done
001631 03F231 C6 FF                                           LDAB    #NVM_FILL_PATTERN                       ;fill pattern -> B
001633 03F233 MACRO                   NVM_SET_ADDR_NB_2       NVM_PGM_BYTE_NB                                 ;program one byte (SSTACK: 9  bytes)
                                      ;#Program one byte (non-blocking)                                                (NVM_PGM_BYTE_NB)
                                      ; args:   B: data                                                                (NVM_PGM_BYTE_NB)
                                      ; result: C-flag: set if successful                                              (NVM_PGM_BYTE_NB)
                                      ; SSTACK: 9  bytes                                                               (NVM_PGM_BYTE_NB)
                                      ;         All registers are preserved                                            (NVM_PGM_BYTE_NB)
001633 03F233 MACRO                                           SSTACK_JOBSR    NVM_PGM_BYTE_NB, 9                       (NVM_PGM_BYTE_NB)
                                      ;#Check stack and call subroutine                                                (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
001633 03F233 07 53                                           JOBSR   NVM_PGM_BYTE_NB                                  (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
001635 03F235 24 06                                           BCC     NVM_SET_ADDR_NB_4                       ;signal failure
001637 03F237 04 30 F9                                        DBNE    A, NVM_SET_ADDR_NB_2
                                                              ;Signal success
00163A 03F23A 0C 80 01                NVM_SET_ADDR_NB_3       BSET    0,SP, #$01                              ;set C-flag
                                                              ;Done
00163D 03F23D MACRO                   NVM_SET_ADDR_NB_4       SSTACK_PREPULL  9                               ;check SSTACK
00163D 03F23D 0B                                              RTI                                             ;done
                                                              ;Flush on address mismatch (upper address word in Y)
00163E 03F23E MACRO                   NVM_SET_ADDR_NB_5       NVM_FLUSH_NB                                    ;flush phrase (SSTACK: 12 bytes)
                                      ;#Submit current phrase for programming (non-blocking)                           (NVM_FLUSH_NB)
                                      ; args:   none                                                                   (NVM_FLUSH_NB)
                                      ; result: C-flag: set if successful                                              (NVM_FLUSH_NB)
                                      ; SSTACK: 19 bytes                                                               (NVM_FLUSH_NB)
                                      ;         All registers are preserved                                            (NVM_FLUSH_NB)
00163E 03F23E MACRO                                           SSTACK_JOBSR    NVM_FLUSH_NB, 12                         (NVM_FLUSH_NB)
                                      ;#Check stack and call subroutine                                                (NVM_FLUSH_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_FLUSH_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_FLUSH_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_FLUSH_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_FLUSH_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_FLUSH_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_FLUSH_NB/SSTACK_JOBSR)
00163E 03F23E 07 25                                           JOBSR   NVM_FLUSH_NB                                     (NVM_FLUSH_NB/SSTACK_JOBSR)
001640 03F240 24 FB                                           BCC     NVM_SET_ADDR_NB_4                       ;signal failure
                                                              ;Update address pointer (upper address word in Y
001642 03F242 CE 1A 76                                        LDX     #NVM_ADDR_BUF                           ;address buffer -> X
001645 03F245 B6 1A B6                                        LDAA    NVM_BUF_IN                              ;IN -> A
001648 03F248 84 F8                                           ANDA    #~(NVM_PHRASE_SIZE-1)                   ;phrase offset -> A
00164A 03F24A 44                                              LSRA                                            ;address buffer offset -> X
00164B 03F24B 1A E4                                           LEAX    A,X                                     ;address pointer -> X
                                                              ;Set phrase address (upper address word in Y, address pointer in X)
00164D 03F24D 6D 00                                           STY     0,X                                     ;set upper address word
00164F 03F24F EC 83                                           LDD     3,SP                                    ;lower address word -> D
001651 03F251 C4 F8                                           ANDB    #~(NVM_PHRASE_SIZE-1)                   ;align address
001653 03F253 6C 02                                           STD     2,X                                     ;set lower address word
001655 03F255 20 CB                                           JOB     NVM_SET_ADDR_NB_1                       ;fill gap
                                      ;#Set the start address of the following input stream (blocking)
                                      ; args:   Y:X: address
                                      ; result: none
                                      ; SSTACK: 23 bytes
                                      ;         All registers are preserved
001657 03F257 -> $1657                NVM_SET_ADDR_BL         EQU     *
                                                              ;NVM_SHOW_ADDR                                  ;debug output
001657 03F257 MACRO                                           NVM_MAKE_BL     NVM_SET_ADDR_NB, 21
                                      ;#Helper functions                                                               (NVM_MAKE_BL)
                                      ;#----------------                                                               (NVM_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NVM_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (NVM_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NVM_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NVM_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NVM_MAKE_BL)
001657 03F257 MACRO                                           SCI_MAKE_BL NVM_SET_ADDR_NB 21                           (NVM_MAKE_BL)
                                      ;#Helper functions                                                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#----------------                                                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (NVM_MAKE_BL/SCI_MAKE_BL)
001657 03F257 14 10                   LOOP                    SEI                                                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (NVM_MAKE_BL/SCI_MAKE_BL)
001659 03F259 07 A8                                           JOBSR   NVM_SET_ADDR_NB                                  (NVM_MAKE_BL/SCI_MAKE_BL)
00165B 03F25B 24 03                                           BCC     WAIT            ;function unsuccessful           (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (NVM_MAKE_BL/SCI_MAKE_BL)
00165D 03F25D 10 EF                                           CLI                                                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (NVM_MAKE_BL/SCI_MAKE_BL)
00165F 03F25F MACRO                                           SSTACK_PREPULL  2                                        (NVM_MAKE_BL/SCI_MAKE_BL)
00165F 03F25F 3D                                              RTS                                                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (NVM_MAKE_BL/SCI_MAKE_BL)
001660 03F260 MACRO                   WAIT                    ISTACK_WAIT                                              (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
001660 03F260 10 EF                                           CLI                                                      (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
001662 03F262 3E                                              WAI                                                      (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (NVM_MAKE_BL/SCI_MAKE_BL)
001663 03F263 MACRO                                           SSTACK_PREPUSH  21                                       (NVM_MAKE_BL/SCI_MAKE_BL)
001663 03F263 20 F2                                           JOB     LOOP                                             (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#Submit current phrase for programming (non-blocking)
                                      ; args:   none
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 12 bytes
                                      ;         All registers are preserved
001665 03F265 -> $1665                NVM_FLUSH_NB            EQU     *
                                                              ;Save registers
001665 03F265 36                                              PSHA                                            ;save A
001666 03F266 14 01                                           SEC                                             ;signal success by default
001668 03F268 39                                              PSHC                                            ;save CCR
                                                              ;Complete phrase
001669 03F269 C6 FF                                           LDAB    #NVM_FILL_PATTERN                       ;fill pattern -> B
00166B 03F26B 1F 1A B6 07 07          NVM_FLUSH_NB_1          BRCLR   NVM_BUF_IN,#(NVM_PHRASE_SIZE-1),NVM_FLUSH_NB_2;phrase is complete
001670 03F270 MACRO                                           NVM_PGM_BYTE_NB                                 ;program one byte (SSTACK: 9  bytes)
                                      ;#Program one byte (non-blocking)                                                (NVM_PGM_BYTE_NB)
                                      ; args:   B: data                                                                (NVM_PGM_BYTE_NB)
                                      ; result: C-flag: set if successful                                              (NVM_PGM_BYTE_NB)
                                      ; SSTACK: 9  bytes                                                               (NVM_PGM_BYTE_NB)
                                      ;         All registers are preserved                                            (NVM_PGM_BYTE_NB)
001670 03F270 MACRO                                           SSTACK_JOBSR    NVM_PGM_BYTE_NB, 9                       (NVM_PGM_BYTE_NB)
                                      ;#Check stack and call subroutine                                                (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
001670 03F270 07 16                                           JOBSR   NVM_PGM_BYTE_NB                                  (NVM_PGM_BYTE_NB/SSTACK_JOBSR)
001672 03F272 25 F7                                           BCS     NVM_FLUSH_NB_1                          ;success
                                                              ;Signal failure
001674 03F274 0D 80 01                                        BCLR    0,SP, #$01                              ;clear C-flag
                                                              ;Restore registers
001677 03F277 MACRO                   NVM_FLUSH_NB_2          SSTACK_PREPULL  4                               ;check SSTACK
001677 03F277 38                                              PULC                                            ;restore CCR (incl. result)
001678 03F278 33                                              PULB                                            ;restore B
                                                              ;Done
001679 03F279 3D                                              RTS
                                      ;#Submit current phrase for programming (blocking)
                                      ; args:   none
                                      ; result: none
                                      ; SSTACK: 14 bytes
                                      ;         All registers are preserved
00167A 03F27A -> $167A                NVM_FLUSH_BL            EQU     *
00167A 03F27A MACRO                                           NVM_MAKE_BL     NVM_FLUSH_NB, 12
                                      ;#Helper functions                                                               (NVM_MAKE_BL)
                                      ;#----------------                                                               (NVM_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NVM_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (NVM_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NVM_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NVM_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NVM_MAKE_BL)
00167A 03F27A MACRO                                           SCI_MAKE_BL NVM_FLUSH_NB 12                              (NVM_MAKE_BL)
                                      ;#Helper functions                                                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#----------------                                                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (NVM_MAKE_BL/SCI_MAKE_BL)
00167A 03F27A 14 10                   LOOP                    SEI                                                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (NVM_MAKE_BL/SCI_MAKE_BL)
00167C 03F27C 07 E7                                           JOBSR   NVM_FLUSH_NB                                     (NVM_MAKE_BL/SCI_MAKE_BL)
00167E 03F27E 24 03                                           BCC     WAIT            ;function unsuccessful           (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (NVM_MAKE_BL/SCI_MAKE_BL)
001680 03F280 10 EF                                           CLI                                                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (NVM_MAKE_BL/SCI_MAKE_BL)
001682 03F282 MACRO                                           SSTACK_PREPULL  2                                        (NVM_MAKE_BL/SCI_MAKE_BL)
001682 03F282 3D                                              RTS                                                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (NVM_MAKE_BL/SCI_MAKE_BL)
001683 03F283 MACRO                   WAIT                    ISTACK_WAIT                                              (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
001683 03F283 10 EF                                           CLI                                                      (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
001685 03F285 3E                                              WAI                                                      (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (NVM_MAKE_BL/SCI_MAKE_BL)
001686 03F286 MACRO                                           SSTACK_PREPUSH  12                                       (NVM_MAKE_BL/SCI_MAKE_BL)
001686 03F286 20 F2                                           JOB     LOOP                                             (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#Program one byte (non-blocking)
                                      ; args:   B: data
                                      ; result: C-flag: set if successful
                                      ; SSTACK: 9  bytes
                                      ;         All registers are preserved
001688 03F288 -> $1688                NVM_PGM_BYTE_NB         EQU     *
                                                              ;Save registers (data in B)
001688 03F288 35                                              PSHY                                            ;save Y (SP+5)
001689 03F289 34                                              PSHX                                            ;save X (SP+3)
00168A 03F28A 36                                              PSHA                                            ;save A (SP+2)
00168B 03F28B 37                                              PSHB                                            ;save B (SP+1)
00168C 03F28C 10 FE                                           CLC                                             ;signal fail by default
00168E 03F28E 39                                              PSHC                                            ;save C (SP+0)
                                                              ;Store data byte (data in B)
00168F 03F28F CD 19 F6                                        LDY     #NVM_DATA_BUF                           ;data buffer -> Y
001692 03F292 B6 1A B6                                        LDAA    NVM_BUF_IN                              ;IN -> A
001695 03F295 6B EC                                           STAB    A,Y                                     ;store data
001697 03F297 18 0E                                           TAB                                             ;IN -> B
001699 03F299 42                                              INCA                                            ;advance IN
00169A 03F29A 84 7F                                           ANDA    #((NVM_BUF_DEPTH*NVM_PHRASE_SIZE)-1)    ;wrap IN
00169C 03F29C B1 1A B7                                        CMPA    NVM_BUF_OUT                             ;check if buffer is full
00169F 03F29F 27 29                                           BEQ     NVM_PGM_BYTE_NB_2                       ;signal failure (buffer is full)
0016A1 03F2A1 7A 1A B6                                        STAA    NVM_BUF_IN                              ;update IN
                                                              ;Check if phrase is complete (new IN in A, old IN in B)
0016A4 03F2A4 85 07                                           BITA    #(NVM_PHRASE_SIZE-1)                    ;check if phrase is complete
0016A6 03F2A6 26 1F                                           BNE     NVM_PGM_BYTE_NB_1                       ;phrase is still incomplete
                                                              ;Set new phrase address (new IN in A, old IN in B)
0016A8 03F2A8 84 F8                                           ANDA    #~(NVM_PHRASE_SIZE-1)                   ;new phrase offset -> A
0016AA 03F2AA C4 F8                                           ANDB    #~(NVM_PHRASE_SIZE-1)                   ;old phrase offset -> A
0016AC 03F2AC 49                                              LSRD                                            ;new address offset -> A, old address offset -> B
0016AD 03F2AD CE 1A 76                                        LDX     #NVM_ADDR_BUF                           ;address buffer -> X
0016B0 03F2B0 19 E5                                           LEAY    B,X                                     ;old address pointer -> Y
0016B2 03F2B2 1A E4                                           LEAX    A,X                                     ;new address pointer -> X
0016B4 03F2B4 EC 42                                           LDD     2,Y                                     ;old lower address word -> D
0016B6 03F2B6 C3 00 08                                        ADDD    #NVM_PHRASE_SIZE                        ;advance lower address word
0016B9 03F2B9 6C 02                                           STD     2,X                                     ;update lower address word
0016BB 03F2BB EC 40                                           LDD     0,Y                                     ;upper address word -> D
0016BD 03F2BD C9 00                                           ADCB    #0                                      ;advance upper address word
0016BF 03F2BF 89 00                                           ADCA    #0                                      ;
0016C1 03F2C1 6C 00                                           STD     0,X                                     ;update upper address word
                                                              ;Submit complete phrase to NVM (new IN in A, old IN in B)
                                                              ;NVM_SHOW_BUF                                   ;debug output
0016C3 03F2C3 1C 01 04 80                                     BSET    FCNFG, #CCIE                            ;enable interrupt
                                                              ;Signal success
0016C7 03F2C7                         NVM_PGM_BYTE_NB_1       ;NVM_SHOW_BUF                                   ;debug output
0016C7 03F2C7 0C 80 01                                        BSET    0,SP, #$01                              ;set C-flag
                                                              ;Done
0016CA 03F2CA MACRO                   NVM_PGM_BYTE_NB_2       SSTACK_PREPULL  9                               ;check SSTACK
0016CA 03F2CA 0B                                              RTI
                                      ;#Program one byte (blocking)
                                      ; args:   B: data
                                      ; result: none
                                      ; SSTACK: 11 bytes
                                      ;         All registers are preserved
0016CB 03F2CB -> $16CB                NVM_PGM_BYTE_BL         EQU     *
                                                              ;NVM_SHOW_BYTE                                  ;debug output
0016CB 03F2CB MACRO                                           NVM_MAKE_BL     NVM_PGM_BYTE_NB, 9
                                      ;#Helper functions                                                               (NVM_MAKE_BL)
                                      ;#----------------                                                               (NVM_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NVM_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (NVM_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NVM_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NVM_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NVM_MAKE_BL)
0016CB 03F2CB MACRO                                           SCI_MAKE_BL NVM_PGM_BYTE_NB 9                            (NVM_MAKE_BL)
                                      ;#Helper functions                                                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#----------------                                                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#Turn a non-blocking subroutine into a blocking subroutine                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ; args:   1: non-blocking function                                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;         2: subroutine stack usage of non-blocking function                     (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ; SSTACK: stack usage of non-blocking function + 2                               (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;         rgister output of the non-blocking function is preserved               (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Disable interrupts                                      (NVM_MAKE_BL/SCI_MAKE_BL)
0016CB 03F2CB 14 10                   LOOP                    SEI                                                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Call non-blocking function                              (NVM_MAKE_BL/SCI_MAKE_BL)
0016CD 03F2CD 07 B9                                           JOBSR   NVM_PGM_BYTE_NB                                  (NVM_MAKE_BL/SCI_MAKE_BL)
0016CF 03F2CF 24 03                                           BCC     WAIT            ;function unsuccessful           (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Enable interrupts                                       (NVM_MAKE_BL/SCI_MAKE_BL)
0016D1 03F2D1 10 EF                                           CLI                                                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Done                                                    (NVM_MAKE_BL/SCI_MAKE_BL)
0016D3 03F2D3 MACRO                                           SSTACK_PREPULL  2                                        (NVM_MAKE_BL/SCI_MAKE_BL)
0016D3 03F2D3 3D                                              RTS                                                      (NVM_MAKE_BL/SCI_MAKE_BL)
                                                              ;Wait for next interrupt                                 (NVM_MAKE_BL/SCI_MAKE_BL)
0016D4 03F2D4 MACRO                   WAIT                    ISTACK_WAIT                                              (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#Wait until any interrupt has been serviced                                     (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; args:   none                                                                   (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ; SSTACK: none                                                                   (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                      ;         X, Y, and D are preserved                                              (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Wait for the next interrupt                             (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0016D4 03F2D4 10 EF                                           CLI                                                      (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
0016D6 03F2D6 3E                                              WAI                                                      (NVM_MAKE_BL/SCI_MAKE_BL/ISTACK_WAIT)
                                                              ;Try again                                               (NVM_MAKE_BL/SCI_MAKE_BL)
0016D7 03F2D7 MACRO                                           SSTACK_PREPUSH  9                                        (NVM_MAKE_BL/SCI_MAKE_BL)
0016D7 03F2D7 20 F2                                           JOB     LOOP                                             (NVM_MAKE_BL/SCI_MAKE_BL)
                                      ;#Command complete interrupt
                                      ;---------------------------
0016D9 03F2D9 -> $16D9                NVM_ISR_CC              EQU     *
                                                              ;Clear busy signal
0016D9 03F2D9 MACRO                                           LED_OFF A                                       ;not busy anymore
                                      ;#Turn off non-blinking LED                                                      (LED_OFF)
                                      ; args:   1: LED index (A..D)                                                    (LED_OFF)
                                      ; result: none                                                                   (LED_OFF)
                                      ; SSTACK: none                                                                   (LED_OFF)
                                      ;         X, Y and D are preserved                                               (LED_OFF)
0016D9 03F2D9 4C 08 01                                        BSET    LED_A_PORT, #LED_A_PIN        ;set port pin      (LED_OFF)
                                                              ;Check for errors of previous operation
0016DC 03F2DC F6 01 06                                        LDAB    FSTAT                                   ;FSTAT -> B
0016DF 03F2DF C4 33                                           ANDB    #(ACCERR|FPVIOL|MGSTAT1|MGSTAT0)        ;mask error flags
0016E1 03F2E1 18 26 00 8C                                     BNE     NVM_ISR_CC_7                            ;error detected
                                                              ;Check if data is available for programming
0016E5 03F2E5 FC 1A B6                                        LDD     NVM_BUF_IN                              ;IN:OUT -> A:B
0016E8 03F2E8 84 F8                                           ANDA    #~(NVM_PHRASE_SIZE-1)                   ;align in to phrase boundary
0016EA 03F2EA 18 17                                           CBA                                             ;compare pointers
0016EC 03F2EC 18 27 00 90                                     BEQ     NVM_ISR_CC_10                           ;buffer is empty
                                                              ;Get phrase address (OUT in B)
0016F0 03F2F0 CD 1A 76                                        LDY     #NVM_ADDR_BUF                           ;address buffer -> Y
0016F3 03F2F3 54                                              LSRB                                            ;buffer offset -> B
0016F4 03F2F4 19 ED                                           LEAY    B,Y                                     ;address pointer -> Y
                                                              ;Check phrase address (address pointer in Y)
0016F6 03F2F6 EE 40                                           LDX     0,Y                                     ;upper address word -> X
0016F8 03F2F8 27 05                                           BEQ     NVM_ISR_CC_1                            ;address < 64K
0016FA 03F2FA 8E 00 00                                        CPX     #(NVM_FIRMWARE_START_LIN>>16)           ;check lower boundary
0016FD 03F2FD 24 07                                           BHS     NVM_ISR_CC_2                            ;address is within range
0016FF 03F2FF EE 42                   NVM_ISR_CC_1            LDX     2,Y                                     ;lower address word -> X
001701 03F301 8E F0 00                                        CPX     #NVM_FIRMWARE_END_LIN                   ;check upper boundary
001704 03F304 24 71                                           BHS     NVM_ISR_CC_8                            ;address out of range
                                                              ;Set phrase address (address pointer in Y)
001706 03F306 79 01 02                NVM_ISR_CC_2            CLR     FCCOBIX                                 ;reset CCOB index
001709 03F309 18 0B 06 01 0A                                  MOVB    #NVM_CMD_PROG, FCCOBHI                  ;set command byte (program P-flash)
00170E 03F30E 18 0D 41 01 0B                                  MOVB    1,Y, FCCOBLO                            ;set upper address byte
001713 03F313 72 01 02                                        INC     FCCOBIX                                 ;advance CCOB index
001716 03F316 18 05 42 01 0A                                  MOVW    2,Y, FCCOBHI                            ;set lower address word
                                                              ;Determine tag address (address pointer in Y)
00171B 03F31B EC 41                                           LDD     1,Y                                     ;address/256 -> D
00171D 03F31D 49                                              LSRD                                            ;sector address -> D
00171E 03F31E B7 45                                           TFR     D, X                                    ;sector address -> X
001720 03F320 49                                              LSRD                                            ;sector address/8 -> D
001721 03F321 49                                              LSRD                                            ;
001722 03F322 49                                              LSRD                                            ;
001723 03F323 B7 C5                                           EXG     D, X                                    ;sector address/8 -> X, sector address -> D
001725 03F325 1A E2 1A B4                                     LEAX    (NVM_TAGS-(NVM_FIRMWARE_START_LIN>>12)),X;tag address -> X
                                                              ;Determine tag bit (tag address in X, sector address/8 in D)
001729 03F329 86 01                                           LDAA    #1                                      ;bit 0 -> A
00172B 03F32B C4 07                                           ANDB    #(NVM_PHRASE_SIZE-1)                    ;bit offset -> B
00172D 03F32D 27 04                                           BEQ     NVM_ISR_CC_4                            ;bit offset = 0
00172F 03F32F 48                      NVM_ISR_CC_3            LSLA                                            ;shift bit index
001730 03F330 04 31 FC                                        DBNE    B, NVM_ISR_CC_3                         ;tag bit -> A
                                                              ;Check tag (tag address in X, tag bit in A)
001733 03F333 18 0E                   NVM_ISR_CC_4            TAB                                             ;tag bit -> B
001735 03F335 E4 00                                           ANDB    0,X                                     ;tag status -> B
001737 03F337 27 4D                                           BEQ     NVM_ISR_CC_11                           ;erase sector
                                                              ;Set data field
001739 03F339 CE 19 F6                                        LDX     #NVM_DATA_BUF                           ;data buffer -> X
00173C 03F33C B6 1A B7                                        LDAA    NVM_BUF_OUT                             ;OUT -> A
00173F 03F33F 1A E4                                           LEAX    A,X                                     ;phrase address -> X
001741 03F341 72 01 02                                        INC     FCCOBIX                                 ;advance CCOB index
001744 03F344 18 05 00 01 0A                                  MOVW    0,X, FCCOBHI                            ;set first data word
001749 03F349 72 01 02                                        INC     FCCOBIX                                 ;advance CCOB index
00174C 03F34C 18 05 02 01 0A                                  MOVW    2,X, FCCOBHI                            ;set first data word
001751 03F351 72 01 02                                        INC     FCCOBIX                                 ;advance CCOB index
001754 03F354 18 05 04 01 0A                                  MOVW    4,X, FCCOBHI                            ;set first data word
001759 03F359 72 01 02                                        INC     FCCOBIX                                 ;advance CCOB index
00175C 03F35C 18 05 06 01 0A                                  MOVW    6,X, FCCOBHI                            ;set first data word
001761 03F361 8B 08                                           ADDA    #NVM_PHRASE_SIZE                        ;advance OUT
001763 03F363 84 7F                                           ANDA    #((NVM_BUF_DEPTH*NVM_PHRASE_SIZE)-1)    ;wrap OUT
001765 03F365 7A 1A B7                                        STAA    NVM_BUF_OUT                             ;update out
                                                              ;Launch NVM command
001768 03F368 MACRO                   NVM_ISR_CC_5            LED_ON A                                        ;show activity
                                      ;#User functions                                                                 (LED_ON)
                                      ;#--------------                                                                 (LED_ON)
                                      ;#Turn on non-blinking LED                                                       (LED_ON)
                                      ; args:   1: LED index (A..D)                                                    (LED_ON)
                                      ; result: none                                                                   (LED_ON)
                                      ; SSTACK: none                                                                   (LED_ON)
                                      ;         X,Y and D are preserved                                                (LED_ON)
001768 03F368 4D 08 01                                        BCLR    LED_A_PORT, #LED_A_PIN        ;clear port pin    (LED_ON)
00176B 03F36B 18 0B 80 01 06                                  MOVB    #CCIF, FSTAT                            ;launch command
                                                              ;BCLR   FCNFG, #CCIE                            ;debug output
                                                              ;CLI                                            ;debug output
                                                              ;NVM_SHOW_CCOB                                  ;debug output
                                                              ;SEI                                            ;debug output
                                                              ;BSET   FCNFG, #CCIE                            ;debug output
                                                              ;Done
001770 03F370 MACRO                   NVM_ISR_CC_6            ISTACK_RTI                                      ;done
                                      ;#Return from interrupt                                                          (ISTACK_RTI)
                                      ; args:   none                                                                   (ISTACK_RTI)
                                      ; ISTACK: -9 (S12)/-10 (S12X)                                                    (ISTACK_RTI)
                                      ;         X, Y, and D are pulled from the interrupt stack                        (ISTACK_RTI)
                                                              ;End ISR                                                 (ISTACK_RTI)
001770 03F370 0B                                              RTI                                                      (ISTACK_RTI)
                                                              ;Error found
001771 03F371 86 04                   NVM_ISR_CC_7            LDAA    #NVM_ERR_HW                             ;HW error -> A
001773 03F373 C5 03                                           BITB    #(MGSTAT1|MGSTAT0)                      ;check for HW error
001775 03F375 26 02                                           BNE     NVM_ISR_CC_9                            ;HW error
001777 03F377 86 08                   NVM_ISR_CC_8            LDAA    #NVM_ERR_ADDR                           ;address error -> A
001779 03F379 1B 89                   NVM_ISR_CC_9            LEAS    9,SP                                    ;free stack space
00177B 03F37B 10 EF                                           CLI                                             ;enable interrupts
00177D 03F37D MACRO                                           NVM_ERROR_HANDLER                               ;handle errors
                                      ;Error handler                                                                   (NVM_ERROR_HANDLER)
                                      ;-------------                                                                   (NVM_ERROR_HANDLER)
                                                              ;Signal error (error code in A)                          (NVM_ERROR_HANDLER)
00177D 03F37D 06 F7 59                                        JOB     BOOTLOADER_DONE         ;end bootloader          (NVM_ERROR_HANDLER)
                                                              ;Buffer is empty
001780 03F380 1D 01 04 80             NVM_ISR_CC_10           BCLR    FCNFG, #CCIE                            ;disable interrupt
001784 03F384 20 EA                                           JOB     NVM_ISR_CC_6                            ;done
                                                              ;Erase sector (tag address in X, tag bit in A)
001786 03F386 AA 00                   NVM_ISR_CC_11           ORAA    0,X                                     ;set tag
001788 03F388 6A 00                                           STAA    0,X                                     ;
00178A 03F38A 79 01 02                                        CLR     FCCOBIX                                 ;reset CCOB index
00178D 03F38D 18 0B 0A 01 0A                                  MOVB    #NVM_CMD_ERASE, FCCOBHI                 ;set command byte (program P-flash)
001792 03F392 72 01 02                                        INC     FCCOBIX                                 ;advance CCOB index
001795 03F395 20 D1                                           JOB     NVM_ISR_CC_5                            ;launch command
001797 03F397 -> $1797                NVM_CODE_END            EQU     *
001797 03F397 -> $3F397               NVM_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001402 03F002                                                 ORG     NVM_TABS_START, NVM_TABS_START_LIN
001402 03F002 -> $1402                NVM_TABS_END            EQU     *
001402 03F002 -> $3F002               NVM_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Configuration                                                               #
                                      ;###############################################################################
                                      ;#NVM phrase size
001402 03F002 -> $0008                SREC_PHRASE_SIZE        EQU     8               ;default is 8 bytes
                                      ;#Address width
001402 03F002 -> $0012                SREC_ADDR_WIDTH         EQU     18              ;default is 10 bit
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;#Error codes
001402 03F002 -> $0080                SREC_ERR_RX             EQU     $80             ;communication error
001402 03F002 -> $0040                SREC_ERR_FORMAT         EQU     $40             ;format error
001402 03F002 -> $0020                SREC_ERR_CHECKSUM       EQU     $20             ;CRC error
001402 03F002 -> $0010                SREC_ERR_COUNT          EQU     $10             ;count error
                                      ;#C0 characters
001402 03F002 -> $000A                SREC_C0_LF              EQU     $0A             ;line feed
                                      ;#Upper address limit
001402 03F002 -> $400000              SREC_MAX_ADDR           EQU     $40_0000        ;highest address
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AF3 001AF3                                                 ORG     SREC_VARS_START, SREC_VARS_START_LIN
001AF3 001AF3                                                 ALIGN   1
001AF4 001AF4                         SREC_COUNT              DS      4               ;S-record count (S0=0, S1/S2/S3=+1)
001AF8 001AF8                         SREC_ADDR               DS      4               ;address field
001AFC 001AFC                         SREC_TYPE               DS      1               ;current type
001AFD 001AFD                         SREC_BYTECOUNT          DS      1               ;byte count
001AFE 001AFE                         SREC_CHECKSUM           DS      1               ;checksum
001AFF 001AFF -> $1AFF                SREC_VARS_END           EQU     *
001AFF 001AFF -> $1AFF                SREC_VARS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
001797 03F397                                                 ORG     SREC_CODE_START, SREC_CODE_START_LIN
                                      ;#Parse S-Records - blocking
                                      ; args:   none
                                      ; result: A:      error code
                                      ; SSTACK: 21 bytes
                                      ;         B, X and Y are preserved
001797 03F397 -> $1797                SREC_PARSE_SREC         EQU     *
                                                              ;Save registers
001797 03F397 34                                              PSHX                                            ;save X
001798 03F398 37                                              PSHB                                            ;save B
                                                              ;Parse header
001799 03F399 MACRO                   SREC_PARSE_SREC_1       SREC_PARSE_HEADER                               ;(SSTACK: 16 bytes)
                                      ;#Parse header - blocking                                                        (SREC_PARSE_HEADER)
                                      ; args:   none                                                                   (SREC_PARSE_HEADER)
                                      ; result: A: error code                                                          (SREC_PARSE_HEADER)
                                      ;         B: type                                                                (SREC_PARSE_HEADER)
                                      ; SSTACK: 16 bytes                                                               (SREC_PARSE_HEADER)
                                      ;         X and Y are preserved                                                  (SREC_PARSE_HEADER)
001799 03F399 MACRO                                           SSTACK_JOBSR    SREC_PARSE_HEADER, 16                    (SREC_PARSE_HEADER)
                                      ;#Check stack and call subroutine                                                (SREC_PARSE_HEADER/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_PARSE_HEADER/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_PARSE_HEADER/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_PARSE_HEADER/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_PARSE_HEADER/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_PARSE_HEADER/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_PARSE_HEADER/SSTACK_JOBSR)
001799 03F399 16 18 76                                        JOBSR   SREC_PARSE_HEADER                                (SREC_PARSE_HEADER/SSTACK_JOBSR)
00179C 03F39C 04 60 1D                                        TBNE    A, SREC_PARSE_SREC_4                    ;error (fail)
                                                              ;Determine srecord handler (type in D)
00179F 03F39F 58                                              LSLB                                            ;jump table offset -> D
0017A0 03F3A0 05 FF                                           JMP [D,PC]                                      ;table lookup
0017A2 03F3A2 17 BF                                           DW      SREC_PARSE_SREC_5                       ;S0 - print header
0017A4 03F3A4 17 E9                                           DW      SREC_PARSE_SREC_8                       ;S1 - flash data
0017A6 03F3A6 17 E9                                           DW      SREC_PARSE_SREC_8                       ;S2 - flash data
0017A8 03F3A8 17 E9                                           DW      SREC_PARSE_SREC_8                       ;S3 - flash data
0017AA 03F3AA 17 B6                                           DW      SREC_PARSE_SREC_2                       ;format error
0017AC 03F3AC 18 26                                           DW      SREC_PARSE_SREC_12                      ;S5 - check count
0017AE 03F3AE 18 26                                           DW      SREC_PARSE_SREC_12                      ;S6 - check count
0017B0 03F3B0 18 44                                           DW      SREC_PARSE_SREC_14                      ;S7 - last S-record
0017B2 03F3B2 18 44                                           DW      SREC_PARSE_SREC_14                      ;S8 - last S-record
0017B4 03F3B4 18 44                                           DW      SREC_PARSE_SREC_14                      ;S9 - last S-record
                                                              ;Format error
0017B6 03F3B6 86 40                   SREC_PARSE_SREC_2       LDAA    #SREC_ERR_FORMAT                        ;return format error
0017B8 03F3B8 20 02                                           JOB     SREC_PARSE_SREC_4                       ;done
                                                              ;Checksum error
0017BA 03F3BA 86 20                   SREC_PARSE_SREC_3       LDAA    #SREC_ERR_CHECKSUM                      ;return checksum error
0017BC 03F3BC MACRO                   SREC_PARSE_SREC_4       SSTACK_PREPULL  5                               ;check SSTACK
0017BC 03F3BC 33                                              PULB                                            ;restore B
0017BD 03F3BD 30                                              PULX                                            ;restore X
0017BE 03F3BE 3D                                              RTS                                             ;done
                                                              ;S0 Record
                                                              ;---------
0017BF 03F3BF 18 03 00 00 1A F4       SREC_PARSE_SREC_5       MOVW    #0000, SREC_COUNT                       ;reset srecord count
0017C5 03F3C5 18 03 00 00 1A F6                               MOVW    #0000, SREC_COUNT+2                     ;
0017CB 03F3CB CE 14 02                                        LDX     #SREC_MSG_S0_HEADER                     ;message header -> X
0017CE 03F3CE MACRO                                           STRING_PRINT_BL                                 ;print message header
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
0017CE 03F3CE MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
0017CE 03F3CE 16 15 EA                                        JOBSR   STRING_PRINT_BL                                  (STRING_PRINT_BL/SSTACK_JOBSR)
0017D1 03F3D1 MACRO                   SREC_PARSE_SREC_6       SREC_PARSE_DATA                                 ;data byte -> B (SSTACK: 14 bytes)
                                      ;#Parse data field - blocking                                                    (SREC_PARSE_DATA)
                                      ; args:   none                                                                   (SREC_PARSE_DATA)
                                      ; result: A:      error code                                                     (SREC_PARSE_DATA)
                                      ;         B:      data                                                           (SREC_PARSE_DATA)
                                      ;         C-flag: set if data is valid                                           (SREC_PARSE_DATA)
                                      ; SSTACK: 14 bytes                                                               (SREC_PARSE_DATA)
                                      ;         X and Y are preserved                                                  (SREC_PARSE_DATA)
0017D1 03F3D1 MACRO                                           SSTACK_JOBSR    SREC_PARSE_DATA, 14                      (SREC_PARSE_DATA)
                                      ;#Check stack and call subroutine                                                (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_PARSE_DATA/SSTACK_JOBSR)
0017D1 03F3D1 16 18 54                                        JOBSR   SREC_PARSE_DATA                                  (SREC_PARSE_DATA/SSTACK_JOBSR)
0017D4 03F3D4 04 70 E5                                        TBNE    A, SREC_PARSE_SREC_4                    ;error (fail)
0017D7 03F3D7 24 08                                           BCC     SREC_PARSE_SREC_7                       ;end of S-record reached
0017D9 03F3D9 MACRO                                           STRING_PRINTABLE                                ;make sure character is printable
                                      ;#Make ASCII character printable                                                 (STRING_PRINTABLE)
                                      ; args:   B: ASCII character (w/out termination)                                 (STRING_PRINTABLE)
                                      ; result: B: printable ASCII character or "."                                    (STRING_PRINTABLE)
                                      ; SSTACK: 2 bytes                                                                (STRING_PRINTABLE)
                                      ;         X, Y, and A are preserved                                              (STRING_PRINTABLE)
0017D9 03F3D9 MACRO                                           SSTACK_JOBSR    STRING_PRINTABLE, 2                      (STRING_PRINTABLE)
                                      ;#Check stack and call subroutine                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINTABLE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINTABLE/SSTACK_JOBSR)
0017D9 03F3D9 16 15 F8                                        JOBSR   STRING_PRINTABLE                                 (STRING_PRINTABLE/SSTACK_JOBSR)
0017DC 03F3DC MACRO                                           SCI_TX_BL                                       ;print character
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 8 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
0017DC 03F3DC MACRO                                           SSTACK_JOBSR    SCI_TX_BL, 8                             (SCI_TX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SSTACK_JOBSR)
0017DC 03F3DC 16 14 3C                                        JOBSR   SCI_TX_BL                                        (SCI_TX_BL/SSTACK_JOBSR)
0017DF 03F3DF 20 F0                                           JOB     SREC_PARSE_SREC_6                       ;get next byte
0017E1 03F3E1 CE 14 00                SREC_PARSE_SREC_7       LDX     #STRING_STR_NL                          ;line break -> X
0017E4 03F3E4 MACRO                                           STRING_PRINT_BL                                 ;print line break
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
0017E4 03F3E4 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
0017E4 03F3E4 16 15 EA                                        JOBSR   STRING_PRINT_BL                                  (STRING_PRINT_BL/SSTACK_JOBSR)
0017E7 03F3E7 20 B0                                           JOB     SREC_PARSE_SREC_1                       ;parse next header
                                                              ;S1/S2/S3 Record
                                                              ;---------------
0017E9 03F3E9 FD 1A F8                SREC_PARSE_SREC_8       LDY     SREC_ADDR                               ;upper address word -> Y
                                                              ;CPY    #(SREC_MAX_ADDR>>16)                    ;check address range
                                                              ;BHS    SREC_PARSE_SREC_2                       ;address range exeeded
0017EC 03F3EC FE 1A FA                                        LDX     SREC_ADDR+2                             ;lower address word -> X
0017EF 03F3EF MACRO                                           NVM_SET_ADDR_BL                                         ;set new NVM address
                                      ;#Set the start address of the following input stream (blocking)                 (NVM_SET_ADDR_BL)
                                      ; args:   Y:X: address                                                           (NVM_SET_ADDR_BL)
                                      ; result: none                                                                   (NVM_SET_ADDR_BL)
                                      ; SSTACK: 323bytes                                                               (NVM_SET_ADDR_BL)
                                      ;         All registers are preserved                                            (NVM_SET_ADDR_BL)
0017EF 03F3EF MACRO                                           SSTACK_JOBSR    NVM_SET_ADDR_BL, 23                      (NVM_SET_ADDR_BL)
                                      ;#Check stack and call subroutine                                                (NVM_SET_ADDR_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_SET_ADDR_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_SET_ADDR_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_SET_ADDR_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_SET_ADDR_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_SET_ADDR_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_SET_ADDR_BL/SSTACK_JOBSR)
0017EF 03F3EF 16 16 57                                        JOBSR   NVM_SET_ADDR_BL                                  (NVM_SET_ADDR_BL/SSTACK_JOBSR)
0017F2 03F3F2 MACRO                   SREC_PARSE_SREC_9       SREC_PARSE_DATA                                 ;data byte -> B (SSTACK: 14 bytes)
                                      ;#Parse data field - blocking                                                    (SREC_PARSE_DATA)
                                      ; args:   none                                                                   (SREC_PARSE_DATA)
                                      ; result: A:      error code                                                     (SREC_PARSE_DATA)
                                      ;         B:      data                                                           (SREC_PARSE_DATA)
                                      ;         C-flag: set if data is valid                                           (SREC_PARSE_DATA)
                                      ; SSTACK: 14 bytes                                                               (SREC_PARSE_DATA)
                                      ;         X and Y are preserved                                                  (SREC_PARSE_DATA)
0017F2 03F3F2 MACRO                                           SSTACK_JOBSR    SREC_PARSE_DATA, 14                      (SREC_PARSE_DATA)
                                      ;#Check stack and call subroutine                                                (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_PARSE_DATA/SSTACK_JOBSR)
0017F2 03F3F2 07 60                                           JOBSR   SREC_PARSE_DATA                                  (SREC_PARSE_DATA/SSTACK_JOBSR)
0017F4 03F3F4 04 70 C5                                        TBNE    A, SREC_PARSE_SREC_4                    ;error (fail)
0017F7 03F3F7 24 05                                           BCC     SREC_PARSE_SREC_10                      ;end of S-record reached
0017F9 03F3F9 MACRO                                           NVM_PGM_BYTE_BL                                 ;queue data byte for programming
                                      ;#Program one byte (blocking)                                                    (NVM_PGM_BYTE_BL)
                                      ; args:   B: data                                                                (NVM_PGM_BYTE_BL)
                                      ; result: none                                                                   (NVM_PGM_BYTE_BL)
                                      ; SSTACK: 11 bytes                                                               (NVM_PGM_BYTE_BL)
                                      ;         All registers are preserved                                            (NVM_PGM_BYTE_BL)
0017F9 03F3F9 MACRO                                           SSTACK_JOBSR    NVM_PGM_BYTE_BL, 11                      (NVM_PGM_BYTE_BL)
                                      ;#Check stack and call subroutine                                                (NVM_PGM_BYTE_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_PGM_BYTE_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_PGM_BYTE_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_PGM_BYTE_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_PGM_BYTE_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_PGM_BYTE_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_PGM_BYTE_BL/SSTACK_JOBSR)
0017F9 03F3F9 16 16 CB                                        JOBSR   NVM_PGM_BYTE_BL                                  (NVM_PGM_BYTE_BL/SSTACK_JOBSR)
0017FC 03F3FC 20 F4                                           JOB     SREC_PARSE_SREC_9                       ;get next byte
0017FE 03F3FE C6 2A                   SREC_PARSE_SREC_10      LDAB    #"*"                                    ;progress char -> B
001800 03F400 MACRO                                           SCI_TX_BL                                       ;print progress char
                                      ;#Transmit one byte - blocking                                                   (SCI_TX_BL)
                                      ; args:   B: data to be send                                                     (SCI_TX_BL)
                                      ; SSTACK: 8 bytes                                                                (SCI_TX_BL)
                                      ;         X, Y, and D are preserved                                              (SCI_TX_BL)
001800 03F400 MACRO                                           SSTACK_JOBSR    SCI_TX_BL, 8                             (SCI_TX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_TX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_TX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_TX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_TX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_TX_BL/SSTACK_JOBSR)
001800 03F400 16 14 3C                                        JOBSR   SCI_TX_BL                                        (SCI_TX_BL/SSTACK_JOBSR)
001803 03F403 FC 1A F6                                        LDD     SREC_COUNT+2                            ;S-Record count (lower word) -> D
001806 03F406 C3 00 01                                        ADDD    #1                                      ;increment S-Record count (lower word)
001809 03F409 7C 1A F6                                        STD     SREC_COUNT+2                            ;update S-Record count (lower word)
00180C 03F40C FC 1A F4                                        LDD     SREC_COUNT                              ;S-Record count (upper word) -> D
00180F 03F40F 89 00                                           ADCA    #$00                                    ;increment S-Record count (upper word)
001811 03F411 C9 00                                           ADCB    #$00                                    ;
001813 03F413 7C 1A F4                                        STD     SREC_COUNT                              ;S-Record count (upper word) -> D
001816 03F416 F6 1A F7                                        LDAB    SREC_COUNT+3                            ;S-Record count (lowest byte) -> B
001819 03F419 C5 3F                                           BITB    #$3F                                    ;;check for multiples of 64
00181B 03F41B 26 06                                           BNE     SREC_PARSE_SREC_11                      ;
00181D 03F41D CE 14 00                                        LDX     #STRING_STR_NL                          ;line break -> X
001820 03F420 MACRO                                           STRING_PRINT_BL                                 ;print line break
                                      ;#Basic print function - blocking                                                (STRING_PRINT_BL)
                                      ; args:   X:      start of the string                                            (STRING_PRINT_BL)
                                      ; result: X;      points to the byte after the string                            (STRING_PRINT_BL)
                                      ; SSTACK: 10 bytes                                                               (STRING_PRINT_BL)
                                      ;         Y and D are preserved                                                  (STRING_PRINT_BL)
001820 03F420 MACRO                                           SSTACK_JOBSR    STRING_PRINT_BL, 10                      (STRING_PRINT_BL)
                                      ;#Check stack and call subroutine                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (STRING_PRINT_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (STRING_PRINT_BL/SSTACK_JOBSR)
001820 03F420 16 15 EA                                        JOBSR   STRING_PRINT_BL                                  (STRING_PRINT_BL/SSTACK_JOBSR)
001823 03F423                         SREC_PARSE_SREC_11      ;LDY    SREC_ADDR                               ;debug: address -> Y:X
                                                              ;LDX    SREC_ADDR+2                             ;debug:
                                                              ;LDD    #$0610                                  ;debug: alignment:base -> D
                                                              ;NUM_PRINT_ZUD_BL                               ;debug: print address
                                                              ;LDX    #STRING_STR_NL                          ;debug: line break -> X
                                                              ;STRING_PRINT_BL                                ;debug: print line break
001823 03F423 06 17 99                                        JOB     SREC_PARSE_SREC_1                       ;parse next header
                                                              ;S5/S6 Record
                                                              ;------------
001826 03F426 MACRO                   SREC_PARSE_SREC_12      SREC_PARSE_DATA                                 ;data byte -> B (SSTACK: 14 bytes)
                                      ;#Parse data field - blocking                                                    (SREC_PARSE_DATA)
                                      ; args:   none                                                                   (SREC_PARSE_DATA)
                                      ; result: A:      error code                                                     (SREC_PARSE_DATA)
                                      ;         B:      data                                                           (SREC_PARSE_DATA)
                                      ;         C-flag: set if data is valid                                           (SREC_PARSE_DATA)
                                      ; SSTACK: 14 bytes                                                               (SREC_PARSE_DATA)
                                      ;         X and Y are preserved                                                  (SREC_PARSE_DATA)
001826 03F426 MACRO                                           SSTACK_JOBSR    SREC_PARSE_DATA, 14                      (SREC_PARSE_DATA)
                                      ;#Check stack and call subroutine                                                (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_PARSE_DATA/SSTACK_JOBSR)
001826 03F426 07 2C                                           JOBSR   SREC_PARSE_DATA                                  (SREC_PARSE_DATA/SSTACK_JOBSR)
001828 03F428 04 70 91                                        TBNE    A, SREC_PARSE_SREC_4                    ;error (fail)
00182B 03F42B 25 89                                           BCS     SREC_PARSE_SREC_2                       ;error (fail)
00182D 03F42D FE 1A FA                                        LDX     SREC_ADDR+2                             ;S-Record count (lower word) -> X
001830 03F430 BE 1A F6                                        CPX     SREC_COUNT+2                            ;check S-Record count (low word)
001833 03F433 26 0A                                           BNE     SREC_PARSE_SREC_13                      ;mismatch
001835 03F435 FE 1A F8                                        LDX     SREC_ADDR                               ;S-Record count (upper word) -> X
001838 03F438 BE 1A F4                                        CPX     SREC_COUNT                              ;check S-Record count (low word)
00183B 03F43B 18 27 FF 5A                                     BEQ     SREC_PARSE_SREC_1                       ;parse next header
00183F 03F43F 86 10                   SREC_PARSE_SREC_13      LDAA    #SREC_ERR_COUNT                         ;return count error
001841 03F441 06 17 BC                                        JOB     SREC_PARSE_SREC_4                       ;done
                                                              ;S7/S8/S9 Record
                                                              ;---------------
001844 03F444 MACRO                   SREC_PARSE_SREC_14      SREC_PARSE_DATA                                 ;data byte -> B (SSTACK: 14 bytes)
                                      ;#Parse data field - blocking                                                    (SREC_PARSE_DATA)
                                      ; args:   none                                                                   (SREC_PARSE_DATA)
                                      ; result: A:      error code                                                     (SREC_PARSE_DATA)
                                      ;         B:      data                                                           (SREC_PARSE_DATA)
                                      ;         C-flag: set if data is valid                                           (SREC_PARSE_DATA)
                                      ; SSTACK: 14 bytes                                                               (SREC_PARSE_DATA)
                                      ;         X and Y are preserved                                                  (SREC_PARSE_DATA)
001844 03F444 MACRO                                           SSTACK_JOBSR    SREC_PARSE_DATA, 14                      (SREC_PARSE_DATA)
                                      ;#Check stack and call subroutine                                                (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_PARSE_DATA/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_PARSE_DATA/SSTACK_JOBSR)
001844 03F444 07 0E                                           JOBSR   SREC_PARSE_DATA                                  (SREC_PARSE_DATA/SSTACK_JOBSR)
001846 03F446 04 70 73                                        TBNE    A, SREC_PARSE_srec_4                    ;error (fail)
001849 03F449 18 25 FF 69                                     BCS     SREC_PARSE_SREC_2                       ;format error (fail)
00184D 03F44D MACRO                                           NVM_FLUSH_BL                                    ;program remaining data
                                      ;#Submit current phrase for programming (blocking)                               (NVM_FLUSH_BL)
                                      ; args:   none                                                                   (NVM_FLUSH_BL)
                                      ; result: none                                                                   (NVM_FLUSH_BL)
                                      ; SSTACK: 21 bytes                                                               (NVM_FLUSH_BL)
                                      ;         All registers are preserved                                            (NVM_FLUSH_BL)
00184D 03F44D MACRO                                           SSTACK_JOBSR    NVM_FLUSH_BL, 14                         (NVM_FLUSH_BL)
                                      ;#Check stack and call subroutine                                                (NVM_FLUSH_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (NVM_FLUSH_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (NVM_FLUSH_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (NVM_FLUSH_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (NVM_FLUSH_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (NVM_FLUSH_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (NVM_FLUSH_BL/SSTACK_JOBSR)
00184D 03F44D 16 16 7A                                        JOBSR   NVM_FLUSH_BL                                     (NVM_FLUSH_BL/SSTACK_JOBSR)
001850 03F450 87                                              CLRA                                            ;signal no errors
001851 03F451 06 17 BC                                        JOB     SREC_PARSE_SREC_4                       ;done
                                      ;#Parse data field - blocking
                                      ; args:   none
                                      ; result: A:      error code
                                      ;         B:      data
                                      ;         C-flag: set if data is valid
                                      ; SSTACK: 14 bytes
                                      ;         X and Y are preserved
001854 03F454 -> $1854                SREC_PARSE_DATA         EQU     *
                                                              ;Get data byte
001854 03F454 MACRO                                           SREC_RX_BYTE                                    ;count -> B, error code in A (SSTACK: 12 bytes)
                                      ;#Receive one data byte - blocking                                               (SREC_RX_BYTE)
                                      ; args:   none                                                                   (SREC_RX_BYTE)
                                      ; result: A: error code                                                          (SREC_RX_BYTE)
                                      ;         B: byte                                                                (SREC_RX_BYTE)
                                      ; SSTACK: 12 bytes                                                               (SREC_RX_BYTE)
                                      ;         X and Y are preserved                                                  (SREC_RX_BYTE)
001854 03F454 MACRO                                           SSTACK_JOBSR    SREC_RX_BYTE, 12                         (SREC_RX_BYTE)
                                      ;#Check stack and call subroutine                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_RX_BYTE/SSTACK_JOBSR)
001854 03F454 16 19 4F                                        JOBSR   SREC_RX_BYTE                                     (SREC_RX_BYTE/SSTACK_JOBSR)
001857 03F457 04 60 15                                        TBNE    A, SREC_PARSE_DATA_2                    ;error (fail)
                                                              ;Update checksum (data in B)
00185A 03F45A B6 1A FE                                        LDAA    SREC_CHECKSUM                           ;old checksum -> A
00185D 03F45D 18 06                                           ABA                                             ;new checksum -> A
                                                              ;Update count (data in B)
00185F 03F45F 73 1A FD                                        DEC     SREC_BYTECOUNT                          ;decrement byte count
001862 03F462 27 07                                           BEQ     SREC_PARSE_DATA_1                       ;checksum field reached
                                                              ;Return data (data in B, checksum in A)
001864 03F464 7A 1A FE                                        STAA    SREC_CHECKSUM                           ;update checksum
001867 03F467 87                                              CLRA                                            ;no errors
001868 03F468 MACRO                                           SSTACK_PREPULL  2                               ;check SSTACK
001868 03F468 14 01                                           SEC                                             ;data is valid
00186A 03F46A 3D                                              RTS                                             ;done
                                                              ;Verify checksum (data in B, checksum in A)
00186B 03F46B 04 A0 04                SREC_PARSE_DATA_1       IBNE    A, SREC_PARSE_DATA_3                    ;checksum error
00186E 03F46E 87                                              CLRA                                            ;no error
00186F 03F46F MACRO                   SREC_PARSE_DATA_2       SSTACK_PREPULL  2                               ;check SSTACK
00186F 03F46F 10 FE                                           CLC                                             ;no valid data to return
001871 03F471 3D                                              RTS                                             ;done
                                                              ;Checksum error
001872 03F472 86 20                   SREC_PARSE_DATA_3       LDAA    #SREC_ERR_CHECKSUM                      ;return checksum erreor
001874 03F474 20 F9                                           JOB     SREC_PARSE_DATA_2                       ;done
                                      ;#Parse header - blocking
                                      ; args:   none
                                      ; result: A: error code
                                      ;         B: type
                                      ; SSTACK: 16 bytes
                                      ;         X and Y are preserved
001876 03F476 -> $1876                SREC_PARSE_HEADER       EQU     *
                                                              ;Save registers
001876 03F476 34                                              PSHX                                            ;save X
                                                              ;Clear S-record information
001877 03F477 87                                              CLRA                                            ;zero -> D
001878 03F478 C7                                              CLRB                                            ;
001879 03F479 7C 1A F8                                        STD     SREC_ADDR                               ;clear address
00187C 03F47C 7C 1A FA                                        STD     SREC_ADDR+2                             ;
00187F 03F47F 7C 1A FC                                        STD     SREC_TYPE                               ;clear type and byte count
                                                              ;Skip to the beginning of the next S-record
001882 03F482 MACRO                                           SREC_SKIP_TYPE                                  ;type -> B, error code -> A (SSTACK: 12 bytes)
                                      ;#Skip to next type field - blocking                                             (SREC_SKIP_TYPE)
                                      ; args:   none                                                                   (SREC_SKIP_TYPE)
                                      ; result: A: error code                                                          (SREC_SKIP_TYPE)
                                      ;         B: type                                                                (SREC_SKIP_TYPE)
                                      ; SSTACK: 9 bytes                                                                (SREC_SKIP_TYPE)
                                      ;         X and Y are preserved                                                  (SREC_SKIP_TYPE)
001882 03F482 MACRO                                           SSTACK_JOBSR    SREC_SKIP_TYPE, 12                       (SREC_SKIP_TYPE)
                                      ;#Check stack and call subroutine                                                (SREC_SKIP_TYPE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_SKIP_TYPE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_SKIP_TYPE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_SKIP_TYPE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_SKIP_TYPE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_SKIP_TYPE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_SKIP_TYPE/SSTACK_JOBSR)
001882 03F482 16 19 15                                        JOBSR   SREC_SKIP_TYPE                                   (SREC_SKIP_TYPE/SSTACK_JOBSR)
001885 03F485 04 60 8B                                        TBNE    A, SREC_PARSE_HEADER_9                  ;communication error (fail)
001888 03F488 B7 15                                           TFR     B, X                                    ;type -> X
                                                              ;Get byte count (type in X)
00188A 03F48A MACRO                                           SREC_RX_BYTE                                    ;count -> B, error code in A (SSTACK: 12 bytes)
                                      ;#Receive one data byte - blocking                                               (SREC_RX_BYTE)
                                      ; args:   none                                                                   (SREC_RX_BYTE)
                                      ; result: A: error code                                                          (SREC_RX_BYTE)
                                      ;         B: byte                                                                (SREC_RX_BYTE)
                                      ; SSTACK: 12 bytes                                                               (SREC_RX_BYTE)
                                      ;         X and Y are preserved                                                  (SREC_RX_BYTE)
00188A 03F48A MACRO                                           SSTACK_JOBSR    SREC_RX_BYTE, 12                         (SREC_RX_BYTE)
                                      ;#Check stack and call subroutine                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_RX_BYTE/SSTACK_JOBSR)
00188A 03F48A 16 19 4F                                        JOBSR   SREC_RX_BYTE                                     (SREC_RX_BYTE/SSTACK_JOBSR)
00188D 03F48D 04 60 80                                        TBNE    A, SREC_PARSE_HEADER_8                  ;error (fail)
001890 03F490 7B 1A FE                                        STAB    SREC_CHECKSUM                           ;set initial checksum
001893 03F493 B7 95                                           EXG     B, X                                    ;byte count -> X, type -> B
                                                              ;Get address (byte count in X, type in D)
001895 03F495 58                                              LSLB                                            ;jump table offset -> D
001896 03F496 05 FF                                           JMP     [D,PC]                                  ;jump table
001898 03F498 18 E8                                           DW      SREC_PARSE_HEADER_6                     ;S0 -> 16bit address
00189A 03F49A 18 E3                                           DW      SREC_PARSE_HEADER_5                     ;S1 -> 16bit address
00189C 03F49C 18 CA                                           DW      SREC_PARSE_HEADER_3                     ;S2 -> 24bit address
00189E 03F49E 18 B0                                           DW      SREC_PARSE_HEADER_2                     ;S3 -> 32bit address
0018A0 03F4A0 18 AC                                           DW      SREC_PARSE_HEADER_1                     ;S4 -> format error
0018A2 03F4A2 18 E8                                           DW      SREC_PARSE_HEADER_6                     ;S5 -> 16bit address
0018A4 03F4A4 18 CA                                           DW      SREC_PARSE_HEADER_3                     ;S6 -> 24bit address
0018A6 03F4A6 18 B0                                           DW      SREC_PARSE_HEADER_2                     ;S7 -> 32bit address
0018A8 03F4A8 18 CA                                           DW      SREC_PARSE_HEADER_3                     ;S8 -> 24bit address
0018AA 03F4AA 18 E8                                           DW      SREC_PARSE_HEADER_6                     ;S9 -> 16bit address
                                                              ;Format error
0018AC 03F4AC 86 40                   SREC_PARSE_HEADER_1     LDAA    #SREC_ERR_FORMAT
0018AE 03F4AE 20 60                                           JOB     SREC_PARSE_HEADER_8
                                                              ;32bit address (byte count in X)
0018B0 03F4B0 1A 1C                   SREC_PARSE_HEADER_2     LEAX    -4,X                                    ;subtract address width
0018B2 03F4B2 B7 51                                           TFR     X, B                                    ;byte count -> B
0018B4 03F4B4 7B 1A FD                                        STAB    SREC_BYTECOUNT                          ;store byte count
0018B7 03F4B7 MACRO                                           SREC_RX_BYTE                                    ;address byte -> B, error code in A (SSTACK: 12 bytes)
                                      ;#Receive one data byte - blocking                                               (SREC_RX_BYTE)
                                      ; args:   none                                                                   (SREC_RX_BYTE)
                                      ; result: A: error code                                                          (SREC_RX_BYTE)
                                      ;         B: byte                                                                (SREC_RX_BYTE)
                                      ; SSTACK: 12 bytes                                                               (SREC_RX_BYTE)
                                      ;         X and Y are preserved                                                  (SREC_RX_BYTE)
0018B7 03F4B7 MACRO                                           SSTACK_JOBSR    SREC_RX_BYTE, 12                         (SREC_RX_BYTE)
                                      ;#Check stack and call subroutine                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_RX_BYTE/SSTACK_JOBSR)
0018B7 03F4B7 16 19 4F                                        JOBSR   SREC_RX_BYTE                                     (SREC_RX_BYTE/SSTACK_JOBSR)
0018BA 03F4BA 04 60 53                                        TBNE    A, SREC_PARSE_HEADER_8                  ;error (fail)
0018BD 03F4BD 18 0F                                           TBA                                             ;address byte -> A
0018BF 03F4BF BB 1A FE                                        ADDA    SREC_CHECKSUM                           ;new checksum -> A
0018C2 03F4C2 7A 1A FE                                        STAA    SREC_CHECKSUM                           ;update checksum
0018C5 03F4C5 7B 1A F8                                        STAB    SREC_ADDR                               ;store address byte
0018C8 03F4C8 20 07                                           JOB     SREC_PARSE_HEADER_4                     ;get remaining address bytes
                                                              ;24bit address (byte count in X)
0018CA 03F4CA 1A 1D                   SREC_PARSE_HEADER_3     LEAX    -3,X                                    ;subtract address width
0018CC 03F4CC B7 51                                           TFR     X, B                                    ;byte count -> B
0018CE 03F4CE 7B 1A FD                                        STAB    SREC_BYTECOUNT                          ;store byte count
0018D1 03F4D1 MACRO                   SREC_PARSE_HEADER_4     SREC_RX_BYTE                                    ;address byte -> B, error code in A (SSTACK: 12 bytes)
                                      ;#Receive one data byte - blocking                                               (SREC_RX_BYTE)
                                      ; args:   none                                                                   (SREC_RX_BYTE)
                                      ; result: A: error code                                                          (SREC_RX_BYTE)
                                      ;         B: byte                                                                (SREC_RX_BYTE)
                                      ; SSTACK: 12 bytes                                                               (SREC_RX_BYTE)
                                      ;         X and Y are preserved                                                  (SREC_RX_BYTE)
0018D1 03F4D1 MACRO                                           SSTACK_JOBSR    SREC_RX_BYTE, 12                         (SREC_RX_BYTE)
                                      ;#Check stack and call subroutine                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_RX_BYTE/SSTACK_JOBSR)
0018D1 03F4D1 07 7C                                           JOBSR   SREC_RX_BYTE                                     (SREC_RX_BYTE/SSTACK_JOBSR)
0018D3 03F4D3 04 60 3A                                        TBNE    A, SREC_PARSE_HEADER_8                  ;error (fail)
0018D6 03F4D6 18 0F                                           TBA                                             ;address byte -> A
0018D8 03F4D8 BB 1A FE                                        ADDA    SREC_CHECKSUM                           ;new checksum -> A
0018DB 03F4DB 7A 1A FE                                        STAA    SREC_CHECKSUM                           ;update checksum
0018DE 03F4DE 7B 1A F9                                        STAB    SREC_ADDR+1                             ;store address byte
0018E1 03F4E1 20 0C                                           JOB     SREC_PARSE_HEADER_7                     ;get remaining address bytes
                                                              ;16bit address (byte count in X)
0018E3 03F4E3 18 0B 3F 1A F9          SREC_PARSE_HEADER_5     MOVB    #$3F, SREC_ADDR+1                       ;default offset
0018E8 03F4E8 1A 1E                   SREC_PARSE_HEADER_6     LEAX    -2,X                                    ;subtract address width
0018EA 03F4EA B7 51                                           TFR     X, B                                    ;byte count -> B
0018EC 03F4EC 7B 1A FD                                        STAB    SREC_BYTECOUNT                          ;store byte count
0018EF 03F4EF MACRO                   SREC_PARSE_HEADER_7     SREC_RX_BYTE                                    ;count -> B, error code in A (SSTACK: 12 bytes)
                                      ;#Receive one data byte - blocking                                               (SREC_RX_BYTE)
                                      ; args:   none                                                                   (SREC_RX_BYTE)
                                      ; result: A: error code                                                          (SREC_RX_BYTE)
                                      ;         B: byte                                                                (SREC_RX_BYTE)
                                      ; SSTACK: 12 bytes                                                               (SREC_RX_BYTE)
                                      ;         X and Y are preserved                                                  (SREC_RX_BYTE)
0018EF 03F4EF MACRO                                           SSTACK_JOBSR    SREC_RX_BYTE, 12                         (SREC_RX_BYTE)
                                      ;#Check stack and call subroutine                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_RX_BYTE/SSTACK_JOBSR)
0018EF 03F4EF 07 5E                                           JOBSR   SREC_RX_BYTE                                     (SREC_RX_BYTE/SSTACK_JOBSR)
0018F1 03F4F1 04 60 1C                                        TBNE    A, SREC_PARSE_HEADER_8                  ;error (fail)
0018F4 03F4F4 18 0F                                           TBA                                             ;address byte -> A
0018F6 03F4F6 BB 1A FE                                        ADDA    SREC_CHECKSUM                           ;new checksum -> A
0018F9 03F4F9 7A 1A FE                                        STAA    SREC_CHECKSUM                           ;update checksum
0018FC 03F4FC 7B 1A FA                                        STAB    SREC_ADDR+2                             ;store address byte
0018FF 03F4FF MACRO                                           SREC_RX_BYTE                                    ;count -> B, error code in A (SSTACK: 12 bytes)
                                      ;#Receive one data byte - blocking                                               (SREC_RX_BYTE)
                                      ; args:   none                                                                   (SREC_RX_BYTE)
                                      ; result: A: error code                                                          (SREC_RX_BYTE)
                                      ;         B: byte                                                                (SREC_RX_BYTE)
                                      ; SSTACK: 12 bytes                                                               (SREC_RX_BYTE)
                                      ;         X and Y are preserved                                                  (SREC_RX_BYTE)
0018FF 03F4FF MACRO                                           SSTACK_JOBSR    SREC_RX_BYTE, 12                         (SREC_RX_BYTE)
                                      ;#Check stack and call subroutine                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_RX_BYTE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_RX_BYTE/SSTACK_JOBSR)
0018FF 03F4FF 07 4E                                           JOBSR   SREC_RX_BYTE                                     (SREC_RX_BYTE/SSTACK_JOBSR)
001901 03F501 04 60 0C                                        TBNE    A, SREC_PARSE_HEADER_8                  ;error (fail)
001904 03F504 18 0F                                           TBA                                             ;address byte -> A
001906 03F506 BB 1A FE                                        ADDA    SREC_CHECKSUM                           ;new checksum -> A
001909 03F509 7A 1A FE                                        STAA    SREC_CHECKSUM                           ;update checksum
00190C 03F50C 7B 1A FB                                        STAB    SREC_ADDR+3                             ;store address byte
                                                              ;Return results
00190F 03F50F 87                                              CLRA                                            ;return no errors
001910 03F510 F6 1A FC                SREC_PARSE_HEADER_8     LDAB    SREC_TYPE                               ;return type
001913 03F513 MACRO                   SREC_PARSE_HEADER_9     SSTACK_PREPULL  4                               ;check SSTACK
001913 03F513 30                                              PULX                                            ;restore B
001914 03F514 3D                                              RTS                                             ;done
                                      ;#Skip to next type field - blocking
                                      ; args:   none
                                      ; result: A: error code
                                      ;         B: type
                                      ; SSTACK: 9 bytes
                                      ;         X and Y are preserved
001915 03F515 -> $1915                SREC_SKIP_TYPE          EQU     *
                                                              ;Receive first byte
001915 03F515 MACRO                   SREC_SKIP_TYPE_1        SCI_RX_BL                                       ;flags -> A, data -> B (SSTACK: 7 bytes)
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
001915 03F515 MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
001915 03F515 16 14 B5                                        JOBSR   SCI_RX_BL                                        (SCI_RX_BL/SSTACK_JOBSR)
001918 03F518 84 1F                                           ANDA    #(SWOR|OR|NF|FE|PF)                     ;check for communication error
00191A 03F51A 26 21                                           BNE     SREC_SKIP_TYPE_4                        ;communication error (fail)
                                                              ;Check for "S" character (data in B, zero in A)
00191C 03F51C C1 73                                           CMPB    #"s"                                    ;check for lower case "s"
00191E 03F51E 27 04                                           BEQ     SREC_SKIP_TYPE_2                        ;receive second byte
001920 03F520 C1 53                                           CMPB    #"S"                                    ;check for upper case "S"
001922 03F522 26 25                                           BNE     SREC_SKIP_TYPE_6                        ;check for line xbreak
                                                              ;Receive second byte
001924 03F524 MACRO                   SREC_SKIP_TYPE_2        SCI_RX_BL                                       ;flags -> A, data -> B (SSTACK: 7 bytes)
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
001924 03F524 MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
001924 03F524 16 14 B5                                        JOBSR   SCI_RX_BL                                        (SCI_RX_BL/SSTACK_JOBSR)
001927 03F527 84 1F                                           ANDA    #(SWOR|OR|NF|FE|PF)                     ;check for communication error
001929 03F529 26 12                                           BNE     SREC_SKIP_TYPE_4                        ;communication error (fail)
                                                              ;Check for valid type (data in B, zero in A)
00192B 03F52B C1 30                                           CMPB    #"0"                                    ;check lower boundary
00192D 03F52D 25 13                                           BLO     SREC_SKIP_TYPE_5                        ;skip to next line
00192F 03F52F C1 39                                           CMPB    #"9"                                    ;check upper boundary
001931 03F531 22 0F                                           BHI     SREC_SKIP_TYPE_5                        ;skip to next line
001933 03F533 C1 34                                           CMPB    #"4"                                    ;check upper boundary
001935 03F535 27 0B                                           BEQ     SREC_SKIP_TYPE_5                        ;skip to next line
001937 03F537 C4 0F                                           ANDB    #$0F                                    ;mask range
001939 03F539 7B 1A FC                                        STAB    SREC_TYPE                               ;update current type
                                                              ;Return result (type in B, error code in A)
00193C 03F53C MACRO                   SREC_SKIP_TYPE_3        SSTACK_PREPULL  2                               ;check SSTACK
00193C 03F53C 3D                                              RTS                                             ;done
                                                              ;Communication error
00193D 03F53D CC 80 00                SREC_SKIP_TYPE_4        LDD     #(SREC_ERR_RX<<8)                       ;set error code
001940 03F540 20 FA                                           JOB     SREC_SKIP_TYPE_3                        ;done
                                                              ;Skip to next line
001942 03F542 MACRO                   SREC_SKIP_TYPE_5        SCI_RX_BL                                       ;flags -> A, data -> B (SSTACK: 7 bytes)
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
001942 03F542 MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
001942 03F542 16 14 B5                                        JOBSR   SCI_RX_BL                                        (SCI_RX_BL/SSTACK_JOBSR)
001945 03F545 84 1F                                           ANDA    #(SWOR|OR|NF|FE|PF)                     ;check for communication error
001947 03F547 26 F4                                           BNE     SREC_SKIP_TYPE_4                        ;communication error (fail)
                                                              ;Check for line break (data in B, zero in A)
001949 03F549 C1 0A                   SREC_SKIP_TYPE_6        CMPB    #SREC_C0_LF                             ;check for line feed
00194B 03F54B 26 F5                                           BNE     SREC_SKIP_TYPE_5                        ;skip
00194D 03F54D 20 C6                                           JOB     SREC_SKIP_TYPE_1                        ;Parse type field
                                      ;#Receive one data byte - blocking
                                      ; args:   none
                                      ; result: A: error code
                                      ;         B: byte
                                      ; SSTACK: 12 bytes
                                      ;         X and Y are preserved
00194F 03F54F -> $194F                SREC_RX_BYTE            EQU     *
                                                              ;Reserve temporary stack space
00194F 03F54F 1B 9F                                           LEAS    -1,SP                                   ;allocate stack
                                                              ;Receive first nibble
001951 03F551 MACRO                                           SREC_RX_NIBBLE                                  ;data -> B, error code -> A (SSTACK: 9 bytes)
                                      ;#Receive one data nibble - blocking                                             (SREC_RX_NIBBLE)
                                      ; args:   none                                                                   (SREC_RX_NIBBLE)
                                      ; result: A: error code                                                          (SREC_RX_NIBBLE)
                                      ;         B: hexadecimal digit                                                   (SREC_RX_NIBBLE)
                                      ; SSTACK: 9 bytes                                                                (SREC_RX_NIBBLE)
                                      ;         X and Y are preserved                                                  (SREC_RX_NIBBLE)
001951 03F551 MACRO                                           SSTACK_JOBSR    SREC_RX_NIBBLE, 9                        (SREC_RX_NIBBLE)
                                      ;#Check stack and call subroutine                                                (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_RX_NIBBLE/SSTACK_JOBSR)
001951 03F551 07 13                                           JOBSR   SREC_RX_NIBBLE                                   (SREC_RX_NIBBLE/SSTACK_JOBSR)
001953 03F553 04 60 0D                                        TBNE    A, SREC_RX_BYTE_1                       ;error (fail)
                                                              ;Shift nibble (nibble in B, zero in A)
001956 03F556 58                                              LSLB                                            ;shift to upper nibble
001957 03F557 58                                              LSLB                                            ;
001958 03F558 58                                              LSLB                                            ;
001959 03F559 58                                              LSLB                                            ;
00195A 03F55A 6B 80                                           STAB    0,SP                                    ;store nibble
                                                              ;Receive second nibble
00195C 03F55C MACRO                                           SREC_RX_NIBBLE                                  ;data -> B, error code -> A (SSTACK: 9 bytes)
                                      ;#Receive one data nibble - blocking                                             (SREC_RX_NIBBLE)
                                      ; args:   none                                                                   (SREC_RX_NIBBLE)
                                      ; result: A: error code                                                          (SREC_RX_NIBBLE)
                                      ;         B: hexadecimal digit                                                   (SREC_RX_NIBBLE)
                                      ; SSTACK: 9 bytes                                                                (SREC_RX_NIBBLE)
                                      ;         X and Y are preserved                                                  (SREC_RX_NIBBLE)
00195C 03F55C MACRO                                           SSTACK_JOBSR    SREC_RX_NIBBLE, 9                        (SREC_RX_NIBBLE)
                                      ;#Check stack and call subroutine                                                (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SREC_RX_NIBBLE/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SREC_RX_NIBBLE/SSTACK_JOBSR)
00195C 03F55C 07 08                                           JOBSR   SREC_RX_NIBBLE                                   (SREC_RX_NIBBLE/SSTACK_JOBSR)
00195E 03F55E 04 60 02                                        TBNE    A, SREC_RX_BYTE_1                       ;error (fail)
001961 03F561 EA 80                                           ORAB    0,SP                                    ;assemble data byte
                                                              ;Return result (byte in B, error code in A)
001963 03F563 MACRO                   SREC_RX_BYTE_1          SSTACK_PREPULL  3                               ;check SSTACK
001963 03F563 1B 81                                           LEAS    1,SP                                    ;free stack
001965 03F565 3D                                              RTS                                             ;done
                                      ;#Receive one data nibble - blocking
                                      ; args:   none
                                      ; result: A: error code
                                      ;         B: hexadecimal digit
                                      ; SSTACK: 9 bytes
                                      ;         X and Y are preserved
001966 03F566 -> $1966                SREC_RX_NIBBLE          EQU     *
                                                              ;Receive byte
001966 03F566 MACRO                                           SCI_RX_BL                                       ;flags -> A, data -> B (SSTACK: 7 bytes)
                                      ;#Receive one byte - blocking                                                    (SCI_RX_BL)
                                      ; args:   none                                                                   (SCI_RX_BL)
                                      ; result: A: error flags                                                         (SCI_RX_BL)
                                      ;         B: received data                                                       (SCI_RX_BL)
                                      ; SSTACK: 7 bytes                                                                (SCI_RX_BL)
                                      ;         X and Y are preserved                                                  (SCI_RX_BL)
001966 03F566 MACRO                                           SSTACK_JOBSR    SCI_RX_BL, 6                             (SCI_RX_BL)
                                      ;#Check stack and call subroutine                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   required stack capacity (bytes)                                        (SCI_RX_BL/SSTACK_JOBSR)
                                      ; result: 1: subroutine                                                          (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         2: required stack space                                                (SCI_RX_BL/SSTACK_JOBSR)
                                      ; SSTACK: arg 2                                                                  (SCI_RX_BL/SSTACK_JOBSR)
                                      ;         register content may be changed by the subroutine                      (SCI_RX_BL/SSTACK_JOBSR)
                                      ; args:   1: Number of bytes to be allocated (args + local vars)                 (SCI_RX_BL/SSTACK_JOBSR)
001966 03F566 16 14 B5                                        JOBSR   SCI_RX_BL                                        (SCI_RX_BL/SSTACK_JOBSR)
001969 03F569 84 1F                                           ANDA    #(SWOR|OR|NF|FE|PF)                     ;check for communication error
00196B 03F56B 26 1D                                           BNE     SREC_RX_NIBBLE_4                        ;communication error (fail)
                                                              ;Check decimal range (data in B, zero in A)
00196D 03F56D C1 30                                           CMPB    #"0"                                    ;check lower boundary
00196F 03F56F 25 1E                                           BLO     SREC_RX_NIBBLE_5                        ;format error
001971 03F571 C1 39                                           CMPB    #"9"                                    ;check upper boundary
001973 03F573 23 12                                           BLS     SREC_RX_NIBBLE_2                        ;digit found
                                                              ;Check upper case range (data in B, zero in A)
001975 03F575 C1 41                                           CMPB    #"A"                                    ;check lower boundary
001977 03F577 25 16                                           BLO     SREC_RX_NIBBLE_5                        ;format error
001979 03F579 C1 46                                           CMPB    #"F"                                    ;check upper boundary
00197B 03F57B 23 08                                           BLS     SREC_RX_NIBBLE_1                        ;digit found
                                                              ;Check lower case range (data in B, zero in A)
00197D 03F57D C1 61                                           CMPB    #"a"                                    ;check lower boundary
00197F 03F57F 25 0E                                           BLO     SREC_RX_NIBBLE_5                        ;format error
001981 03F581 C1 66                                           CMPB    #"f"                                    ;check upper boundary
001983 03F583 22 0A                                           BHI     SREC_RX_NIBBLE_5                        ;format error
001985 03F585 CB 09                   SREC_RX_NIBBLE_1        ADDB    #9                                      ;addd offset
001987 03F587 C4 0F                   SREC_RX_NIBBLE_2        ANDB    #$0F                                    ;mask range
                                                              ;Return result (digit in B, error code in A)
001989 03F589 MACRO                   SREC_RX_NIBBLE_3        SSTACK_PREPULL  2                               ;check SSTACK
001989 03F589 3D                                              RTS                                             ;done
                                                              ;Communication error
00198A 03F58A CC 80 00                SREC_RX_NIBBLE_4        LDD     #(SREC_ERR_RX<<8)                       ;set error code
00198D 03F58D 20 FA                                           JOB     SREC_RX_NIBBLE_3                        ;done
                                                              ;Format error
00198F 03F58F CC 40 00                SREC_RX_NIBBLE_5        LDD     #(SREC_ERR_FORMAT<<8)                   ;set error code
001992 03F592 20 F5                                           JOB     SREC_RX_NIBBLE_3                        ;done
001994 03F594 -> $1994                SREC_CODE_END           EQU     *
001994 03F594 -> $3F594               SREC_CODE_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001402 03F002                                                 ORG     SREC_TABS_START, SREC_TABS_START_LIN
001402 03F002 MACRO                   SREC_MSG_S0_HEADER      STRING_NL_NONTERM
                                      ;#Non-terminated line break                                                      (STRING_NL_NONTERM)
001402 03F002 0D                                              DB      STRING_NL_1ST                                    (STRING_NL_NONTERM)
001403 03F003 0A                                              DB      STRING_NL_2ND                                    (STRING_NL_NONTERM)
001404 03F004 55 70 6C 6F 61 64 69 6E                         FCS     "Uploading: "
              67 3A A0                
00140F 03F00F -> $140F                SREC_TABS_END           EQU     *
00140F 03F00F -> $3F00F               SREC_TABS_END_LIN       EQU     @
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001AFF 001AFF                                                 ORG     IMG_VARS_START, IMG_VARS_START_LIN
001AFF 001AFF -> $1AFF                IMG_VARS_END            EQU     *
001AFF 001AFF -> $1AFF                IMG_VARS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00F890 03F890                                                 ORG     IMG_CODE_START, IMG_CODE_START_LIN
00F890 03F890 -> $F890                IMG_CODE_END            EQU     *
00F890 03F890 -> $3F890               IMG_CODE_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
00F94B 03F94B                                                 ORG     IMG_TABS_START, IMG_TABS_START_LIN
                                      ;#Display configurationtion
                                      ;#=========================
00F94B 03F94B -> $F94B                IMG_SEQ_INIT_START      EQU     *
00F94B 03F94B MACRO                                           DISP_SEQ_CONFIG                 ;configure display
                                      ;#Display configuration                                                          (DISP_SEQ_CONFIG)
                                                              ;DISP_SEQ_CMD                           ;switch to command mode (DISP_SEQ_CONFIG)
                                                              ;Initialize the display                                  (DISP_SEQ_CONFIG)
00F94B 03F94B 40                                              DB      $40                             ;start display at line 0 (DISP_SEQ_CONFIG)
                                                              ;DB     $A0                             ;flip display    (DISP_SEQ_CONFIG)
                                                              ;DB     $C8                             ;reverse COM63~COM0 (DISP_SEQ_CONFIG)
00F94C 03F94C A1                                              DB      $A1                             ;flip display    (DISP_SEQ_CONFIG)
00F94D 03F94D C0                                              DB      $C0                             ;normal COM0~COM63 (DISP_SEQ_CONFIG)
00F94E 03F94E A2                                              DB      $A2                             ;set bias 1/9 (Duty 1/65) ; (DISP_SEQ_CONFIG)
00F94F 03F94F 2F                                              DB      $2F                             ;enabable booster, regulator and follower (DISP_SEQ_CONFIG)
00F950 03F950 F8                                              DB      $F8                             ;set booster to 4x (DISP_SEQ_CONFIG)
00F951 03F951 00                                              DB      $00                             ;                (DISP_SEQ_CONFIG)
00F952 03F952 27                                              DB      $27                             ;set ref value to 6.5 (DISP_SEQ_CONFIG)
00F953 03F953 81                                              DB      $81                             ;set alpha value to 47 (DISP_SEQ_CONFIG)
00F954 03F954 10                                              DB      $10                             ;V0=alpha*(1-(ref/162)*2.1V =[4V..13.5V] (DISP_SEQ_CONFIG)
00F955 03F955 AC                                              DB      $AC                             ;no static indicator (DISP_SEQ_CONFIG)
00F956 03F956 00                                              DB      $00                             ;                (DISP_SEQ_CONFIG)
00F957 03F957 AF                                              DB      $AF                             ;enable display  (DISP_SEQ_CONFIG)
                                      ;#Static content - pages 0 to 5
                                      ;#=============================
                                      ;#Page 0:
00F958 03F958 B0 10 00                                        DB  $B0 $10 $00                     ;set page and column address
00F95B 03F95B E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00F95D 03F95D E3 04 00                                        DB  DISP_ESC_START $04 $00          ;repeat 5 times
00F960 03F960 FF FF                                           DB  $FF $FF
00F962 03F962 E3 03 33                                        DB  DISP_ESC_START $03 $33          ;repeat 4 times
00F965 03F965 03 00 00 FB FB 00 00 F8                         DB  $03 $00 $00 $FB $FB $00 $00 $F8
00F96D 03F96D F8 30 18 18 00 F8 F8 10                         DB  $F8 $30 $18 $18 $00 $F8 $F8 $10
00F975 03F975 18 F8 F0 10 18 F8 F0 00                         DB  $18 $F8 $F0 $10 $18 $F8 $F0 $00
00F97D 03F97D 18 F8 E0 80 F0 78 F0 80                         DB  $18 $F8 $E0 $80 $F0 $78 $F0 $80
00F985 03F985 E0 F8 18 00 10 98 D8 58                         DB  $E0 $F8 $18 $00 $10 $98 $D8 $58
00F98D 03F98D F8 F0 00 00 F8 F8 30 18                         DB  $F8 $F0 $00 $00 $F8 $F8 $30 $18
00F995 03F995 18 00 E0 F0 D8 D8 D8 F0                         DB  $18 $00 $E0 $F0 $D8 $D8 $D8 $F0
00F99D 03F99D E0                                              DB  $E0
00F99E 03F99E E3 05 00                                        DB  DISP_ESC_START $05 $00          ;repeat 6 times
00F9A1 03F9A1 FF FF                                           DB  $FF $FF
00F9A3 03F9A3 E3 04 00                                        DB  DISP_ESC_START $04 $00          ;repeat 5 times
00F9A6 03F9A6 FF FF 00 00 F8 F8 30 18                         DB  $FF $FF $00 $00 $F8 $F8 $30 $18
00F9AE 03F9AE 38 F0 E0 00 00 E0 F0 38                         DB  $38 $F0 $E0 $00 $00 $E0 $F0 $38
00F9B6 03F9B6 18 30 FF FF 00 00 10 98                         DB  $18 $30 $FF $FF $00 $00 $10 $98
00F9BE 03F9BE D8 58 F8 F0 00 18 FC FE                         DB  $D8 $58 $F8 $F0 $00 $18 $FC $FE
00F9C6 03F9C6 18 18 00 E0 F0 D8 D8 D8                         DB  $18 $18 $00 $E0 $F0 $D8 $D8 $D8
00F9CE 03F9CE F0 E0                                           DB  $F0 $E0
00F9D0 03F9D0 E3 04 00                                        DB  DISP_ESC_START $04 $00          ;repeat 5 times
00F9D3 03F9D3 E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#Page 1:
00F9D5 03F9D5 B1 10 00                                        DB  $B1 $10 $00                     ;set page and column address
00F9D8 03F9D8 E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00F9DA 03F9DA E3 03 00                                        DB  DISP_ESC_START $03 $00          ;repeat 4 times
00F9DD 03F9DD 30 37 37                                        DB  $30 $37 $37
00F9E0 03F9E0 E3 06 30                                        DB  DISP_ESC_START $06 $30          ;repeat 7 times
00F9E3 03F9E3 37 37 30 30 37 37                               DB  $37 $37 $30 $30 $37 $37
00F9E9 03F9E9 E3 03 30                                        DB  DISP_ESC_START $03 $30          ;repeat 4 times
00F9EC 03F9EC 37 37 30 30 37 37 30 30                         DB  $37 $37 $30 $30 $37 $37 $30 $30
00F9F4 03F9F4 37 37 30 30 30 37 37 33                         DB  $37 $37 $30 $30 $30 $37 $37 $33
00F9FC 03F9FC 30 33 37 37 30 30 30 33                         DB  $30 $33 $37 $37 $30 $30 $30 $33
00FA04 03FA04 37 36 36 33 37 34 30 37                         DB  $37 $36 $36 $33 $37 $34 $30 $37
00FA0C 03FA0C 37                                              DB  $37
00FA0D 03FA0D E3 03 30                                        DB  DISP_ESC_START $03 $30          ;repeat 4 times
00FA10 03FA10 31 33                                           DB  $31 $33
00FA12 03FA12 E3 03 36                                        DB  DISP_ESC_START $03 $36          ;repeat 4 times
00FA15 03FA15 32                                              DB  $32
00FA16 03FA16 E3 05 30                                        DB  DISP_ESC_START $05 $30          ;repeat 6 times
00FA19 03FA19 31 33 37 36 36 36 37 33                         DB  $31 $33 $37 $36 $36 $36 $37 $33
00FA21 03FA21 31 30 00 3F 3F 03 36 37                         DB  $31 $30 $00 $3F $3F $03 $36 $37
00FA29 03FA29 33 31 30 30 31 33 37 36                         DB  $33 $31 $30 $30 $31 $33 $37 $36
00FA31 03FA31 33 37 37 30 30 33 37 36                         DB  $33 $37 $37 $30 $30 $33 $37 $36
00FA39 03FA39 36 33 37 34 30 33 37 36                         DB  $36 $33 $37 $34 $30 $33 $37 $36
00FA41 03FA41 36 30 31 33                                     DB  $36 $30 $31 $33
00FA45 03FA45 E3 03 36                                        DB  DISP_ESC_START $03 $36          ;repeat 4 times
00FA48 03FA48 32 30                                           DB  $32 $30
00FA4A 03FA4A E3 03 00                                        DB  DISP_ESC_START $03 $00          ;repeat 4 times
00FA4D 03FA4D E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#Page 2:
00FA4F 03FA4F B2 10 00                                        DB  $B2 $10 $00                     ;set page and column address
00FA52 03FA52 E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FA54 03FA54 E3 13 00                                        DB  DISP_ESC_START $13 $00          ;repeat 20 times
00FA57 03FA57 10 10 F0 10 10 00 80 40                         DB  $10 $10 $F0 $10 $10 $00 $80 $40
00FA5F 03FA5F 40 80 00 00 C0 40 00 C0                         DB  $40 $80 $00 $00 $C0 $40 $00 $C0
00FA67 03FA67 40 40 80 40 40 80 00 00                         DB  $40 $40 $80 $40 $40 $80 $00 $00
00FA6F 03FA6F D0 00 00 C0 40 40 80 00                         DB  $D0 $00 $00 $C0 $40 $40 $80 $00
00FA77 03FA77 00 00 40 40 80 00 00 F0                         DB  $00 $00 $40 $40 $80 $00 $00 $F0
00FA7F 03FA7F E3 04 00                                        DB  DISP_ESC_START $04 $00          ;repeat 5 times
00FA82 03FA82 60 90 90 90 20 00 00 80                         DB  $60 $90 $90 $90 $20 $00 $00 $80
00FA8A 03FA8A 40 40 80 00 40 F0 40 40                         DB  $40 $40 $80 $00 $40 $F0 $40 $40
00FA92 03FA92 F0 40 00 D0 00 00 C0 40                         DB  $F0 $40 $00 $D0 $00 $00 $C0 $40
00FA9A 03FA9A 40 80 00 00 80 40 40 C0                         DB  $40 $80 $00 $00 $80 $40 $40 $C0
00FAA2 03FAA2 00 80 40 40 40 00 40                            DB  $00 $80 $40 $40 $40 $00 $40
00FAA9 03FAA9 E3 17 00                                        DB  DISP_ESC_START $17 $00          ;repeat 24 times
00FAAC 03FAAC E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#Page 3:
00FAAE 03FAAE B3 10 00                                        DB  $B3 $10 $00                     ;set page and column address
00FAB1 03FAB1 E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FAB3 03FAB3 E3 06 00                                        DB  DISP_ESC_START $06 $00          ;repeat 7 times
00FAB6 03FAB6 80 40 40 80 00 80 40 40                         DB  $80 $40 $40 $80 $00 $80 $40 $40
00FABE 03FABE 80 00 80 40 40 80 00 87                         DB  $80 $00 $80 $40 $40 $80 $00 $87
00FAC6 03FAC6 40 40 80 03 05 05 05 C0                         DB  $40 $40 $80 $03 $05 $05 $05 $C0
00FACE 03FACE 00 07 00 00 07 00 00 07                         DB  $00 $07 $00 $00 $07 $00 $00 $07
00FAD6 03FAD6 00 00 07 00 00 07 00 00                         DB  $00 $00 $07 $00 $00 $07 $00 $00
00FADE 03FADE 07 00 00 07 C0 00 06 05                         DB  $07 $00 $00 $07 $C0 $00 $06 $05
00FAE6 03FAE6 05 07 00 00 87 40 40 80                         DB  $05 $07 $00 $00 $87 $40 $40 $80
00FAEE 03FAEE 00 00 C2 84 04 04 C3 00                         DB  $00 $00 $C2 $84 $04 $04 $C3 $00
00FAF6 03FAF6 00 83 C5 05 05 00 00 03                         DB  $00 $83 $C5 $05 $05 $00 $00 $03
00FAFE 03FAFE 04 00 03 04 C0 47 40 40                         DB  $04 $00 $03 $04 $C0 $47 $40 $40
00FB06 03FB06 87 00 40 47 C0 40 4B 14                         DB  $87 $00 $40 $47 $C0 $40 $4B $14
00FB0E 03FB0E 94 4F 40 84 05 05 02 C0                         DB  $94 $4F $40 $84 $05 $05 $02 $C0
00FB16 03FB16 04 80 40 40 40 80 00 40                         DB  $04 $80 $40 $40 $40 $80 $00 $40
00FB1E 03FB1E 40 C0 40 40 00 80 40 40                         DB  $40 $C0 $40 $40 $00 $80 $40 $40
00FB26 03FB26 80                                              DB  $80
00FB27 03FB27 E3 07 00                                        DB  DISP_ESC_START $07 $00          ;repeat 8 times
00FB2A 03FB2A E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#Page 4:
00FB2C 03FB2C B4 10 00                                        DB  $B4 $10 $00                     ;set page and column address
00FB2F 03FB2F E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FB31 03FB31 E3 06 00                                        DB  DISP_ESC_START $06 $00          ;repeat 7 times
00FB34 03FB34 09 12 12 0F 00 0F 12 12                         DB  $09 $12 $12 $0F $00 $0F $12 $12
00FB3C 03FB3C 0C 00 0F 10 10 0F 00 0F                         DB  $0C $00 $0F $10 $10 $0F $00 $0F
00FB44 03FB44 10 10 0F                                        DB  $10 $10 $0F
00FB47 03FB47 E3 03 00                                        DB  DISP_ESC_START $03 $00          ;repeat 4 times
00FB4A 03FB4A 1F 11 11 11 0E 00 09 15                         DB  $1F $11 $11 $11 $0E $00 $09 $15
00FB52 03FB52 15 1E 00 0F 10 10 10 1F                         DB  $15 $1E $00 $0F $10 $10 $10 $1F
00FB5A 03FB5A 00 0E 11 11 11 1F 00 00                         DB  $00 $0E $11 $11 $11 $1F $00 $00
00FB62 03FB62 30                                              DB  $30
00FB63 03FB63 E3 03 00                                        DB  DISP_ESC_START $03 $00          ;repeat 4 times
00FB66 03FB66 0D 12 12 0D 00 00 1F 01                         DB  $0D $12 $12 $0D $00 $00 $1F $01
00FB6E 03FB6E 02 0C 1F 00 01 00 1F 00                         DB  $02 $0C $1F $00 $01 $00 $1F $00
00FB76 03FB76 00 00 30                                        DB  $00 $00 $30
00FB79 03FB79 E3 04 00                                        DB  DISP_ESC_START $04 $00          ;repeat 5 times
00FB7C 03FB7C 1F 02 06 0A 11 00 00 00                         DB  $1F $02 $06 $0A $11 $00 $00 $00
00FB84 03FB84 1F 00 00 00 09 12 12 0C                         DB  $1F $00 $00 $00 $09 $12 $12 $0C
00FB8C 03FB8C 00 18 07 00 00 0F 10 10                         DB  $00 $18 $07 $00 $00 $0F $10 $10
00FB94 03FB94 10 08 00 00 00 1F 00 00                         DB  $10 $08 $00 $00 $00 $1F $00 $00
00FB9C 03FB9C 00 09 12 12 0C                                  DB  $00 $09 $12 $12 $0C
00FBA1 03FBA1 E3 07 00                                        DB  DISP_ESC_START $07 $00          ;repeat 8 times
00FBA4 03FBA4 E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#Page 5:
00FBA6 03FBA6 B5 10 00                                        DB  $B5 $10 $00                     ;set page and column address
00FBA9 03FBA9 E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FBAB 03FBAB E3 7F 00                                        DB  DISP_ESC_START $7F $00          ;repeat 128 times
00FBAE 03FBAE E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#"READY" banner - pages 6 to 7
                                      ;#=============================
                                      ;#Page 6:
00FBB0 03FBB0 B6 10 00                                        DB  $B6 $10 $00                     ;set page and column address
00FBB3 03FBB3 E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FBB5 03FBB5 E3 29 00                                        DB  DISP_ESC_START $29 $00          ;repeat 42 times
00FBB8 03FBB8 F8 FF 67 63                                     DB  $F8 $FF $67 $63
00FBBC 03FBBC E3 01 E3                                        DB  DISP_ESC_START $01 $E3          ;repeat 2 times
00FBBF 03FBBF 33 3F 1E 00 E0 F0 78 58                         DB  $33 $3F $1E $00 $E0 $F0 $78 $58
00FBC7 03FBC7 58 78 70 00 80 90 D8 58                         DB  $58 $78 $70 $00 $80 $90 $D8 $58
00FBCF 03FBCF D8 F8 70 00 E0 F0 38 18                         DB  $D8 $F8 $70 $00 $E0 $F0 $38 $18
00FBD7 03FBD7 18 B0 F8 FF 07 18 F8 E0                         DB  $18 $B0 $F8 $FF $07 $18 $F8 $E0
00FBDF 03FBDF 00 C0 F0 38 08 00 F8 3F                         DB  $00 $C0 $F0 $38 $08 $00 $F8 $3F
00FBE7 03FBE7 07                                              DB  $07
00FBE8 03FBE8 E3 26 00                                        DB  DISP_ESC_START $26 $00          ;repeat 39 times
00FBEB 03FBEB E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#Page 7:
00FBED 03FBED B7 10 00                                        DB  $B7 $10 $00                     ;set page and column address
00FBF0 03FBF0 E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FBF2 03FBF2 E3 28 00                                        DB  DISP_ESC_START $28 $00          ;repeat 41 times
00FBF5 03FBF5 07 07                                           DB  $07 $07
00FBF7 03FBF7 E3 03 00                                        DB  DISP_ESC_START $03 $00          ;repeat 4 times
00FBFA 03FBFA 03 07 04 00 00 01 03 06                         DB  $03 $07 $04 $00 $00 $01 $03 $06
00FC02 03FC02 06 06 03 01 00 03 07 06                         DB  $06 $06 $03 $01 $00 $03 $07 $06
00FC0A 03FC0A 02 07 07 00 00 03 07 06                         DB  $02 $07 $07 $00 $00 $03 $07 $06
00FC12 03FC12 06 02 07 07 00 30 30 39                         DB  $06 $02 $07 $07 $00 $30 $30 $39
00FC1A 03FC1A 1F 0F 03 00 00 00 06 06                         DB  $1F $0F $03 $00 $00 $00 $06 $06
00FC22 03FC22 E3 28 00                                        DB  DISP_ESC_START $28 $00          ;repeat 41 times
00FC25 03FC25 E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
00FC27 03FC27 -> $FC27                DISP_SEQ_INIT_END       EQU     *
                                      ;#"BUSY" banner - pages 6 to 7
                                      ;#============================
00FC27 03FC27 -> $FC27                IMG_SEQ_BUSY_START      EQU     *
                                      ;#Page 6:
00FC27 03FC27 B6 10 00                                        DB  $B6 $10 $00                     ;set page and column address
00FC2A 03FC2A E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FC2C 03FC2C E3 2E 00                                        DB  DISP_ESC_START $2E $00          ;repeat 47 times
00FC2F 03FC2F F8 FF 37 33 33 33 F3 DF                         DB  $F8 $FF $37 $33 $33 $33 $F3 $DF
00FC37 03FC37 0E 00 80 F8 78 00 00 80                         DB  $0E $00 $80 $F8 $78 $00 $00 $80
00FC3F 03FC3F F8 78 00 00 70 F8 D8 D8                         DB  $F8 $78 $00 $00 $70 $F8 $D8 $D8
00FC47 03FC47 98 10 00 18 F8 E0 00 C0                         DB  $98 $10 $00 $18 $F8 $E0 $00 $C0
00FC4F 03FC4F F0 38 08 00 F8 3F 07                            DB  $F0 $38 $08 $00 $F8 $3F $07
00FC56 03FC56 E3 29 00                                        DB  DISP_ESC_START $29 $00          ;repeat 42 times
00FC59 03FC59 E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#Page 7:
00FC5B 03FC5B B7 10 00                                        DB  $B7 $10 $00                     ;set page and column address
00FC5E 03FC5E E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FC60 03FC60 E3 2D 00                                        DB  DISP_ESC_START $2D $00          ;repeat 46 times
00FC63 03FC63 07 07                                           DB  $07 $07
00FC65 03FC65 E3 03 06                                        DB  DISP_ESC_START $03 $06          ;repeat 4 times
00FC68 03FC68 07 03 01 00 00 03 07 06                         DB  $07 $03 $01 $00 $00 $03 $07 $06
00FC70 03FC70 06 02 07 07 00 00 02 06                         DB  $06 $02 $07 $07 $00 $00 $02 $06
00FC78 03FC78 06 06 07 03 00 30 30 39                         DB  $06 $06 $07 $03 $00 $30 $30 $39
00FC80 03FC80 1F 0F 03 00 00 00 06 06                         DB  $1F $0F $03 $00 $00 $00 $06 $06
00FC88 03FC88 E3 2B 00                                        DB  DISP_ESC_START $2B $00          ;repeat 44 times
00FC8B 03FC8B E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
00FC8D 03FC8D -> $FC8D                IMG_SEQ_BUSY_END        EQU     *
                                      ;#"DONE" banner - pages 6 to 7
                                      ;#============================
00FC8D 03FC8D -> $FC8D                IMG_SEQ_DONE_START      EQU     *
                                      ;#Page 6:
00FC8D 03FC8D B6 10 00                                        DB  $B6 $10 $00                     ;set page and column address
00FC90 03FC90 E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FC92 03FC92 E3 2E 00                                        DB  DISP_ESC_START $2E $00          ;repeat 47 times
00FC95 03FC95 F8 FF 07 03 03 03 87 FE                         DB  $F8 $FF $07 $03 $03 $03 $87 $FE
00FC9D 03FC9D 7C 00 E0 F0 38 18 18 18                         DB  $7C $00 $E0 $F0 $38 $18 $18 $18
00FCA5 03FCA5 F0 E0 00 00 F8 F8 30 18                         DB  $F0 $E0 $00 $00 $F8 $F8 $30 $18
00FCAD 03FCAD 18 F8 F0 00 E0 F0 78 58                         DB  $18 $F8 $F0 $00 $E0 $F0 $78 $58
00FCB5 03FCB5 58 78 70 00 00 F8 3F 07                         DB  $58 $78 $70 $00 $00 $F8 $3F $07
00FCBD 03FCBD E3 28 00                                        DB  DISP_ESC_START $28 $00          ;repeat 41 times
00FCC0 03FCC0 E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#Page 7:
00FCC2 03FCC2 B7 10 00                                        DB  $B7 $10 $00                     ;set page and column address
00FCC5 03FCC5 E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FCC7 03FCC7 E3 2D 00                                        DB  DISP_ESC_START $2D $00          ;repeat 46 times
00FCCA 03FCCA 07 07                                           DB  $07 $07
00FCCC 03FCCC E3 03 06                                        DB  DISP_ESC_START $03 $06          ;repeat 4 times
00FCCF 03FCCF 07 03 01 00 00 01 03 06                         DB  $07 $03 $01 $00 $00 $01 $03 $06
00FCD7 03FCD7 06 06 07 03 01 00 07 07                         DB  $06 $06 $07 $03 $01 $00 $07 $07
00FCDF 03FCDF 00 00 00 07 07 00 00 01                         DB  $00 $00 $00 $07 $07 $00 $00 $01
00FCE7 03FCE7 03 06 06 06 03 01 00 06                         DB  $03 $06 $06 $06 $03 $01 $00 $06
00FCEF 03FCEF 06                                              DB  $06
00FCF0 03FCF0 E3 2A 00                                        DB  DISP_ESC_START $2A $00          ;repeat 43 times
00FCF3 03FCF3 E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
00FCF5 03FCF5 -> $FCF5                IMG_SEQ_DONE_END        EQU     *
                                      ;#"ERROR" banner - pages 6 to 7
                                      ;#=============================
00FCF5 03FCF5 -> $FCF5                IMG_SEQ_ERROR_START     EQU     *
                                      ;#Page 6:
00FCF5 03FCF5 B6 10 00                                        DB  $B6 $10 $00                     ;set page and column address
00FCF8 03FCF8 E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FCFA 03FCFA E3 2E 00                                        DB  DISP_ESC_START $2E $00          ;repeat 47 times
00FCFD 03FCFD F8 FF 37                                        DB  $F8 $FF $37
00FD00 03FD00 E3 03 33                                        DB  DISP_ESC_START $03 $33          ;repeat 4 times
00FD03 03FD03 03 03 00 F8 F8 30 18 18                         DB  $03 $03 $00 $F8 $F8 $30 $18 $18
00FD0B 03FD0B 00 F8 F8 30 18 18 E0 F0                         DB  $00 $F8 $F8 $30 $18 $18 $E0 $F0
00FD13 03FD13 38 18 18 18 F0 E0 00 00                         DB  $38 $18 $18 $18 $F0 $E0 $00 $00
00FD1B 03FD1B F8 F8 30 18 18 00 F8 3F                         DB  $F8 $F8 $30 $18 $18 $00 $F8 $3F
00FD23 03FD23 07                                              DB  $07
00FD24 03FD24 E3 28 00                                        DB  DISP_ESC_START $28 $00          ;repeat 41 times
00FD27 03FD27 E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
                                      ;#Page 7:
00FD29 03FD29 B7 10 00                                        DB  $B7 $10 $00                     ;set page and column address
00FD2C 03FD2C E3 FD                                           DB  DISP_ESC_START DISP_ESC_DATA    ;switch to data input
00FD2E 03FD2E E3 2D 00                                        DB  DISP_ESC_START $2D $00          ;repeat 46 times
00FD31 03FD31 07 07                                           DB  $07 $07
00FD33 03FD33 E3 05 06                                        DB  DISP_ESC_START $05 $06          ;repeat 6 times
00FD36 03FD36 00 00 07 07                                     DB  $00 $00 $07 $07
00FD3A 03FD3A E3 03 00                                        DB  DISP_ESC_START $03 $00          ;repeat 4 times
00FD3D 03FD3D 07 07                                           DB  $07 $07
00FD3F 03FD3F E3 03 00                                        DB  DISP_ESC_START $03 $00          ;repeat 4 times
00FD42 03FD42 01 03 06 06 06 07 03 01                         DB  $01 $03 $06 $06 $06 $07 $03 $01
00FD4A 03FD4A 00 07 07                                        DB  $00 $07 $07
00FD4D 03FD4D E3 03 00                                        DB  DISP_ESC_START $03 $00          ;repeat 4 times
00FD50 03FD50 06 06                                           DB  $06 $06
00FD52 03FD52 E3 2A 00                                        DB  DISP_ESC_START $2A $00          ;repeat 43 times
00FD55 03FD55 E3 FE                                           DB  DISP_ESC_START DISP_ESC_CMD     ;switch to command input
00FD57 03FD57 -> $FD57                IMG_SEQ_ERROR_END       EQU     *
00FD57 03FD57 -> $FD57                IMG_TABS_END            EQU     *
00FD57 03FD57 -> $3FD57               IMG_TABS_END_LIN        EQU     @
                                      ;###############################################################################
                                      ;# Constants                                                                   #
                                      ;###############################################################################
                                      ;Size of the vector table
00FD57 03FD57 -> $0080                VECTAB_SIZE             EQU     $80
                                      ;###############################################################################
                                      ;# Variables                                                                   #
                                      ;###############################################################################
001994 001994                                                 ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
001994 001994 -> $1994                VECTAB_VARS_END         EQU     *
001994 001994 -> $1994                VECTAB_VARS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Code                                                                        #
                                      ;###############################################################################
00141A 03F01A                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
00141A 03F01A -> $141A                VECTAB_CODE_END         EQU     *
00141A 03F01A -> $3F01A               VECTAB_CODE_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# Tables                                                                      #
                                      ;###############################################################################
001400 03F000                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
                                      ;#Interrupt service routines
                                      ;#--------------------------
001400 03F000 -> $F79F                ISR_SPURIOUS            EQU     BOOTLOADER_ISR_ERROR    ;vector base + $80
001400 03F000 -> $F79F                ISR_PAD                 EQU     BOOTLOADER_ISR_ERROR    ;vector base + $82
001400 03F000 -> $F79F                ISR_ADCCOMP             EQU     BOOTLOADER_ISR_ERROR    ;vector base + $84
001400 03F000 -> $F79F                ISR_RES86               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $86
001400 03F000 -> $F79F                ISR_API                 EQU     BOOTLOADER_ISR_ERROR    ;vector base + $88
001400 03F000 -> $F79F                ISR_LVI                 EQU     BOOTLOADER_ISR_ERROR    ;vector base + $8A
001400 03F000 -> $F79F                ISR_RES8C               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $8C
001400 03F000 -> $F79F                ISR_PORTP               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $8E
001400 03F000 -> $F79F                ISR_RES90               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $90
001400 03F000 -> $F79F                ISR_RES92               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $92
001400 03F000 -> $F79F                ISR_RES94               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $94
001400 03F000 -> $F79F                ISR_RES96               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $96
001400 03F000 -> $F79F                ISR_RES98               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $98
001400 03F000 -> $F79F                ISR_RES9A               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $9A
001400 03F000 -> $F79F                ISR_RES9C               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $9C
001400 03F000 -> $F79F                ISR_RES9E               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $9E
001400 03F000 -> $F79F                ISR_RESA0               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $A0
001400 03F000 -> $F79F                ISR_RESA2               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $A2
001400 03F000 -> $F79F                ISR_RESA4               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $A4
001400 03F000 -> $F79F                ISR_RESA6               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $A6
001400 03F000 -> $F79F                ISR_RESA8               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $A8
001400 03F000 -> $F79F                ISR_RESAA               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $AA
001400 03F000 -> $F79F                ISR_RESAC               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $AC
001400 03F000 -> $F79F                ISR_RESAE               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $AE
001400 03F000 -> $F79F                ISR_CANTX               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $B0
001400 03F000 -> $F79F                ISR_CANRX               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $B2
001400 03F000 -> $F79F                ISR_CANERR              EQU     BOOTLOADER_ISR_ERROR    ;vector base + $B4
001400 03F000 -> $F79F                ISR_CANWUP              EQU     BOOTLOADER_ISR_ERROR    ;vector base + $B6
001400 03F000 -> $16D9                ISR_FLASH               EQU     NVM_ISR_CC
001400 03F000 -> $F79F                ISR_FLASHFLT            EQU     BOOTLOADER_ISR_ERROR    ;vector base + $BA
001400 03F000 -> $F79F                ISR_SPI2                EQU     BOOTLOADER_ISR_ERROR    ;vector base + $BC
001400 03F000 -> $F79F                ISR_SPI1                EQU     BOOTLOADER_ISR_ERROR    ;vector base + $BE
001400 03F000 -> $F79F                ISR_RESC0               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $C0
001400 03F000 -> $F79F                ISR_SCI2                EQU     BOOTLOADER_ISR_ERROR    ;vector base + $C2
001400 03F000 -> $F79F                ISR_RESC4               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $C4
001400 03F000 -> $F79F                ISR_PLLLOCK             EQU     BOOTLOADER_ISR_ERROR    ;vector base + $C6
001400 03F000 -> $F79F                ISR_OSCSTAT             EQU     BOOTLOADER_ISR_ERROR    ;vector base + $C8
001400 03F000 -> $F79F                ISR_RESCA               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $CA
001400 03F000 -> $F79F                ISR_ACMP                EQU     BOOTLOADER_ISR_ERROR    ;vector base + $CC
001400 03F000 -> $F79F                ISR_PORTJ               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $CC
001400 03F000 -> $F79F                ISR_RESD0               EQU     BOOTLOADER_ISR_ERROR    ;vector base + $D0
001400 03F000 -> $F79F                ISR_ATD0                EQU     BOOTLOADER_ISR_ERROR    ;vector base + $D2
001400 03F000 -> $F79F                ISR_SCI1                EQU     BOOTLOADER_ISR_ERROR    ;vector base + $D4
001400 03F000 -> $156D                ISR_SCI0                EQU     SCI_ISR_RXTX
001400 03F000 -> $F80C                ISR_SPI0                EQU     DISP_ISR                ;vector base + $D8
001400 03F000 -> $F79F                ISR_TIM_PAIE            EQU     BOOTLOADER_ISR_ERROR            ;vector base + $DA
001400 03F000 -> $F79F                ISR_TIM_PAOV            EQU     BOOTLOADER_ISR_ERROR            ;vector base + $DC
001400 03F000 -> $F79F                ISR_TIM_TOV             EQU     BOOTLOADER_ISR_ERROR            ;vector base + $DE
001400 03F000 -> $F79F                ISR_TIM_TC7             EQU     BOOTLOADER_ISR_ERROR            ;vector base + $E0
001400 03F000 -> $F79F                ISR_TIM_TC6             EQU     BOOTLOADER_ISR_ERROR            ;vector base + $E2
001400 03F000 -> $F79F                ISR_TIM_TC5             EQU     BOOTLOADER_ISR_ERROR            ;vector base + $E4
001400 03F000 -> $F79F                ISR_TIM_TC4             EQU     BOOTLOADER_ISR_ERROR            ;vector base + $E6
001400 03F000 -> $F79F                ISR_TIM_TC3             EQU     BOOTLOADER_ISR_ERROR            ;vector base + $E8
001400 03F000 -> $F79F                ISR_TIM_TC2             EQU     BOOTLOADER_ISR_ERROR            ;vector base + $EA
001400 03F000 -> $F79F                ISR_TIM_TC1             EQU     BOOTLOADER_ISR_ERROR            ;vector base + $EC
001400 03F000 -> $14E2                ISR_TIM_TC0             EQU     SCI_ISR_OC
001400 03F000 -> $F79F                ISR_RTI                 EQU     BOOTLOADER_ISR_ERROR    ;vector base + $F0
001400 03F000 -> $F79F                ISR_IRQ                 EQU     BOOTLOADER_ISR_ERROR    ;vector base + $F2
001400 03F000 -> $F79F                ISR_XIRQ                EQU     BOOTLOADER_ISR_ERROR    ;vector base + $F4
001400 03F000 -> $F79F                ISR_SWI                 EQU     BOOTLOADER_ISR_ERROR    ;vector base + $F6
001400 03F000 -> $F79F                ISR_TRAP                EQU     BOOTLOADER_ISR_ERROR    ;vector base + $F8
001400 03F000 -> $1400                VECTAB_TABS_END         EQU     *
001400 03F000 -> $3F000               VECTAB_TABS_END_LIN     EQU     @
                                      ;###############################################################################
                                      ;# S12G Vector Table                                                           #
                                      ;###############################################################################
003F80 03FF80                                                 ORG     VECTAB_START, VECTAB_START_LIN
003F80 03FF80 F7 9F                   VEC_SPURIOUS            DW      ISR_SPURIOUS            ;vector base + $80
003F82 03FF82 F7 9F                   VEC_PAD                 DW      ISR_PAD                 ;vector base + $82
003F84 03FF84 F7 9F                   VEC_ADCCOMP             DW      ISR_ADCCOMP             ;vector base + $84
003F86 03FF86 F7 9F                   VEC_RES86               DW      ISR_RES86               ;vector base + $86
003F88 03FF88 F7 9F                   VEC_API                 DW      ISR_API                 ;vector base + $88
003F8A 03FF8A F7 9F                   VEC_LVI                 DW      ISR_LVI                 ;vector base + $8A
003F8C 03FF8C F7 9F                   VEC_RES8C               DW      ISR_RES8C               ;vector base + $8C
003F8E 03FF8E F7 9F                   VEC_PORTP               DW      ISR_PORTP               ;vector base + $8E
003F90 03FF90 F7 9F                   VEC_RES90               DW      ISR_RES90               ;vector base + $90
003F92 03FF92 F7 9F                   VEC_RES92               DW      ISR_RES92               ;vector base + $92
003F94 03FF94 F7 9F                   VEC_RES94               DW      ISR_RES94               ;vector base + $94
003F96 03FF96 F7 9F                   VEC_RES96               DW      ISR_RES96               ;vector base + $96
003F98 03FF98 F7 9F                   VEC_RES98               DW      ISR_RES98               ;vector base + $98
003F9A 03FF9A F7 9F                   VEC_RES9A               DW      ISR_RES9A               ;vector base + $9A
003F9C 03FF9C F7 9F                   VEC_RES9C               DW      ISR_RES9C               ;vector base + $9C
003F9E 03FF9E F7 9F                   VEC_RES9E               DW      ISR_RES9E               ;vector base + $9E
003FA0 03FFA0 F7 9F                   VEC_RESA0               DW      ISR_RESA0               ;vector base + $A0
003FA2 03FFA2 F7 9F                   VEC_RESA2               DW      ISR_RESA2               ;vector base + $A2
003FA4 03FFA4 F7 9F                   VEC_RESA4               DW      ISR_RESA4               ;vector base + $A4
003FA6 03FFA6 F7 9F                   VEC_RESA6               DW      ISR_RESA6               ;vector base + $A6
003FA8 03FFA8 F7 9F                   VEC_RESA8               DW      ISR_RESA8               ;vector base + $A8
003FAA 03FFAA F7 9F                   VEC_RESAA               DW      ISR_RESAA               ;vector base + $AA
003FAC 03FFAC F7 9F                   VEC_RESAC               DW      ISR_RESAC               ;vector base + $AC
003FAE 03FFAE F7 9F                   VEC_RESAE               DW      ISR_RESAE               ;vector base + $AE
003FB0 03FFB0 F7 9F                   VEC_CANTX               DW      ISR_CANTX               ;vector base + $A0
003FB2 03FFB2 F7 9F                   VEC_CANRX               DW      ISR_CANRX               ;vector base + $B2
003FB4 03FFB4 F7 9F                   VEC_CANERR              DW      ISR_CANERR              ;vector base + $B4
003FB6 03FFB6 F7 9F                   VEC_CANWUP              DW      ISR_CANWUP              ;vector base + $B6
003FB8 03FFB8 16 D9                   VEC_FLASH               DW      ISR_FLASH               ;vector base + $B8
003FBA 03FFBA F7 9F                   VEC_FLASHFLT            DW      ISR_FLASHFLT            ;vector base + $BA
003FBC 03FFBC F7 9F                   VEC_SPI2                DW      ISR_SPI2                ;vector base + $BC
003FBE 03FFBE F7 9F                   VEC_SPI1                DW      ISR_SPI1                ;vector base + $BE
003FC0 03FFC0 F7 9F                   VEC_RESC0               DW      ISR_RESC0               ;vector base + $C0
003FC2 03FFC2 F7 9F                   VEC_SCI2                DW      ISR_SCI2                ;vector base + $C2
003FC4 03FFC4 F7 9F                   VEC_RESC4               DW      ISR_RESC4               ;vector base + $C4
003FC6 03FFC6 F7 9F                   VEC_PLLLOCK             DW      ISR_PLLLOCK             ;vector base + $C6
003FC8 03FFC8 F7 9F                   VEC_OSCSTAT             DW      ISR_OSCSTAT             ;vector base + $C8
003FCA 03FFCA F7 9F                   VEC_RESCA               DW      ISR_RESCA               ;vector base + $CA
003FCC 03FFCC F7 9F                   VEC_ACMP                DW      ISR_ACMP                ;vector base + $CC
003FCE 03FFCE F7 9F                   VEC_PORTJ               DW      ISR_PORTJ               ;vector base + $CC
003FD0 03FFD0 F7 9F                   VEC_RESD0               DW      ISR_RESD0               ;vector base + $D0
003FD2 03FFD2 F7 9F                   VEC_ATD0                DW      ISR_ATD0                ;vector base + $D2
003FD4 03FFD4 F7 9F                   VEC_SCI1                DW      ISR_SCI1                ;vector base + $D4
003FD6 03FFD6 15 6D                   VEC_SCI0                DW      ISR_SCI0                ;vector base + $D6
003FD8 03FFD8 F8 0C                   VEC_SPI0                DW      ISR_SPI0                ;vector base + $D8
003FDA 03FFDA F7 9F                   VEC_TIM_PAIE            DW      ISR_TIM_PAIE            ;vector base + $DA
003FDC 03FFDC F7 9F                   VEC_TIM_PAOV            DW      ISR_TIM_PAOV            ;vector base + $DC
003FDE 03FFDE F7 9F                   VEC_TIM_TOV             DW      ISR_TIM_TOV             ;vector base + $DE
003FE0 03FFE0 F7 9F                   VEC_TIM_TC7             DW      ISR_TIM_TC7             ;vector base + $E0
003FE2 03FFE2 F7 9F                   VEC_TIM_TC6             DW      ISR_TIM_TC6             ;vector base + $E2
003FE4 03FFE4 F7 9F                   VEC_TIM_TC5             DW      ISR_TIM_TC5             ;vector base + $E4
003FE6 03FFE6 F7 9F                   VEC_TIM_TC4             DW      ISR_TIM_TC4             ;vector base + $E6
003FE8 03FFE8 F7 9F                   VEC_TIM_TC3             DW      ISR_TIM_TC3             ;vector base + $E8
003FEA 03FFEA F7 9F                   VEC_TIM_TC2             DW      ISR_TIM_TC2             ;vector base + $EA
003FEC 03FFEC F7 9F                   VEC_TIM_TC1             DW      ISR_TIM_TC1             ;vector base + $EC
003FEE 03FFEE 14 E2                   VEC_TIM_TC0             DW      ISR_TIM_TC0             ;vector base + $EE
003FF0 03FFF0 F7 9F                   VEC_RTI                 DW      ISR_RTI                 ;vector base + $F0
003FF2 03FFF2 F7 9F                   VEC_IRQ                 DW      ISR_IRQ                 ;vector base + $F2
003FF4 03FFF4 F7 9F                   VEC_XIRQ                DW      ISR_XIRQ                ;vector base + $F4
003FF6 03FFF6 F7 9F                   VEC_SWI                 DW      ISR_SWI                 ;vector base + $F6
003FF8 03FFF8 F7 9F                   VEC_TRAP                DW      ISR_TRAP                ;vector base + $F8
003FFA 03FFFA F7 A7                   VEC_RESET_COP           DW      RESET_COP_ENTRY         ;vector base + $FA
003FFC 03FFFC F7 B0                   VEC_RESET_CM            DW      RESET_CM_ENTRY          ;vector base + $FC
003FFE 03FFFE F5 94                   VEC_RESET_EXT           DW      RESET_EXT_ENTRY         ;vector base + $FE
004000 040000 -> $4000                VECTAB_END              EQU     *
004000 040000 -> $40000               VECTAB_END_LIN          EQU     @
